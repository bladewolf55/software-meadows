<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Remote Work Tiny Tips - Hugs in a No-Touch World</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_hugs_in_a_no-touch_world/images/mother-and-child1.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the doing. Don't beat yourself up! Try this tiny tip on...&lt;/p&gt;
&lt;h2 id="self-hugging"&gt;Self-Hugging&lt;/h2&gt;
&lt;p&gt;Humans need to be touched. Classic (and distressing) experiments by René Spitz and Harry Harlow demonstrated that without touch as infants, behavior goes terribly awry. We need affection.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As I'm writing this, staying at home is legally enforced in most states to control the spread of COVID-19. One group who may be suffering are those who are single and have no pets. What can they do for self-care?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'd better be clear. I've been treated for depression for years. There's no shame in that. If you're feeling depressed, &lt;em&gt;contact your doctor&lt;/em&gt;. I know they're busy with COVID-19. But you're important. If your medical plan provides tele-health, use it. What I'm suggesting below &lt;em&gt;may help&lt;/em&gt;, but it's not a prescription because I'm not a doctor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="massage"&gt;Massage&lt;/h2&gt;
&lt;p&gt;I found it difficult to find authoritative research on whether massage helps depression. However, I did find some. The problem is that researchers still don't know what types of massage provide benefits. However, the researchers have found that massage, by and large, doesn't cause harm.&lt;/p&gt;
&lt;p&gt;This isn't my field, so I'm going to link to a couple of videos that I feel safe in recommending. We're not talking about rubbing our faces and necks for fifteen seconds because (in my case) that unit test &lt;em&gt;just won't pass&lt;/em&gt;. You need to take time for this, just as with any self-care.&lt;/p&gt;
&lt;p&gt;Also, consider that yoga &lt;em&gt;may&lt;/em&gt; also provide some affection-relief. There's a lot of binding/unbinding that is similar to massage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nWNf6Khc9go"&gt;Tension Headache Relief with Simple Stretches - Ask Doctor Jo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3IPIabdeaSw"&gt;Physical Therapy: Instant Headache Relief In Seconds With Self Massage &amp;amp; Stretch Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCxyiSz4m161Z6frOsFxJpgw"&gt;Cleveland Clinic: Accupressure for Stress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2J8Ue5i5wDI"&gt;Self-Massage for Tension Headaches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="visualization"&gt;Visualization&lt;/h2&gt;
&lt;p&gt;This is definitely in the &amp;quot;take it or leave it&amp;quot; category. There's lots of research showing that the brain doesn't generally differentiate between what it's actually experiencing and what is vividly imagined.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's my idea: take ten minutes and imagine receiving a massage or a hug or whatever would help.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vividly replay something you remember that gave you that warm, fuzzy, googly feeling in your gut.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want a guided visualization, you can search YouTube. My advice: keep it to ten minutes, and avoid anything that seems hokey or super new-agey to you. I've found that plain talk is often best.&lt;/p&gt;
&lt;p&gt;Here are a couple of body scan meditations that I think are effective. And I'm breaking my own advice on the first one, because we're big Hagan Rampes fans in our house.&lt;/p&gt;
&lt;p&gt;Dr Rampes practices Mindful Cognitive Behavioral Therapy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=K_fUUqXVm_c"&gt;Hagan Rampes - Body Scan (Short)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ms Vidyamala Burch teaches meditation from practical, serious experience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Following two life-changing events in the 1970’s, I now live with a chronic back condition due to spinal injuries and partial paraplegia. I also navigate the trickiness of managing a paralysed bowel and bladder. --&lt;a href="https://www.vidyamala-burch.com/about_me/"&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=X64ZMndWseA&amp;amp;list=PLtu9RHJjKzD7epwUiVySrkkPKuKzJoCB1&amp;amp;index=4&amp;amp;t=20s"&gt;Vidyamala Burch - Body Scan Head To Feet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freebuddhistaudio.com/audio/details?num=M15"&gt;The Way Of Mindfulness Week 2 - Body Scan (breath-based) By Vidyamala&lt;/a&gt; &amp;lt;= Personal favorite&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;In major crises, despite what we often think, people come &lt;em&gt;together&lt;/em&gt;. We don't (usually) become raving, selfish animals. The paradox of COVID-19 is that the healthiest thing for everyone is to &lt;em&gt;not&lt;/em&gt; come together, but stay apart. But remember:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Social distancing does not require social isolation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hug yourself.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Affection and Touch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Frederick_II,_Holy_Roman_Emperor#Literature_and_science"&gt;Frederick II, Holy Roman Emperor - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.britannica.com/science/infant-stimulation-program#ref1191465"&gt;Infant stimulation program | therapy | Britannica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stpauls.vxcommunity.com/Issue/Us-Experiment-On-Infants-Withholding-Affection/13213"&gt;US Experiment on infants withholding affection | St. Paul's Collegiate (Values Exchange Community)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2865952/"&gt;The importance of touch in development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scientificamerican.com/article/infant-touch/"&gt;How Important Is Physical Contact with Your Infant? - Scientific American&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thebrain.mcgill.ca/flash/capsules/histoire_bleu06.html"&gt;History Module: The Devastating Effects of Isolation on Social Behaviour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ren%C3%A9_Spitz"&gt;René Spitz - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Massage&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/books/NBK75521/"&gt;Massage therapy for the treatment of depression: a systematic review - Database of Abstracts of Reviews of Effects (DARE): Quality-assessed Reviews - NCBI Bookshelf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="file:///C:/Users/charl/Downloads/TheEffectivenessofMassageTherapyASummaryofEvidence-BasedResearch.pdf"&gt;Microsoft Word - AAMT-Research-Report-6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sciencedirect.com/science/article/abs/pii/S1744388110000794"&gt;Yoga clinical research review - ScienceDirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radicalrelaxationcentral.com/does-massage-therapy-help-depression"&gt;Does Massage Therapy Help Depression- Beating The Blues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3091449/"&gt;Affective Massage Therapy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a video about whether accupuncture (not massage) really works.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eXZGIoZokJE"&gt;Does Acupuncture Even Work? - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Isolation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.happinesslab.fm/coronavirus-bonus-episodes/beat-your-isolation-loneliness"&gt;Happiness Lab - Coronovirus Episode 1: Beat Your Isolation Loneliness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I'm clearly extrapolating from the documented affects of absent-affection on infants to the needs of adults. But I'm also pretty sure if adults were prevented from being touched for months they'd exhibit negative behaviors.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;There's an important caveat. What I've read regarding how to practice--such as practicing a skill--is that you need to have physically &lt;em&gt;done&lt;/em&gt; the thing before visualization is effective. You're not going to become a top boxer if you just pretend. You've got to get in the ring.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 5 Apr 2020 14:07:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_hugs_in_a_no-touch_world</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_hugs_in_a_no-touch_world</guid>
    </item>
    <item>
      <title>Remote Work Tiny Tips - Gratitude, Gosh Darn It!</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_gratitude__gosh_darn_it!/images/City%20Lights%201.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the &lt;em&gt;doing&lt;/em&gt;. Don't beat yourself up! Try this tiny tip on...&lt;/p&gt;
&lt;h2 id="gratitude"&gt;Gratitude&lt;/h2&gt;
&lt;p&gt;Honestly, it can be hard to feel good about work, especially when it's upended. But I'll always remember attending a talk given by prolific writer Isaac Asimov, who said, &amp;quot;I think if you're going to do something for eight hours a day, you should feel good and be proud of it.&amp;quot;&lt;/p&gt;
&lt;p&gt;There's solid research showing that gratitude is A) a skill, B) challenging, and C) highly beneficial to our health and well-being.&lt;/p&gt;
&lt;h2 id="when-is-your-work-day-over"&gt;When Is Your Work Day Over?&lt;/h2&gt;
&lt;p&gt;Here's a small routine to try out.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When your work day ends--whenever that is--it's not over until you've physically written down one thing you're grateful for.&lt;/li&gt;
&lt;li&gt;Relive that thing. Savor it. Take a full minute.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm not saying you won't have days that are crap and you're glad they're over. I'm saying you get to choose how you &lt;em&gt;transition&lt;/em&gt; to the next part of your day. Spare yourself, your spouse, your kids the barrel of awful. Tell them the truth; maybe it was rough, but there was something to be grateful for.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't let your past control you. Take a minute for one good thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;Stop the comparisons to others. You're not more or less grateful than someone else. The worst kinds of reference points are other people. How grateful are &lt;em&gt;you&lt;/em&gt; today?&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;(taken from the terrific, free Yale course &lt;a href="https://www.coursera.org/learn/the-science-of-well-being"&gt;The Science of Well-Being&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gratitude&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Emmons et al. (2003).&lt;/strong&gt; &lt;a href="https://greatergood.berkeley.edu/pdfs/GratitudePDFs/6Emmons-BlessingsBurdens.pdf"&gt;Counting blessings versus burdens: An experimental investigation of gratitude and subjective well-being in daily life.&lt;/a&gt; Journal of personality and social psychology, 84(2), 377.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This paper tells us that gratitude - counting the good things in our lives - makes us happy&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Seligman et al. (2005).&lt;/strong&gt; &lt;a href="http://www.psykologtidsskriftet.no/pdf/2005/874-884.pdf"&gt;Positive Psychology Progress: Empirical Validation of Interventions.&lt;/a&gt; American Psychologist, 60(5):410-21&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This paper explores several happiness interventions and tells us gratitude interventions can increase happiness&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Barton et al. (2015).&lt;/strong&gt; &lt;a href="https://gratefulness.org/content/uploads/2015/11/UofG-Study.pdf"&gt;Linking financial distress to marital quality: The intermediary roles of demand/withdraw and spousal gratitude expressions.&lt;/a&gt; Personal Relationships, 22, 536–549.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This paper tells us being grateful can help us through difficult times (as seen in the case of marriage)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grant &amp;amp; Gino (2010).&lt;/strong&gt; &lt;a href="https://www.ncbi.nlm.nih.gov/pubmed/20515249"&gt;A little thanks goes a long way: Explaining why gratitude expressions motivate prosocial behavior.&lt;/a&gt; Journal of personality and social psychology, 98(6), 946.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This paper tells us receiving gratitude makes us feel valued and motivates us to be more generous&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 30 Mar 2020 18:05:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_gratitude__gosh_darn_it!</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_gratitude__gosh_darn_it!</guid>
    </item>
    <item>
      <title>Remote Work Tiny Habits - Staying Healthy (Food)</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_habits_-_staying_healthy_food/images/banana-finished-single.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the doing. Don't beat yourself up! Try this tiny tip on...&lt;/p&gt;
&lt;h2 id="staying-healthy-food"&gt;Staying Healthy (Food)&lt;/h2&gt;
&lt;p&gt;I'm not a nutritionist, so please make sure what I'm suggesting makes sense for you and your body.&lt;/p&gt;
&lt;p&gt;Changing to remote work can easily trigger different eating behaviors, healthy and unhealthy. For me, those changes are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What food is available?&lt;/li&gt;
&lt;li&gt;How easily can I get to it?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;As I'm writing this, we are of course in the midst of the COVID-19 pandemic. This has changed what people &lt;em&gt;can&lt;/em&gt; find at grocery stores, let alone when then can buy. It's also changing people's relationship with food.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="take-stock-of-your-stock-and-junk"&gt;Take Stock of Your Stock - and Junk&lt;/h2&gt;
&lt;p&gt;This will only take a minute:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write down all the healthy snacks and drinks you can think of that are in the house. Got it? Do it first, really. You need all those healthy snacks in your head before moving on.&lt;/li&gt;
&lt;li&gt;Next, write down all the junk food. Notice I'm not judging what's healthy and junk. That's up to you.&lt;/li&gt;
&lt;li&gt;Finally, get up and find &lt;em&gt;where&lt;/em&gt; those foods reside. In the fridge, on a counter, next to your computer, squirreled away under your son's or daughter's (or your) bed. Wherever.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You now have a reasonably accurate picture of how you think about eating. After all, you bought it or allowed it to be bought. You put it there, or allowed it to stay there.&lt;/p&gt;
&lt;h2 id="whats-easier-the-banana-or-the-banana-moon-pie"&gt;What's Easier? The Banana or the Banana Moon Pie?&lt;/h2&gt;
&lt;p&gt;Did you find a pattern of where healthy vs junk were located? Was it easier to grab a bag of chips than a bag of wasabi chickpeas?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whatever's closest is what you'll eat. Your body craves. Overriding that craving take effort. &lt;em&gt;Brain&lt;/em&gt; effort. Your body &lt;em&gt;hates&lt;/em&gt; brain effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pick one--just one, for now--healthy snack or drink that can stay on your desk for a day. If there's any other snack on your desk, put it in a closet. Now sit at your desk and say to yourself five times:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I crave a snack, I'll have &lt;em&gt;you&lt;/em&gt;, right there! Then I'll smile, take a break, and replace you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's it. That's your routine for the next week. Healthy snack on desk, imagine the plan five times, eat, repeat.&lt;/p&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;We're still making use of behavioral science. In this case:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make it easy&lt;/li&gt;
&lt;li&gt;Imagine the positive outcome before imagining the negative. &lt;em&gt;Always&lt;/em&gt; this order.&lt;/li&gt;
&lt;li&gt;Celebrate little victories&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Be curious. Will you have the healthy snack today or not? If not, what can you do to make it easier, or more attractive?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't punish yourself. Coach yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://suebehaviouraldesign.com/kahneman-fast-slow-thinking/"&gt;Kahneman Fast And Slow Thinking Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamesclear.com/habits"&gt;The Habits Guide: How to Build Good Habits and Break Bad Ones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Sun, 29 Mar 2020 15:03:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_habits_-_staying_healthy_food</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_habits_-_staying_healthy_food</guid>
    </item>
    <item>
      <title>Remote Work Tiny Tips - Staying Healthy (Exercise)</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_staying_healthy_exercise/images/vintage-heads-to-ball.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the &lt;em&gt;doing&lt;/em&gt;. Don't beat yourself up! Try these tiny tips on...&lt;/p&gt;
&lt;h2 id="staying-healthy-exercise"&gt;Staying Healthy (Exercise)&lt;/h2&gt;
&lt;p&gt;If you're a developer or someone who works mostly at a computer, you know that exercise is a) important, and b) hard&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might be in pretty good shape. You might be overweight. Regardless, there's an exercise you can do near your desk and make it as easy or difficult as you want.&lt;/p&gt;
&lt;p&gt;Push-ups.&lt;/p&gt;
&lt;h2 id="starting-easy-winning-fast"&gt;Starting Easy, Winning Fast&lt;/h2&gt;
&lt;p&gt;Someone out there immediately thought, &amp;quot;I can't even imagine getting up off the ground. I'll never do a pushup.&amp;quot;&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gotcha. You're not ready for modern pushups that target the pectorals and brachial triceps, along with the anterior abdominals. Fine. Let's make it easy. Do a wall push-up.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stand in front of the wall&lt;/li&gt;
&lt;li&gt;Take one or two steps back&lt;/li&gt;
&lt;li&gt;Put your hands on the wall&lt;/li&gt;
&lt;li&gt;Do your push-up.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There. Celebrate. You did it! Seriously. You gosh-darn did what you set out to do. &lt;em&gt;That's worth celebrating!&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Push-ups are the gateway drug to other exercise.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Want to do more than (whatever your easy number is)? Fine. &lt;em&gt;But don't plan to. They're a bonus.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="push-up-form-basics-you-look-mahvelous"&gt;Push-Up Form Basics - You Look Mahvelous&lt;/h2&gt;
&lt;p&gt;Most people do push-ups wrong. They spread their arms like albatross wings, splay their elbows out, and pump up and down fast.&lt;/p&gt;
&lt;p&gt;That's terrible mechanics. It's not so great for your rotator cuffs, either. Modern trainers focus on safety and stability.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_staying_healthy_exercise/images/Pushup.png" alt="" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start in plank, even doing wall push-ups: hands and elbows stacked directly under shoulders like pillars, a flat line from back to feet.&lt;/li&gt;
&lt;li&gt;Inhale, go down slowly...three to five seconds. Most important: &lt;strong&gt;scrap your elbows against your sides&lt;/strong&gt;. Don't let them flare out. Don't. Ever.&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Done right, your hands will end up near your floating (bottom) ribs.&lt;/li&gt;
&lt;li&gt;Exhale, rise up even slower if you can.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="when"&gt;When?&lt;/h2&gt;
&lt;p&gt;That's simple, and you're not going to like it, but I think researcher BJ Fogg is right. Do your push-up(s) after you pee. You're going to do that at least once a day, right?&lt;/p&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;I'm suggesting push-ups because they're easy to do right, easy to measure, and you can find a way to do just one. But if you have another exercise that fits the bill, do it.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_staying_healthy_exercise/images/vintage-workout.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="help"&gt;Help&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=N5C9NUHZ20U"&gt;Pushups - Step 1 - Wall Pushups - YouTube&lt;/a&gt; &amp;lt;== Safe&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Eh00_rniF8E"&gt;How to Do a Push Up Correctly - YouTube&lt;/a&gt; &amp;lt;== Correct&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4z5kffSzjWI"&gt;How To Do Aztec Push Ups (Touch Your Toes In The Air!) - YouTube&lt;/a&gt; &amp;lt;== Outrageous&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.insider.com/stanford-researcher-bj-fogg-weight-loss-push-ups-routine-2020-1"&gt;Stanford's BJ Fogg lost 20 pounds doing 2 pushups after peeing - Insider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;These are true for everyone.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;After &lt;em&gt;The Machinist&lt;/em&gt;, Christian Bale couldn't do one pushup. And his next film was &lt;em&gt;Batman Begins&lt;/em&gt;.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Unless you're more experienced. Then you can let your elbows come out about twenty degrees. That will work your chest more.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 25 Mar 2020 18:02:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_staying_healthy_exercise</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_staying_healthy_exercise</guid>
    </item>
    <item>
      <title>Remote Work Tiny Tips - Focusing</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_focusing_and_breaking/images/Focus%20is%20a%20superpower.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the &lt;em&gt;doing&lt;/em&gt;. Don't beat yourself up! Try these tiny tips on...&lt;/p&gt;
&lt;h1 id="focusing"&gt;Focusing&lt;/h1&gt;
&lt;p&gt;Here are just a couple of effective ways to enter into what researcher Mihaly Csikszentmihalyi calls &amp;quot;&lt;a href="https://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics-ebook/dp/B000W94FE6/ref=sr_1_1?keywords=flow&amp;amp;qid=1585105481&amp;amp;sr=8-1"&gt;flow&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;h2 id="time-box"&gt;Time Box&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt; is arguably the most well-known time-boxing technique, made up of 25 minute intensive work and 5 minute breaks. However, from both research and my experience, I don't recommend it for software developers or other professions that require significant ramp-up time before real work can get done. Developers take about twenty minutes to load the full context of a piece of software into working memory. That only leaves five minutes to work!&lt;/p&gt;
&lt;p&gt;Instead, I use a &lt;a href="https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development_repost/"&gt;50-10 time box&lt;/a&gt;. It neatly aligns to the hour, allows enough focused work time, and the ten minute break isn't onerous. Here are the steps (same as Pomodoro, just different times).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep a physical or electronic notebook available.&lt;/li&gt;
&lt;li&gt;Write down what you'll work on in the time box.&lt;/li&gt;
&lt;li&gt;Start your timer for 50 minutes. Work &lt;em&gt;exclusively&lt;/em&gt; on the task during that time.&lt;/li&gt;
&lt;li&gt;When you become distracted--you will--quickly write down what distracted you then go back to work.&lt;/li&gt;
&lt;li&gt;At break time, &lt;em&gt;take the break&lt;/em&gt;. Seriously, walk away for 10 minutes.&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Why it works&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Research shows 40-50 minutes is about optimal for intense focus, especially in problem solving.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Research also shows that breaks are critical for maintaining high cognitive performance. They give your neurons time to strengthen the pathways to the information just learned.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is why walking away from a problem is so effective in solving it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing down your distractions literally removes them from your mind. Otherwise, part of your brain keeps trying to think about them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="remove-all-distractions"&gt;Remove All Distractions&lt;/h2&gt;
&lt;p&gt;Consider that there are two kinds of focus: exclusive and inclusive. Exclusive focus is when you're wholly engaged in the task and forget about the past, present, and your environment (imagine writing a book). Inclusive focus is when you're paying attention to many things in your environment that affect accomplishing the task (think about football quarterbacks).&lt;/p&gt;
&lt;p&gt;Most of us working remotely are aiming for exclusive focus. And distractions are the enemy. Such as...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kids, spouses, pets demanding attention&lt;/li&gt;
&lt;li&gt;Notifications from email, social media, chat, watch, calendar, etc.&lt;/li&gt;
&lt;li&gt;TVs, video games&lt;/li&gt;
&lt;li&gt;Music (yes, even my beloved music)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's your experiment. Or challenge. Or whatever temporarily motivates you to try it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn off &lt;em&gt;every&lt;/em&gt; notification on your computer and phone. The phone's easy: put it in airplane mode and turn on Do Not Disturb.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tell your family to leave you alone until a particular time, such as the start of your time box break.&lt;/li&gt;
&lt;li&gt;If possible, close the door.&lt;/li&gt;
&lt;li&gt;If there are still sounds, put in earphones or a headset.&lt;/li&gt;
&lt;li&gt;Don't turn on music. If you still need sound to block out distracting noises, try the excellent &lt;a href="https://mynoise.net/"&gt; myNoise&lt;/a&gt; web site and app.&lt;/li&gt;
&lt;li&gt;Work without distraction, and afterward quickly write down how you felt.&lt;/li&gt;
&lt;li&gt;Do it again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Why it works&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creative and problem-solving work requires juggling lots of information. Any external distractions hamper that effort by taking our attention.&lt;/li&gt;
&lt;li&gt;Our brains work in modes. One mode, the &lt;a href="https://en.wikipedia.org/wiki/Default_mode_network"&gt;&lt;em&gt;default mental network&lt;/em&gt;&lt;/a&gt;, is our wandering mind. We spend about 47% of our time there. When you're distracted by your own thoughts, that's wandering mind. When you set the distraction aside and go back to the task, you're in &lt;em&gt;task mind&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Give yourself the best chance at being in task mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;Focus is real. But it's not a gift. It's a skill.&lt;/p&gt;
&lt;h2 id="misc"&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.AT.PomodoroTimer"&gt;Brain Focus Productivity Timer - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.marinaratimer.com/"&gt;Pomodoro Method Style Time Management Tool &amp;amp; Timer | Marinara by 352&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Unless of course you need to be notified for medical or other real-life circumstances. I'm just saying that Snapchat can likely wait.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 24 Mar 2020 20:50:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_focusing_and_breaking</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_focusing_and_breaking</guid>
    </item>
    <item>
      <title>Remote Work Tiny Tips - Forming New Habits</title>
      <description>&lt;p&gt;&lt;a title="Abhijit Tembhekar from Mumbai, India / CC BY (https://creativecommons.org/licenses/by/2.0)" href="https://commons.wikimedia.org/wiki/File:Red_Apple.jpg"&gt;&lt;img width="256" alt="Red Apple" src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Red_Apple.jpg/256px-Red_Apple.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the &lt;em&gt;doing&lt;/em&gt;. Don't beat yourself up! Try this tiny tip on...&lt;/p&gt;
&lt;h1 id="forming-new-habits"&gt;Forming New Habits&lt;/h1&gt;
&lt;p&gt;Habit-forming has lots of recent research behind it, plus several new books, articles and podcast episodes.&lt;/p&gt;
&lt;p&gt;One important thing to know about habits is that what you've learned before is likely wrong. If you have trouble making habits it's not a lack of character or willpower or discipline. It's lack of facts!&lt;/p&gt;
&lt;h2 id="a-simple-script"&gt;A Simple Script&lt;/h2&gt;
&lt;p&gt;I've listed some resources later, but for now you can get started on a new habit with these steps. These are all based on B. J. Foog's book &lt;em&gt;Tiny Habits&lt;/em&gt; and James Clear's &lt;em&gt;Atomic Habits&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose an &lt;strong&gt;aspiration&lt;/strong&gt;. It can be pretty general, like &amp;quot;I want to eat better during this remote work period&amp;quot;&lt;/li&gt;
&lt;li&gt;List out a bunch of behaviors that you think would help you achieve that aspiration. Make sure the &lt;strong&gt;behaviors are specific and measurable&lt;/strong&gt;. The simpler the better. Example: &amp;quot;Snack on fruit instead of chips.&amp;quot; Or, &amp;quot;Drink four glasses of ice water a day&amp;quot;&lt;/li&gt;
&lt;li&gt;Give each behavior two ratings on a scale of 1-5
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Impact&lt;/strong&gt;: How much will this help me toward my aspiration?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feasibility&lt;/strong&gt;: How likely am I to do it?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The behaviors with high impact and feasibility are your winners. Pick &lt;em&gt;just one&lt;/em&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK so far? Now, forget about motivation. Motivation is fickle like an ex-girlfriend&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. Anchor your behavior in things you can depend on.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the &lt;strong&gt;Prompt&lt;/strong&gt; Obvious:
&lt;ul&gt;
&lt;li&gt;What will remind you to eat that apple? Examples:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Right now&lt;/em&gt;, put apples on your work desk in easy reach.&lt;/li&gt;
&lt;li&gt;The best anchor for a new behavior is an existing one. What do you always do each day? See below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make it &lt;strong&gt;Easy&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Hate biting into apples. Put a knife next to it so you can slice it.&lt;/li&gt;
&lt;li&gt;Hate mess? Keep a towel nearby. Maybe a little bowl, too, for the core.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No, Really. Make It &lt;strong&gt;Stupidly Easy and Tiny&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maybe your new, &lt;strong&gt;starting behavior&lt;/strong&gt; isn't to eat the whole apple. It isn't even to eat any of the apple.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your new behavior is super tiny: Just &lt;em&gt;pick up the apple&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don't sneer at this approach. Success is made of little wins.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Celebrate!&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Do not&lt;/em&gt; skip this step. Celebrations kick in your dopamine and make you want to keep doing this new thing. The celebration can be a smile, a fist pump, a little song. Whatever makes you feel good. It'll take getting used to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;It sounds dumb, but...you're going to pee today, right? Make your habit, &amp;quot;After I pee, I'll wash my hands, go to my desk, and pick up my apple. Then I'll fist pump and say, 'OK, an apple a day!;&amp;quot;&lt;/p&gt;
&lt;p&gt;If you eat the apple, fine. If not, fine. You met your commitment to yourself.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The thing is, pretty soon you'll eat the apple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="and-finally"&gt;And Finally&lt;/h2&gt;
&lt;p&gt;Little habits add up.&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Tiny-Habits-Changes-Change-Everything/dp/B082VKLDM9/ref=sr_1_1?keywords=tiny+habits&amp;amp;qid=1584675693&amp;amp;sr=8-1"&gt;Tiny Habits: The Small Changes That Change Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/B07RFSSYBH/ref=sr_1_3?keywords=atomic+habits&amp;amp;qid=1584675727&amp;amp;sr=8-3"&gt;Atomic Habits: An Easy &amp;amp; Proven Way to Build Good Habits &amp;amp; Break Bad Ones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Articles&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jamesclear.com/articles"&gt;James Clear's Best Articles: Over 100 Interesting Articles to Read&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Podcast Episodes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.artofmanliness.com/articles/podcast-581-the-tiny-habits-that-change-everything/"&gt;BJ Fogg: The Tiny Habits That Change Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npr.org/2019/12/11/787160734/creatures-of-habit-how-habits-shape-who-we-are-and-who-we-become"&gt;Building Better Habits And Breaking Bad Ones | Hidden Brain : NPR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;To be fair, I was often more fickle than my ex-girlfriends.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Thu, 19 Mar 2020 21:06:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_forming_new_habits</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_forming_new_habits</guid>
    </item>
    <item>
      <title>Remote Work Tiny Tips - Keeping Your Routine</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_keeping_your_routine/images/alexander_graham_bell_sm.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's relatively easy to get the technology running to work from home. The hard part is the &lt;em&gt;doing&lt;/em&gt;. Don't beat yourself up! Try this tiny tip on...&lt;/p&gt;
&lt;h1 id="keeping-your-routine"&gt;Keeping Your Routine&lt;/h1&gt;
&lt;p&gt;Here are just a few steps to help you &amp;quot;remote&amp;quot; as well as you &amp;quot;on-sited.&amp;quot;&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="love-your-old-routine"&gt;1. Love Your Old Routine&lt;/h2&gt;
&lt;p&gt;Write out your previous on-site routine, starting from when you woke up to what you did first thing after getting to work. For example:&lt;/p&gt;
&lt;div style="font-family: Comic Sans MS, Comic Sans, Apple Cancery, cursive;"&gt;
&lt;ol&gt;
&lt;li&gt;Turn off alarm.&lt;/li&gt;
&lt;li&gt;Throw back covers, feet on floor.&lt;/li&gt;
&lt;li&gt;Bathroom, splash face with water.&lt;/li&gt;
&lt;li&gt;Shower, brush hair, makeup (or shave).&lt;/li&gt;
&lt;li&gt;Dress in front of mirror.&lt;/li&gt;
&lt;li&gt;Coffee. Breakfast.&lt;/li&gt;
&lt;li&gt;Drive to work. Listen to news.&lt;/li&gt;
&lt;li&gt;Go to break room. More coffee.&lt;/li&gt;
&lt;li&gt;Start computer. Log on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;/div&gt;
    
Savor that list. It's your warm friend. Even if it was a hassle sometimes...
&lt;blockquote&gt;
&lt;p&gt;That's the routine you're used to, that tells you &amp;quot;It's time to work!&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="discover-your-new-routine-is-mostly-the-same"&gt;2. Discover Your New Routine (Is Mostly the Same)!&lt;/h2&gt;
&lt;p&gt;Make a copy of that list and mark out &lt;em&gt;only&lt;/em&gt; the things that you &lt;em&gt;can't&lt;/em&gt; do at home.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You'll probably find that most of your routine can stay the same.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="do-your-new-routine-with-a-twist-and-shout"&gt;3. Do Your New Routine With a Twist--and Shout&lt;/h2&gt;
&lt;p&gt;Emotions drive behavior. We'll rationalize the behavior afterward, but loads of research keeps showing us the truth:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Emotions Drive Behavior&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, for the next few days, as goofy as it sounds, do one, simple thing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Celebrate after &lt;em&gt;each step&lt;/em&gt; in your new routine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not half-heartedly. Give it! A big smile, a fist pump, say &amp;quot;That's the way!&amp;quot; Doing this will fire off dopamine in your brain, which will make you feel good, which will make you want to keep doing the routine.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Micro-celebrations are the easy &amp;quot;Likes&amp;quot; you give yourself.&lt;/p&gt;
&lt;h2 id="and-finally"&gt;And Finally&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Effort leads to improvement&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Please never use the word &amp;quot;on-sited.&amp;quot;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Science.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 18 Mar 2020 17:57:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_keeping_your_routine</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_work_tiny_tips_-_keeping_your_routine</guid>
    </item>
    <item>
      <title>Continuous Integration Flow - An Accurate and Unlovely Graphic</title>
      <description>&lt;p&gt;I needed to explain this to a colleague recently, took a picture of my whiteboard drawing, then digitized it using Inkscape. I've also linked to a PDF version. It says &amp;quot;Azure DevOps,&amp;quot;, but it's a pretty generic depiction.&lt;/p&gt;
&lt;p&gt;It ain't pretty, but it's correct.&lt;/p&gt;
&lt;p&gt;Hope it helps someone!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/continuous_integration_flow_-_an_accurate_and_unlovely_graphic/images/Continuous%20Integration%20Flow.pdf"&gt;Continuous Integration Flow.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/continuous_integration_flow_-_an_accurate_and_unlovely_graphic/images/Continuous%20Integration%20Flow.svg" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 11 Mar 2020 21:17:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/continuous_integration_flow_-_an_accurate_and_unlovely_graphic</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/continuous_integration_flow_-_an_accurate_and_unlovely_graphic</guid>
    </item>
    <item>
      <title>Why the Repository Pattern Fails for Legacy Databases Like Yours and What to Do About It</title>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/File:Repo-Man-Poster.jpg#/media/File:Repo-Man-Poster.jpg"&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/en/4/46/Repo-Man-Poster.jpg" alt="Repo-Man-Poster.jpg"&gt;&lt;/a&gt;&lt;br&gt;By Source, &lt;a href="//en.wikipedia.org/wiki/File:Repo-Man-Poster.jpg" title="Fair use of copyrighted material in the context of Repo Man (film)"&gt;Fair use&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/w/index.php?curid=10827447"&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction:-a-classic-example-(spot-the-flaw?)"&gt;Introduction: A Classic Example (spot the flaw?)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#implicit-architecture-rules"&gt;Implicit Architecture Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unnecessary-abstraction"&gt;The Unnecessary Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cutting-out-the-middleman"&gt;Cutting Out the Middleman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-data-sources-will-change..."&gt;Your Data Sources Will Change...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="introduction-a-classic-example-spot-the-flaw"&gt;Introduction: A Classic Example (spot the flaw?)&lt;/h2&gt;
&lt;p&gt;One of the hallmarks of creating a loosely coupled architecture is using the repository pattern to return data. Each model's repository is implemented from an interface, and that interface is injected into, typically, a service.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Domain.DomainModels
{
    public class Customer
    {
        public int CustomerId {get; set;}
        public string Name {get; set;}
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Domain.DataInterfaces
{
    public interface IRepository&amp;lt;T&amp;gt; where T: class
    {
        T Single(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt; where);
        IEnumerable&amp;lt;T&amp;gt; Many(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt; where);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The concrete implementation, using Entity Framework 6.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Data
    public class CustomerRepository: IRepository&amp;lt;Customer&amp;gt;
    {
        CompanyDbContext _context = new CompanyDbContext();
        Customer Single(Expression&amp;lt;Func&amp;lt;Customer, bool&amp;gt; where)
        {
            return _context.Customers.SingleOrDefault(where);   
        }
        IEnumerable&amp;lt;Customer&amp;gt; Many(Expression&amp;lt;Func&amp;lt;Customer, bool&amp;gt; where)
        {
            return _context.Customers.Where(where);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The concrete customer service with the repository interface injected.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Services
{
    public class CustomerService: ICustomerService
    {
        IRepository&amp;lt;Customer&amp;gt; _customerRepository;
        
        public CustomerService(IRepository&amp;lt;Customer&amp;gt; customerRepository)
        {
            _customerRepository = customerRepository
        }
        
        public Customer GetCustomer(int id)
        {
            return _customerRepository.Single(a =&amp;gt; a.CustomerId == id);
        }
        
        public List&amp;lt;Customers&amp;gt; GetCustomers(Expression&amp;lt;Func&amp;lt;Customer, bool&amp;gt;&amp;gt; where)
        {
            return _customerRepository.Many(where);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A unit test. (Note this is a lousy unit test because it's &amp;quot;testing&amp;quot; a data passthrough, but it illustrates the point.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using XUnit;
using NSubstitute;
using FluentAssertions;

namespace Company.Tests
{
    public class CustomerService_Should
    {
        [Fact]
        public void Return_one_customer()
        {
            int id = 1;
            Customer expected = new Customer() {CustomerId = 1;}
            var customerRepository = Substitute.For&amp;lt;IRepository&amp;lt;Customer&amp;gt;&amp;gt;();
            var customerService = new CustomerService(customerRepository);
            customerRepository.Single((a =&amp;gt; a.CustomerId == id).Returns(expected);
            var result = customerService.GetCustomer(id);
            result.Should().BeEquivalentTo(expected);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The namespaces indicate where in the&lt;a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/"&gt; Onion Architecture&lt;/a&gt; the classes belong.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Core: &lt;code&gt;Customer&lt;/code&gt; represents a company customer. It has no behavior.&lt;/li&gt;
&lt;li&gt;Core: IRepository is our generic standard for getting data. By injecting this standard into services, we can swap out the database by simply implementing it in a new concrete repository.&lt;/li&gt;
&lt;li&gt;Core: ICustomerService is our contract for what a CustomerService should implement&lt;/li&gt;
&lt;li&gt;Data: CustomerRepository is the concrete instance that will return models from the database.&lt;/li&gt;
&lt;li&gt;Service: CustomerService is the concrete instance that returns models to the client.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; The flaw with the repository pattern is #2 and #4.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://i0.wp.com/jeffreypalermo.com/wp-content/uploads/2018/06/image257b0257d255b59255d.png?resize=366%2c259&amp;amp;ssl=1" alt="" /&gt;
Image Copyright Jeffrey Palermo&lt;/p&gt;
&lt;h2 id="implicit-architecture-rules"&gt;Implicit Architecture Rules&lt;/h2&gt;
&lt;p&gt;Implicit in the Onion architecture are these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Domain Models represent the way the organization really works.&lt;/li&gt;
&lt;li&gt;Domain Services return Domain Models. (e.g. CustomerService returns Customer)&lt;/li&gt;
&lt;li&gt;Data Services return Data Models (e.g. CustomerRepository returns...Customer, in this case)&lt;/li&gt;
&lt;li&gt;APIs return with View Models (MVC Controllers, WebApi return something like CustomerMaintModel)&lt;/li&gt;
&lt;li&gt;UIs work with View Models&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a loosely coupled architecture. By using interfaces, it's also highly testable.&lt;/p&gt;
&lt;p&gt;So, what's wrong with it?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The repository expects to return a domain model from the database. And that's not how most databases, especially legacy databases, are designed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's make sure this is really clear, because it's the flaw in every example I've seen of this architecture. Here's how the domain and database stay loosely coupled.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The domain models represent how the organization sees information.&lt;/li&gt;
&lt;li&gt;The database models represent how the data is stored.&lt;/li&gt;
&lt;li&gt;The domain should have no knowledge of the database.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The mistake I've seen is that organizations' repositories return their &lt;em&gt;data models&lt;/em&gt;, not domain models. They then rely on the service to map to the domain models. This means the repositories are tightly coupled to the data model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this light, look at the classic example again. The repository returns a Customer object. Customer is a &lt;em&gt;domain&lt;/em&gt; model. This means that, if the database tables aren't one-to-one matches to the domain models, we have two choices in mapping the table model to the domain model.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use IRepository&lt;CustFile&gt; and have the CustomerService do the mapping. For instance, the &lt;code&gt;List&amp;lt;Customer&amp;gt; GetCustomers()&lt;/code&gt; method would get the data from the CustFileRepository and populate a Customer list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is how I've seen most organizations try to do it. But we've tightly coupled our data model to our domain's IRepository. The data model is now part of the domain model. If we wanted to swap out the database, &lt;em&gt;it would have to have a CustFile table&lt;/em&gt;. If it doesn't, we're rewriting the repositories and injecting new interfaces into the services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use IRepository&lt;Customer&gt; and have the CustomerRepository do the mapping. For instance, the &lt;code&gt;IEnumerable&amp;lt;Customer&amp;gt; Many()&lt;/code&gt; method would get the data using a data model such as CustFile and populate a Customer list. There's no guarantee CustFile has the same properties as Customer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This would be &amp;quot;more right&amp;quot; since there'd be loose coupling to the data. We could supposedly swap out the database. But as you'll see it won't work the way you think, and becomes an unnecessary layer of abstraction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's try doing the second way. But let's use a more real-world scenario.&lt;/p&gt;
&lt;p&gt;The customer data is stored in two Microsoft SQL Server tables that were created over the course of ten years. The extended table was used to handle new columns for the original table. Note the different primary key names and storing name information in a weird way. Also, there's no foreign key for the one-to-zero-one relationship.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;CustFile
=========
CustId   int PK
FullName varchar(100)

CustFileExtended
===============
CustomerNumber int PK
Zip5           int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need data models specific to these tables.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Data.DataModels
{
    public class CustFile
    {
        public int CustId { get; set; }
        public string FullName { get; set; }
    }
    
    public class CustFileExtended
    {
        public int CustNumber { get; set; }
        public int Zip5 { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To keep the example clear, we'll use an explicit ICustomerRepository. Remember, in order to be loosely coupled, this repository returns a Customer domain model.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If it returned CustFile and CustFileExtended models, then those data models would have to be part of the Domain. And &lt;em&gt;that&lt;/em&gt; would tightly couple the abstract domain model to the concrete data model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Domain.DataInterfaces
{
    public interface ICustomerRepository
    {
        // Create
        Customer Create(Customer entity);

        // Retrieve
        Customer RetrieveSingle(int id);
        IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany();
        IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany(Expression&amp;lt;Func&amp;lt;Customer, bool&amp;gt;&amp;gt; where);

        // Update
        Customer Update(Customer entity);

        // Delete
        void Delete(int id);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the use of Expression. That's coupling to Queryables, which are provider-dependent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we'll try to implement the repository using Entity Framework. To make the problem clear, we'll only look at the RetrieveMany methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Data
{
    public class CustomerRepository : ICustomerRepository
    {
        private CompanyDbContext _context;
        public CustomerRepository(CompanyDbContext context)
        {
            _context = context;
        }
        
        public IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany()
        {
            // Now what?
        }
        
        public IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany(Expression&amp;lt;Func&amp;lt;Customer, bool&amp;gt;&amp;gt; where)
        {
            // Now what?
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll assume we can mock the context somehow. But this is where things go awry.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many organizations end up adding IRepository and IUnitOfWork to DbSet and DbContext. Patterns on top of patterns. Abstractions on top of abstractions!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How do we return a collection of Customers? Remember, we're getting the data from two different tables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; The calls to the database have no knowledge of what a Customer is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany()
{
    List&amp;lt;Customer&amp;gt; customers = new List&amp;lt;Customer&amp;gt;();
    
    // there's no filtering, so get all records. That's right. ALL OF THEM.
    var custFiles = _context.CustFiles.ToList();
    int[] ids = custFiles.Select(a =&amp;gt; a.CustId).ToArray();
    var custFileExtendeds = _context.CustFileExtendeds.Where(a =&amp;gt; ids.Contains(a.CustNumber)).ToList();
    
    customers = custFiles.Select(a =&amp;gt; new Customer()
    {
       CustomerId = a.CustId,
       Name = a.FullName,
       ZipCode = custFileExtendeds.SingleOrDefault(b =&amp;gt; b.CustNumber == a.CustId)?.Zip5
    });
    
    return customers;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We're using a generic repository pattern, which is typically going to include a method such as above because sometimes we &lt;em&gt;do&lt;/em&gt; want all the records. But not if there are a hundred million. OK, let's try filtering.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany(Expression&amp;lt;Func&amp;lt;Customer, bool&amp;gt;&amp;gt; where)
{
    List&amp;lt;Customer&amp;gt; customers = new List&amp;lt;Customer&amp;gt;();
    
    // And...now what?
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a filter expression that can be examined for its properties and conditions. So at first it &lt;em&gt;seems&lt;/em&gt; like all we have to do is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extract the Customer properties&lt;/li&gt;
&lt;li&gt;Map them to the CustFile and CustFileExtended properties&lt;/li&gt;
&lt;li&gt;Pull out the boolean conditions&lt;/li&gt;
&lt;li&gt;Create Expressions from the properties and conditions and apply the filters to the appropriate CustFile or CustFileExtended DbSets.&lt;/li&gt;
&lt;li&gt;Build and return the Customer list.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's...actually, a lot of work. And wait...that's not complete, is it? There could be a few more steps after 4.&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;Programmatically handle a CustFile property that's filtering based on a CustFileExtended property. E.g. &lt;code&gt;Customer.Discount == Customer.MaxDiscount&lt;/code&gt;. Except in the database it's CustFile.Discount and CustFileExtended.MaxDiscount. How's that going to work?&lt;/li&gt;
&lt;li&gt;Programmatically handle nested conditions that go across table properties. Good luck to you.&lt;/li&gt;
&lt;li&gt;Hope to heck a Customer property being filtered on isn't made up of two properties from two different tables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and so on until...&lt;/p&gt;
&lt;ol start="99"&gt;
&lt;li&gt;Build and return the Customer list and pray it's right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, so maybe we need custom repository interfaces for each domain model. Then we can make the client supply known filters like customer ids, get our initial datasets down to a managable size, then filter on the domain model.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;//No need for an Expression since List&amp;lt;Customer&amp;gt; is generic.
public IEnumerable&amp;lt;Customer&amp;gt; RetrieveMany(int zipCode, Func&amp;lt;Customer, bool&amp;gt; where)
{
    List&amp;lt;Customer&amp;gt; customers = new List&amp;lt;Customer&amp;gt;();
    var custFileExtendeds = _context.CustFileExtendeds.Where(a =&amp;gt; a.Zip5 == zipCode).ToList();
    //Build the customer list and add the filter at the end.
    return custFileExtendeds.Select(a =&amp;gt; new Customer()
    {
       CustomerId = a.CustNumber,
       ZipCode = a.Zip5,
       Name = _context.CustFiles.Single(a =&amp;gt; a.CustId == a.CustNumber).FullName
    }).Where(where);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the Service method would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public List&amp;lt;Customer&amp;gt; GetCustomers(int zipCode, Func&amp;lt;Customer, bool&amp;gt; where)
{
    return _customerRepository.RetrieveMany(zipCode, where);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seeing that service method, you're hopefully asking some important questions. Like...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if my domain model was being populated by data from multiple databases and maybe a web service?&lt;/p&gt;
&lt;p&gt;What's the repository pattern gaining me?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-unnecessary-abstraction"&gt;The Unnecessary Abstraction&lt;/h2&gt;
&lt;p&gt;We've discovered a few things about having separate domain and data models.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No matter what, we need to map data models to domain models.&lt;/li&gt;
&lt;li&gt;We can't have fully flexible filtering.&lt;/li&gt;
&lt;li&gt;The mapping problems using IRepository&lt;Customer&gt; methods are the same as with CustomerService methods. Specifically, the methods need to restrict the data that will come from the database in order for performance to be good.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There's one other requirement: whatever data sources are injected into CustomerService need to be mockable.&lt;/p&gt;
&lt;p&gt;Whenever you see a passthrough query such as shown above in CustomerService.GetCustomers, it's worth asking, &amp;quot;Can I cut out the middleman?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer here is &amp;quot;Yes.&amp;quot; The repository is just getting in the way. We know the concrete CustomerService will depend on concrete data. The repository is just an abstraction of that data so we can unit test. We've already determined that if we want to swap out the database, we're going to be rewriting something. Why add to our troubles by essentially &lt;em&gt;writing our CustomerService methods twice&lt;/em&gt;?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt; Inject the mockable data source directly into the service&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the data source uses an interface, great. If there are multiple data sources, do whatever it takes to make them mockable. But don't use a repository abstraction. It just adds complexity for no gain.&lt;/p&gt;
&lt;h2 id="cutting-out-the-middleman"&gt;Cutting Out the Middleman&lt;/h2&gt;
&lt;p&gt;Here's how our CustomerService example looks with the repository removed, organized by onion layers. These could be different assemblies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Domain&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Domain.DomainModels
{
    public class Customer
    {
        public int CustomerId { get; set; }
        public string Name { get; set; }
        public int ZipCode { get; set; }

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Domain.ServiceInterfaces
{
    public interface ICustomerService
    {
        //Create
        Customer Create(Customer customer);

        //Retrieve
        Customer RetrieveSingleById(int id);
        Customer RetrieveSingleByName(string name);
        List&amp;lt;Customer&amp;gt; RetrieveManyByIds(int[] ids);
        List&amp;lt;Customer&amp;gt; RetrieveManyByPartialName(string partialName);
        List&amp;lt;Customer&amp;gt; RetrieveManyByZipCode(int zipCode, Func&amp;lt;Customer, bool&amp;gt; where);

        //Update
        Customer Update(Customer customer);

        //Delete
        void Delete(int id);

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Data.DataModels
{
    public class CustFile
    {
        public int CustId { get; set; }
        public string FullName { get; set; }
    }
    
    public class CustFileExtended
    {
        public int CustNumber { get; set; }
        public int Zip5 { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Data.SqlDatabase
{
    public class SqlDbContext : DbContext
    {
        public IDbSet&amp;lt;CustFile&amp;gt; CustFiles { get; set; }
        public IDbSet&amp;lt;CustFileExtended&amp;gt; CustFileExtendeds {get;set;}

        public SqlDbContext(string nameOrConnectionString) : base(nameOrConnectionString) { }
        
        //This constructor is used by Effort in unit testing
        public SqlDbContext(DbConnection existingConnection) : base(existingConnection, true) { }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity&amp;lt;CustFile&amp;gt;()
                .HasKey(a =&amp;gt; a.CustId);

            modelBuilder.Entity&amp;lt;CustFileExtended&amp;gt;()
                .HasKey(a =&amp;gt; a.CustNumber);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is only showing one method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Company.Services
{
    public class CustomerService : ICustomerService
    {
        SqlDbContext _context = new EF6Context(&amp;quot;SqlDb&amp;quot;);

        public CustomerService(SqlDbContext context)
        {
            _context = context;
        }

        public List&amp;lt;Customer&amp;gt; RetrieveManyByZipCode(int zipCode, Func&amp;lt;Customer, bool&amp;gt; where)
        {
            var custFileExtendeds = _context.CustFileExtendeds.Where(a =&amp;gt; a.Zip5 == zipCode).ToList();
            return GetCustomers(custFileExtendeds)
                .Where(where).ToList();
        }
        
        // Helpers for mapping
        private List&amp;lt;Customer&amp;gt; GetCustomers(List&amp;lt;CustFile&amp;gt; custFiles)
        {
            List&amp;lt;Customer&amp;gt; customers = new List&amp;lt;Customer&amp;gt;();
            var custFileExtendeds = _context.CustFileExtendeds
                .Where(a =&amp;gt; customers.Select(b =&amp;gt; b.CustomerId).ToList().Contains(a.CustNumber)).ToList();

            customers.AddRange(custFiles.Select(a =&amp;gt;
            {
                var custFileExtended = custFileExtendeds.Single(b =&amp;gt; b.CustNumber == a.CustId);
                return new Customer()
                {
                    CustomerId = a.CustId,
                    Name = a.FullName,
                    ZipCode = custFileExtended.Zip5
                };
            }));

            return customers;
        }

        private List&amp;lt;Customer&amp;gt; GetCustomers(List&amp;lt;CustFileExtended&amp;gt; custFileExtendeds)
        {
            int[] ids = custFileExtendeds.Select(a =&amp;gt; a.CustNumber).ToArray();
            var custFiles = _context.CustFiles.Where(a =&amp;gt; ids.Contains(a.CustId)).ToList();
            return GetCustomers(custFiles);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are various ways to mock Entity Framework. I like &lt;a href="https://entityframework-effort.net/overview"&gt;Effort&lt;/a&gt; because you don't need to add interfaces to your DbContext, you just need a particular constructor.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;//other usings above, these are the testing dependencies
using Company.Data;
using Company.Data.DataModels;
using Company.Domain.DomainModels;
using Company.Domain.ServiceInterfaces;
using Company.Services;
using Xunit;
using Effort;
using FluentAssertions;

namespace DealingWithData.Tests
{
    public class CustomerService_Should
    {
        SqlDbContext _context;
        ICustomerService _customerService;

        public CustomerService_Should()
        {
            //This is what makes Effort the in-memory database
            _context = new SqlDbContext(DbConnectionFactory.CreateTransient());
            _customerService = new CustomerService(_context);
        }

        ~CustomerService_Should() 
        {
            _context.Dispose();
        }

        [Fact]
        public void Return_a_single_customer_by_id()
        {
            // arrange
            Customer expected = new Customer()
            {
                CustomerId = 1,
                Name = &amp;quot;Herbert&amp;quot;,
                ZipCode = 12345
            };
            // mock the data the service works with
            _context.CustFiles.Add(new CustFile() { CustId = 1, FullName = &amp;quot;Herbert&amp;quot; });
            _context.CustFileExtendeds.Add(new CustFileExtended() { CustNumber = 1, Zip5 = 12345 });
            _context.SaveChanges();

            // act
            var actual = _customerService.RetrieveSingleById(expected.CustomerId);

            // assert
            actual.Should().BeEquivalentTo(expected);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If...when...we have changes in our data sources, we'll have to update the service and the unit tests. That's OK. Before, we'd have been updating repositories and unit tests. This removes the repository pattern dead weight.&lt;/p&gt;
&lt;h2 id="your-data-sources-will-change"&gt;Your Data Sources Will Change...&lt;/h2&gt;
&lt;p&gt;Sometimes radically. Your domain model will change, too, but it shouldn't be driven by the backend data. You should be able to code and unit test without &lt;em&gt;any&lt;/em&gt; concrete dependencies, and it shouldn't be painful.&lt;/p&gt;
&lt;p&gt;Do you really need the Repository pattern? Probably not.&lt;/p&gt;
</description>
      <pubDate>Thu, 13 Feb 2020 15:11:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/why_the_repository_pattern_fails_for_legacy_database_like_yours_and_wh</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/why_the_repository_pattern_fails_for_legacy_database_like_yours_and_wh</guid>
    </item>
    <item>
      <title>Mock returning a List as IMongoQueryable for unit testing</title>
      <description>&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The latest MongoDb driver for .Net doesn't have a way to convert a collection such as List&lt;T&gt; to IMongoQueryable. If the code depends on that interface, it needs to be mocked, but how to set the concrete data?&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The Solution&lt;/h2&gt;
&lt;p&gt;What you'll need to run this sample yourself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/MongoDB.Driver/"&gt;MongoDb.Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/NSubstitute/"&gt;NSubstitute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/xunit/"&gt;xunit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/xunit.runner.visualstudio/"&gt;xunit.runner.visualstudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's say you've settled on using MongoDb as your NoSQL data store. You write a simple repository pattern with one method to query for any concrete type.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;	public interface IMongoRepository&amp;lt;T&amp;gt; where T : class
	{
		public IMongoQueryable&amp;lt;T&amp;gt; QueryAll();
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also have a simple Customer service that calls the repository&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CustomerService
{
	IMongoRepository&amp;lt;Customer&amp;gt; _customerRepository = null;
	public CustomerService(IMongoRepository&amp;lt;Customer&amp;gt; customerRepository)
	{
		_customerRepository = customerRepository;
	}

	public List&amp;lt;Customer&amp;gt; GetCustomers()
	{
		return _customerRepository.QueryAll().ToList();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you start writing the following test. But you discover there's no way to get a concrete instance of IMongQueryable&lt;T&gt;. There used to be, but it's legacy code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CustomerService_Should
{
	[Fact]
	public void Return_customers()
	{
		var expected = new List&amp;lt;Customer&amp;gt;() { new Customer() { Id = 1 } };
		var customerRepository = Substitute.For&amp;lt;IMongoRepository&amp;lt;Customer&amp;gt;&amp;gt;();
		
		//return the mocked data. But how to convert the list into IMongoQueryable???

		customerRepository.QueryAll().Returns([argh, what goes here??]);
		var service = new CustomerService(customerRepository);
		var actual = service.GetCustomers();
		Assert.Equal(expected.Count, actual.Count);
		Assert.Equal(expected.First().Id, actual.First().Id);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like me, you probably try all kinds of typecasting before realizing you're always trying to do something impossible. Finally, you find the answer on Stack Overflow. There are two ways to mock up the data, and both make the IMongoQueryable class accept IQueryable.&lt;/p&gt;
&lt;h2 id="using-nsubstitute"&gt;Using NSubstitute&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CustomerService_Should
{
	[Fact]
	public void Return_customers()
	{
		var expected = new List&amp;lt;Customer&amp;gt;() { new Customer() { Id = 1 } };
		var customerRepository = Substitute.For&amp;lt;IMongoRepository&amp;lt;Customer&amp;gt;&amp;gt;();
		
		//Mock IMongoQueryable to accept IQueryable, enabling just enough of the interface
		//to work
		var expectedQueryable = expected.AsQueryable();
		var mockQueryable = Substitute.For&amp;lt;IMongoQueryable&amp;lt;Customer&amp;gt;&amp;gt;();
		mockQueryable.ElementType.Returns(expectedQueryable.ElementType);
		mockQueryable.Expression.Returns(expectedQueryable.Expression);
		mockQueryable.Provider.Returns(expectedQueryable.Provider);
		mockQueryable.GetEnumerator().Returns(expectedQueryable.GetEnumerator());

		//return the mocked data
		customerRepository.QueryAll().Returns(mockQueryable);
		var service = new CustomerService(customerRepository);
		var actual = service.GetCustomers();
		Assert.Equal(expected.Count, actual.Count);
		Assert.Equal(expected.First().Id, actual.First().Id);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty slick.&lt;/p&gt;
&lt;h2 id="creating-mongoqueryable"&gt;Creating MongoQueryable&lt;T&gt;&lt;/h2&gt;
&lt;p&gt;A simple concrete class that allows setting a List property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MongoQueryable&amp;lt;T&amp;gt; : IMongoQueryable&amp;lt;T&amp;gt;
{
	public List&amp;lt;T&amp;gt; MockData { get; set; }

	public Type ElementType =&amp;gt; MockData.AsQueryable().ElementType;

	public Expression Expression =&amp;gt; MockData.AsQueryable().Expression;

	public IQueryProvider Provider =&amp;gt; MockData.AsQueryable().Provider;

	public IEnumerator&amp;lt;T&amp;gt; GetEnumerator() =&amp;gt; MockData.AsQueryable().GetEnumerator();
	IEnumerator IEnumerable.GetEnumerator() =&amp;gt; MockData.AsQueryable().GetEnumerator();

	public QueryableExecutionModel GetExecutionModel() =&amp;gt; throw new NotImplementedException();

	public IAsyncCursor&amp;lt;T&amp;gt; ToCursor(CancellationToken cancellationToken = default) =&amp;gt; throw new NotImplementedException();

	public Task&amp;lt;IAsyncCursor&amp;lt;T&amp;gt;&amp;gt; ToCursorAsync(CancellationToken cancellationToken = default) =&amp;gt; throw new NotImplementedException();

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public void Return_customers2()
{
	var expected = new List&amp;lt;Customer&amp;gt;() { new Customer() { Id = 1 } };
	var customerRepository = Substitute.For&amp;lt;IMongoRepository&amp;lt;Customer&amp;gt;&amp;gt;();

	//Mock IMongoQueryable using a class
	var mockQueryable = new MongoQueryable&amp;lt;Customer&amp;gt;();
	mockQueryable.MockData = expected;

	//return the mocked data
	customerRepository.QueryAll().Returns(mockQueryable);
	var service = new CustomerService(customerRepository);
	var actual = service.GetCustomers();
	Assert.Equal(expected.Count, actual.Count);
	Assert.Equal(expected.First().Id, actual.First().Id);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/46035390/unit-testing-with-imongoqueryable"&gt;c# - Unit Testing with IMongoQueryable - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The comments in Stack Overflow point out that using IMongoQueryable--or IQueryable-- isn't ideal because it tightly couples the code to MongoDb or to a Queryable backend. It might be better to use a truly generic repository and convert to/from MongoDb (or other database) as needed.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 28 Jan 2020 17:29:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/mock_returning_a_list_as_imongoqueryable_for_unit_testing</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/mock_returning_a_list_as_imongoqueryable_for_unit_testing</guid>
    </item>
  </channel>
</rss>