<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Introducing NUtCasE - A New Case for Coding</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/introducing_nutcase_-_a_new_case_for_coding/images/nutcase-logo.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;As James Brown and Aretha Franklin are the royalty of soul, PascalCase and camelCase have reigned&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; over semantic coding style for decades. However, both suffer from several problems, including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comprehensability&lt;/li&gt;
&lt;li&gt;Clarity&lt;/li&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and, in my view, their biggest failure: SIMPLICITY (which equally irritatingly doesn't start with &amp;quot;C&amp;quot;).&lt;/p&gt;
&lt;p&gt;It's time for a new claiment to the throne. An approach that rewards higher virtues. Virtues such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creativity&lt;/li&gt;
&lt;li&gt;Courage&lt;/li&gt;
&lt;li&gt;Contrariness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and, in my view, its Diana Ross-level supreme value: CONFUSION (note the completion of &amp;quot;C&amp;quot;s)&lt;/p&gt;
&lt;p&gt;Coding doesn't attract nearly enough professionals, and is abysmally populated by arrogant, infantile, over-the-hill, white males like me. We need new blood! Fresh brains! Uncooked appendages! I firmly believe a tidal wave of NUtCasErs is on the software oceanic horizon.&lt;/p&gt;
&lt;p&gt;To get started with NUtCasE, just follow these six utterly straightforward rules.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Any casing is allowed as long as it doesn't conflict with other rules.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ranOSBoBSOnar()&lt;/code&gt;&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All names begin with a capital letter unless it’s the letter that begins your residential state’s capital.&lt;a id="fnref:9" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ranOSBoBSOnar()&lt;/code&gt;&lt;a id="fnref:4" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Methods and constants begin capitalized if an odd numbered letter, lower case if even numbered.&lt;a id="fnref:10" href="#fn:5" class="footnote-ref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ranOSBoBSOnar()&lt;/code&gt;&lt;a id="fnref:5" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The third letter is always lower case, except on Tuesdays.&lt;a id="fnref:11" href="#fn:6" class="footnote-ref"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ranOSBoBSOnar()&lt;/code&gt;&lt;a id="fnref:6" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a name has exactly two Bs, those Bs are always capitalized in honor of Buckaroo Banzai.&lt;a id="fnref:12" href="#fn:7" class="footnote-ref"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ranOSBoBSOnar()&lt;/code&gt;&lt;a id="fnref:7" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Palindromes must mirror case while matching as many rules as possible. If an in-use palindrome can match more rules, the name must change everywhere it occurs on Earth.&lt;a id="fnref:13" href="#fn:8" class="footnote-ref"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ranOSBoBSOnar()&lt;/code&gt;&lt;a id="fnref:8" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A NUtCasE linter is not in the works, but if anyone wants to develop one that'd be great.&lt;/p&gt;
&lt;p&gt;Together, we can bring joy and &lt;del&gt;in&lt;/del&gt;sanity back to coding.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;NUtCasE: Embrace the inevitable confusion&lt;/strong&gt;&lt;/em&gt;&lt;a id="fnref:14" href="#fn:9" class="footnote-ref"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Not to be confused with &lt;a href="https://en.wikipedia.org/wiki/Rein"&gt;rein&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Rain"&gt;rain&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Rayne,_Essex"&gt;Rayne&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Rane_(band)"&gt;Rane&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/William_MacLeod_Raine"&gt;Raine&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Raein"&gt;Raein&lt;/a&gt;.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Inspired by &lt;a href="https://en.wikipedia.org/wiki/Three_Laws_of_Robotics"&gt;Asimov's Three Laws of Robotics&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;That's &amp;quot;Ran OS BOB&lt;a id="fnref:15" href="#fn:10" class="footnote-ref"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; SONAR&amp;quot;, in the extremely unlikely case it isn't perfectly clear.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:5" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:6" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:7" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:8" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;I live in Denver, Colorado.&lt;a href="#fnref:9" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;No reference.&lt;a href="#fnref:10" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Inspired by the game of &lt;a href="https://en.wikipedia.org/wiki/List_of_games_in_Star_Trek#Fizzbin"&gt;Fizzbin&lt;/a&gt;.&lt;a href="#fnref:11" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;The great humanitarian musician hero surgeon &lt;a href="https://en.wikipedia.org/wiki/The_Adventures_of_Buckaroo_Banzai_Across_the_8th_Dimension"&gt;Buckaroo Banzai&lt;/a&gt;, who clearly was inspired in his youth by the great humanitarian adventurer hero surgeon &lt;a href="https://en.wikipedia.org/wiki/Doc_Savage"&gt;Doc Savage&lt;/a&gt;. Remember, no matter where you go...there you are.&lt;a href="#fnref:12" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;I've never understood why &amp;quot;palindrome&amp;quot; isn't, itself, a palindrome. &lt;a href="https://en.wikipedia.org/wiki/Palindrome"&gt;Palindrome&lt;/a&gt;.&lt;a href="#fnref:13" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:9"&gt;
&lt;p&gt;Inspired by Kelly Grovier, from an article about Raphael's &amp;quot;The School of Athens.&amp;quot; &lt;a href="https://www.bbc.com/culture/article/20200910-the-school-of-athens-a-detail-hidden-in-a-masterpiece?xtor=ES-213-%5BBBC%20Features%20Newsletter%5D-2020September18-%5BCulture%7c+Button%5D"&gt;The School of Athens: A detail hidden in a masterpiece&lt;/a&gt;&lt;a href="#fnref:14" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:10"&gt;
&lt;p&gt;OS BOB&lt;a id="fnref:16" href="#fn:11" class="footnote-ref"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; was a famously little-known operating system created in the 1970s for the sport of underwater badminton.&lt;a href="#fnref:15" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:11"&gt;
&lt;p&gt;BOB stands for Brigadiers of Badminton.&lt;a href="#fnref:16" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sat, 17 Oct 2020 11:10:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/introducing_nutcase_-_a_new_case_for_coding</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/introducing_nutcase_-_a_new_case_for_coding</guid>
    </item>
    <item>
      <title>One Sheet Summary: Getting Things Done</title>
      <description>&lt;p&gt;I make these to post on my wall and help me learn the subject. Be sure to read the book!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/well-being"&gt;All One Sheet Summaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity-ebook/dp/B00KWG9M2E"&gt;Buy the book on Amazon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summary-_getting_things_done/images/gtd.pdf"&gt;Download the PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/one_sheet_summary-_getting_things_done/images/gtd.svg" alt="" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summary-_getting_things_done/images/gtd-next-action-flow.pdf"&gt;Download the PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/one_sheet_summary-_getting_things_done/images/gtd-next-action-flow.svg" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Oct 2020 11:29:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/one_sheet_summary-_getting_things_done</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/one_sheet_summary-_getting_things_done</guid>
    </item>
    <item>
      <title>One Sheet Summary: "Accelerate: The Science of Lean Software and DevOps"</title>
      <description>&lt;p&gt;I make these to post on my wall and help me learn the subject. Be sure to read the book!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/well-being"&gt;All One Sheet Summaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM"&gt;Buy the book on Amazon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summary-_accelerate-_the_science_of_lean_software_and_devop/images/accelerate.pdf"&gt;Download the PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/one_sheet_summary-_accelerate-_the_science_of_lean_software_and_devop/images/accelerate.svg" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Oct 2020 18:15:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/one_sheet_summary-_accelerate-_the_science_of_lean_software_and_devop</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/one_sheet_summary-_accelerate-_the_science_of_lean_software_and_devop</guid>
    </item>
    <item>
      <title>Five (so far) Dynamics of Group Problem Solving</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/monopoly.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h1 id="how-are-your-problems-being-solved"&gt;HOW ARE YOUR PROBLEMS BEING SOLVED?&lt;/h1&gt;
&lt;h2 id="this-post-is"&gt;This Post Is&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;My (relatively educated) opinions&lt;/li&gt;
&lt;li&gt;To get you (and me!) thinking&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/lee-van-cleef.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="do-this"&gt;1. &amp;quot;Do this!&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Often (upper) management or overbearing personalities&lt;/li&gt;
&lt;li&gt;Driven by &amp;quot;I'm supposed to &lt;em&gt;decide&lt;/em&gt;.&amp;quot; and &amp;quot;my first thought is the right answer.&amp;quot;&lt;/li&gt;
&lt;li&gt;Can be important in urgent or gridlock situations.&lt;/li&gt;
&lt;li&gt;BUT, mustn't become the go-to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="background-color:yellow;"&gt;Mitigation: &amp;quot;We're providing an update, but we're open to ideas.&amp;quot;&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/right-wrong-way.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="there-are-two-ways"&gt;2. &amp;quot;There are two ways...&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Often team leads or developers not directly responsible for the outcome&lt;/li&gt;
&lt;li&gt;Simplistic to get quick buy-in&lt;/li&gt;
&lt;li&gt;Driven by &amp;quot;I'm supposed to &lt;em&gt;know&lt;/em&gt;&amp;quot; and maintaining status quo&lt;/li&gt;
&lt;li&gt;Stops exploration and can shortcut testing&lt;/li&gt;
&lt;li&gt;Flatt's Law #12: &amp;quot;There are usually many right ways to do something, and always infinite wrong ways.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="background-color:yellow;"&gt;Mitigation: &amp;quot;We'll start with those, and review with you if we come across alternatives.&amp;quot;&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/sherlock.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="ive-already-thought-oftried-that"&gt;3. &amp;quot;I’ve already thought of/tried that.&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Often a senior developer&lt;/li&gt;
&lt;li&gt;Stops conversation&lt;/li&gt;
&lt;li&gt;Pits the &amp;quot;expert&amp;quot; against colleagues&lt;/li&gt;
&lt;li&gt;Leads to gridlock and win-lose thinking&lt;/li&gt;
&lt;li&gt;Can be ego/image-driven&lt;/li&gt;
&lt;li&gt;BUT, can also be true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="background-color:yellow;"&gt;Mitigation: &amp;quot;Can we look at your steps/tests/code? We want to perform due dilligence.&amp;quot; &lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/corn-maze-aerial.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="weve-already-thought-oftried-that"&gt;4. &amp;quot;We've already thought of/tried that.&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can hide a decision actually made via 1-3.&lt;/li&gt;
&lt;li&gt;Can be clique-driven&lt;/li&gt;
&lt;li&gt;BUT, is usually true (i.e., &amp;quot;we're really in agreement&amp;quot;)&lt;/li&gt;
&lt;li&gt;BUT, still potentially stops exploration&lt;/li&gt;
&lt;li&gt;Can be valuable when presenting to management&lt;/li&gt;
&lt;li&gt;BUT, requires trust. Can be a cudgel, &amp;quot;you don't really understand what we do.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="background-color:yellow;"&gt;Mitigation: &amp;quot;I'd like to understand better. Who can step me through what you've done?&amp;quot;&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/160129-elderlyexercise-stock.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="this-is-where-we-are-right-now"&gt;5. &amp;quot;This is where we are right now.&amp;quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can be used by anyone at any time&lt;/li&gt;
&lt;li&gt;Growth mindset&lt;/li&gt;
&lt;li&gt;Psychologically safe&lt;/li&gt;
&lt;li&gt;&amp;quot;What's been tried? What can we try?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;What's the real problem we should be solving?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;How urgent is it &lt;em&gt;really&lt;/em&gt;?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/wallendas.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="in-general"&gt;In General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast vs Slow thinking: slower is better for solving problems&lt;/li&gt;
&lt;li&gt;Measures of Success: quality is usually better than speed&lt;/li&gt;
&lt;li&gt;Habits: Encourage asking questions as the path to solutions.&lt;/li&gt;
&lt;li&gt;Fixed vs Growth Mindset: start from &amp;quot;I don't have to know right now.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving/images/library.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="more-reading"&gt;More Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Kahneman: &lt;em&gt;Thinking, Fast and Slow&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/"&gt;https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google: &lt;em&gt;The five keys to a successful Google team&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-team/"&gt;https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-team/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wendy Wood: &lt;em&gt;Good Habits, Bad Habits&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://www.amazon.com/Good-Habits-Bad-Science-Positive/dp/1250159075"&gt;https://www.amazon.com/Good-Habits-Bad-Science-Positive/dp/1250159075&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carol Dweck: Fixed vs Growth Mindsets (&lt;em&gt;caveat: research not replicated&lt;/em&gt;)&lt;br /&gt;
&lt;a href="https://en.wikipedia.org/wiki/Carol_Dweck"&gt;https://en.wikipedia.org/wiki/Carol_Dweck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 5 Oct 2020 15:55:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/five_(so_far)_dynamics_of_group_problem_solving</guid>
    </item>
    <item>
      <title>Domain-Driven Design - An Opinionated Layers Graphic</title>
      <description>&lt;p&gt;The DDD implementations I've seen in tutorials tend to leave out a couple of things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Applications get domain information two different ways. Javascript frameworks call  WebApis. But desktop apps can use the domain services directly, avoiding the performance waste of an extra call. Think of the WebApi as a passthrough (façade) to the domain service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Domain models &amp;lt;&amp;gt; Data models. The domain layer--critically--takes care of mapping data to domain. Consider that your domain models may be populated from multiple data sources, or multiple tables from a single database . . . or both.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/domain-driven_design_-_opinionated_layers_graphic/images/Loosely-Coupled%20Domain-Driven%20Design%20Architecture.pdf"&gt;Loosely-Coupled Domain-Driven Design Architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/domain-driven_design_-_opinionated_layers_graphic/images/Loosely-Coupled%20Domain-Driven%20Design%20Architecture.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 23 Aug 2020 22:47:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/domain-driven_design_-_opinionated_layers_graphic</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/domain-driven_design_-_opinionated_layers_graphic</guid>
    </item>
    <item>
      <title>.Net Framework NuGet Packages - Solving Assembly Redirection From Package vs Assembly Versioning, Dependency Resolution, and Strong-Naming</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;  The information below applies specifically to .Net Framework applications. &lt;em&gt;Most&lt;/em&gt; of the information also applies to .Net Core and Standard applications as well. A future post will examine Core/Standard applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-intro"&gt;The Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-cause"&gt;The Cause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-solutions"&gt;The Solution(s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-glossary-a-few-rules-and-some-surprises"&gt;The Glossary, a Few Rules, and Some Surprises&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-four-versions"&gt;The Four Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strong-names"&gt;Strong Names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assembly-binding-redirects"&gt;Assembly Binding Redirects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-applications-are-more-susceptible"&gt;Web Applications Are More Susceptible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-are-potentially-dependent-assemblies-added-to-the-bin-folder"&gt;When Are Potentially Dependent Assemblies Added to the Bin Folder?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-proof"&gt;The Proof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-up"&gt;Wrap Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-intro"&gt;The Intro&lt;/h2&gt;
&lt;p&gt;If you develop and/or consume NuGet packages in solutions of reasonable complexity, you'll eventually come up against an assembly that doesn't load, giving this error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System.IO.FNeLoadException: 'Could not load file or assembly 'NewtonsoftJson, Version=9.0.0.0, Culture—neutral, PublicKeyToken=30ad4fe6b2a6aeed' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: Ox80131040)'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What causes this error? What can you do? What &lt;em&gt;should&lt;/em&gt; you do?&lt;/p&gt;
&lt;p&gt;This isn't a definitive reference, but it steps through a simple prototype app that reproduces the problem and shows paths forward.&lt;/p&gt;
&lt;h2 id="the-cause"&gt;The Cause&lt;/h2&gt;
&lt;p&gt;Fundamentally, during runtime your solution is trying to load two different &lt;em&gt;assembly&lt;/em&gt; versions at the same time.&lt;/p&gt;
&lt;p&gt;A Visual Studio solution can be made of multiple projects, each project can have dependencies on other projects as well as assemblies installed via NuGet. In a setting where teams share code, projects in a solution could &amp;quot;belong&amp;quot; to different teams, making it challenging to keep all package dependencies up-to-date and tested.&lt;/p&gt;
&lt;p&gt;Microsoft has a mechanism for helping resolve these dependencies: Assembly Binding Redirects. Essentially, information is added to the project's web.config or the &lt;em&gt;built&lt;/em&gt; app.config that says, &amp;quot;If the requested assembly version is within this range, load this specific assembly version.&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependentAssembly&amp;gt;
	&amp;lt;assemblyIdentity name=&amp;quot;PackageFTest&amp;quot; publicKeyToken=&amp;quot;80F6849EB416DBC5&amp;quot; culture=&amp;quot;neutral&amp;quot;/&amp;gt;
	&amp;lt;bindingRedirect oldVersion=&amp;quot;0.0.0.0-2.1.0.0&amp;quot; newVersion=&amp;quot;2.1.0.0&amp;quot;/&amp;gt;
&amp;lt;/dependentAssembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Binding redirects are used when the assembly is &lt;em&gt;strong-named&lt;/em&gt;. A strong-named assembly is uniquely identified by its name and assembly version using a key, which the consuming assembly knows about. The purpose of strong-naming is to mitigate malicious replacement of assemblies (i.e. dlls).&lt;/p&gt;
&lt;p&gt;In short, strong-naming &lt;em&gt;causes&lt;/em&gt; the &amp;quot;could not load assembly&amp;quot; error.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Strong-naming NuGet package assemblies forces the consuming assembly to load a specific version.&lt;/li&gt;
&lt;li&gt;The project you're building can only have one copy of the assembly in its bin folder.&lt;/li&gt;
&lt;li&gt;If two different versions of the assembly are required, binding redirection &lt;em&gt;may&lt;/em&gt; say &amp;quot;it's OK to load this other version.&amp;quot;&lt;/li&gt;
&lt;li&gt;But if that doesn't work, an error is thrown.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-solutions"&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;Strong-naming NuGet package assemblies is recommended for open source projects for the reason stated above: tamper mitigation. In .Net Core, Microsoft is moving toward strong-naming as a default. However, Core projects handle strongly-named dependencies differently than Framework. By default, they automatically resolve to use the latest assembly version.&lt;/p&gt;
&lt;p&gt;But for internal organization projects, strong-naming in Framework or Core projects may not be needed, which can save a lot of grief.&lt;/p&gt;
&lt;p&gt;The basic solutions are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Keep your solution package versions matching at all times.&lt;/strong&gt; This is the simplest solution, and arguably should be happening anyway as part of solution maintenance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove strong-naming from your NuGet package assemblies.&lt;/strong&gt; This is the simplest &lt;em&gt;preventative&lt;/em&gt; solution. &lt;em&gt;Note that you still need to be concerned with strongly-named packages your package consumes, e.g. NewtonsoftJson.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When strong-naming in Framework or Core, only change the &lt;em&gt;major&lt;/em&gt; assembly version when the package major version changes.&lt;/strong&gt; For example, package versions 2.1.3 and 2.54.7 would both keep the assembly version at 2.0.0. This is how NewtonsoftJson, and Microsoft, manage versioning, and it aligns with NuGet's preference for &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt;.
&lt;blockquote&gt;
&lt;p&gt;There should be no breaking changes except in major versions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-glossary-a-few-rules-and-some-surprises"&gt;The Glossary, a Few Rules, and Some Surprises&lt;/h2&gt;
&lt;h3 id="the-four-versions"&gt;The Four Versions&lt;/h3&gt;
&lt;h4 id="nuget-package-version"&gt;NuGet Package Version&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No effect on runtime behavior&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: Use Semantic Versioning (SemVer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="assembly-version"&gt;Assembly Version&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Affects runtime behavior, especially if using strong naming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: Only change the major version to match the package Version. Leave other numbers at 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="file-version"&gt;File Version&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No effect on runtime behavior&lt;/li&gt;
&lt;li&gt;Used by Windows&lt;/li&gt;
&lt;li&gt;Must have all four numbers filled in&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: Keep major.minor.patch in sync with package version, and revision = 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="informational-product-version"&gt;Informational (Product) Version&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Must be added manually to the AssemblyInfo.cs file (boo, hiss).&lt;/li&gt;
&lt;li&gt;No effect on runtime behavior&lt;/li&gt;
&lt;li&gt;String value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: Set to package version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How AssemblyInfo and NuSpec version maps to File Properties&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_21.png" alt="" /&gt;&lt;/p&gt;
&lt;h3 id="strong-names"&gt;Strong Names&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Purpose is to guarantee a unique identity for a version and reduce file tampering.&lt;/li&gt;
&lt;li&gt;Allows side-by-side loading, but practically-speaking on when installed to the GAC.&lt;/li&gt;
&lt;li&gt;No certificate, so no end date and not an authentication mechanism&lt;/li&gt;
&lt;li&gt;A strongly-named assembly cannot depend on a weakly-named assembly
&lt;ul&gt;
&lt;li&gt;It is possible to strongly-name a third-party assembly with your own strong-name key (snk)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Framework:
&lt;ul&gt;
&lt;li&gt;Strong naming enables &lt;em&gt;strict assembly loading&lt;/em&gt;, meaning .Net expects to only load the exact version.&lt;/li&gt;
&lt;li&gt;To make this work when dependency resolution chooses a different version, binding redirects are required.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Core, strict assembly loading isn't used. .Net will load the latest usable version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some reasons NOT to strong-name an assembly (taken from  &lt;a href="https://softwareengineering.stackexchange.com/a/240941"&gt;https://softwareengineering.stackexchange.com/a/240941&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Because &lt;strong&gt;strong-named assembly can only load other strong-name assemblies.&lt;/strong&gt; - a real problem if you rely on 3d party libs.&lt;/li&gt;
&lt;li&gt;When the assembly is strong-name it's requires to have the versions, so you can't use direct bindings between your projects in the same solution or you'll have to recompile the application to be able to use a different version.&lt;/li&gt;
&lt;li&gt;Apart from the obvious inconvenience, there's also some performance issues (not significant though) because of verification of the signature. (If you interested to know the performance issue in depth , read here &lt;a href="http://www.grimes.nildram.co.uk/workshops/secWSThree.htm"&gt;strong name by Richard Grimes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;P.S. &lt;a href="https://stackoverflow.com/questions/3975723/c-why-sign-an-assembly"&gt;C#: why sign an assembly?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="assembly-binding-redirects"&gt;Assembly Binding Redirects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Entries in project web.config and built app.config saying which assembly version to load&lt;/li&gt;
&lt;li&gt;In desktop--i.e. app.config--projects, if Project Properties &amp;gt; Application &amp;gt; Auto-generate binding redirects is check, redirects are automatically added to the assembly's output app.config when the project is &lt;em&gt;built&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Web--i.e. web.config--projects do &lt;em&gt;not&lt;/em&gt; have an Auto-generate binding redirects setting because the dependencies are always in the project's &lt;code&gt;bin&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Binding redirects can be updated using the NuGet PowerShell command &lt;code&gt;Add-BindingRedirect&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web-applications-are-more-susceptible"&gt;Web Applications Are More Susceptible&lt;/h3&gt;
&lt;p&gt;I don't know why, but I wasn't able to reproduce the binding problem using a console application. Maybe I never did it right (or wrong). However, web applications are more likely to have the problem because redirects are &lt;em&gt;not&lt;/em&gt; automatically generated.&lt;/p&gt;
&lt;p&gt;This was a surprise to me, and probably catches many developers.&lt;/p&gt;
&lt;h3 id="when-are-potentially-dependent-assemblies-added-to-the-bin-folder"&gt;When Are Potentially Dependent Assemblies Added to the Bin Folder?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Package reference assemblies are always added to the bin folder. They're explicit dependencies.&lt;/li&gt;
&lt;li&gt;Project reference assemblies are added to the bin folder if they're called. As you'll see below, if ProjectA depends on ProjectB with consumes PackageFTest, but there's no code path from ProjectA that &lt;em&gt;requires&lt;/em&gt; PackageFTest, PackageFTest.dll won't show up in the bin folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-proof"&gt;The Proof&lt;/h2&gt;
&lt;p&gt;The following Framework solution is very simple. Its only purpose is to reproduce the version assembly loading problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There's one NuGet package with one method.&lt;/li&gt;
&lt;li&gt;The package code never changes. The only change is the versioning and strong-naming.&lt;/li&gt;
&lt;li&gt;The web application depends on two projects.&lt;/li&gt;
&lt;li&gt;Each of those two projects has a &lt;em&gt;different&lt;/em&gt; package version installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Create a new solution with the following. In my case, all were .Net 4.7.2 projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASP.NET MVC application named WebApplication1&lt;/li&gt;
&lt;li&gt;Two class libraries named ClassLibrary1 and ClassLibrary2&lt;/li&gt;
&lt;li&gt;A class library named PackageFTest.
&lt;blockquote&gt;
&lt;p&gt;The unusual name is to prevent accidentally installing a package from NuGet.org named...Package1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_02.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PackageFTest &amp;gt; Class1.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public class Class1
    {
        public int GetId() =&amp;gt; 1;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ClassLibrary1 &amp;gt; Class1.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;     public class Class1
     {
      // public int GetId() =&amp;gt; new PackageFTest.Class1().GetId();
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ClassLibrary2 &amp;gt; Class1.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;     public class Class1
     {
      // public int GetId() =&amp;gt; new PackageFTest.Class1().GetId();
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;WebApplication1 &amp;gt; Controllers &amp;gt; HomeController.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public ActionResult Index()
    {
        // new ClassLibrary1.Class1().GetId();
        // new ClassLibrary2.Class1().GetId();
        return View();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add ClassLibrary1 and ClassLibrary2 to WebApplication1 as Project References.&lt;/p&gt;
&lt;p&gt;Build the solution.&lt;/p&gt;
&lt;p&gt;We're going to build and package PackageFTest six times, so in the PackageFTest folder add a command file named &lt;code&gt;bp.cmd&lt;/code&gt; with this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;msbuild PackageFTest.csproj
nuget pack PackageFTest.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need nuget.exe, which is not included with Visual Studio starting with version 2019. Instead, &lt;a href="https://www.nuget.org/downloads"&gt;download the latest stable version&lt;/a&gt; and, for this exercise, place it in the Packages folder. Normally, you'd put it in an external folder and add it to the Path.&lt;/p&gt;
&lt;p&gt;By design, msbuild.exe isn't added to the Path environment variable. Instead, search for and open the Developer Command Prompt for VS 2019, then change directories to your PackageFTest folder.&lt;/p&gt;
&lt;p&gt;Generate a .nuspec file by running &lt;code&gt;nuget spec&lt;/code&gt;. Open the PackageFTest.nuspec file and make it look like this. Note that we're allowing token substitution as much as practical. The important thing is that we're explicitly setting the package version. Leave the nuspec file open for editing.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package &amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;id&amp;gt;$id$&amp;lt;/id&amp;gt;
    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;title&amp;gt;$title$&amp;lt;/title&amp;gt;
    &amp;lt;authors&amp;gt;$author$&amp;lt;/authors&amp;gt;
    &amp;lt;owners&amp;gt;$author$&amp;lt;/owners&amp;gt;
    &amp;lt;description&amp;gt;$description$&amp;lt;/description&amp;gt;
    &amp;lt;releaseNotes&amp;gt;&amp;lt;/releaseNotes&amp;gt;
    &amp;lt;copyright&amp;gt;Copyright 2020&amp;lt;/copyright&amp;gt;
  &amp;lt;/metadata&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll be setting the package's assembly information several times. Instead of doing this the normal way through Project Properties, open PackageFTest\Properties\AssemblyInfo.cs and set these fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;AssembyInformationalVersion&lt;/code&gt; attribute must be added manually. This is very useful because you can store the NuGet package version, which could potentially be something like 2.0.0-beta1, and be able to view it in file properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[assembly: AssemblyTitle(&amp;quot;PackageFTest&amp;quot;)]
[assembly: AssemblyDescription(&amp;quot;PackageFTest Description&amp;quot;)]
[assembly: AssemblyCompany(&amp;quot;c flatt&amp;quot;)]
[assembly: AssemblyProduct(&amp;quot;Package F Test&amp;quot;)]
[assembly: AssemblyInformationalVersion(&amp;quot;3.1.0&amp;quot;)]
[assembly: AssemblyCopyright(&amp;quot;Copyright ©  2020&amp;quot;)]
[assembly: AssemblyVersion(&amp;quot;1.0.0.0&amp;quot;)]
[assembly: AssemblyFileVersion(&amp;quot;1.0.0.0&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's simplify working with our package. Right-click the solution and choose &amp;quot;Manage NuGet Packages for Solution&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_03.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Open the package source settings.s&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_04.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Add a package source that points to your PackageFTest folder, then uncheck the other packages. Now we'll only see our package when it's built and packed.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_05.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Let's build all of our package versions. If you followed the steps above, version 1 is ready to build and pack. In the Developer command line, run &lt;code&gt;bp.cmd&lt;/code&gt;. The package will be built and packed as &lt;code&gt;PackageFTest.1.0.0.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_06.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weak-Named Coupled Assembly Versions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now you're going to edit the four version numbers. As a reminder, the only ones that matter to .Net are the package and assembly versions. Setting the product information helps us later to see which .dll is in the bin folder. You can not set the file version, if you want. If you do, it should match the assembly version.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In PackageFTest.nuspec and change &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; to 1.1.0 and Save.&lt;/li&gt;
&lt;li&gt;In AssemblyInfo, change AssemblyInformationalVersion to 1.1.0. Change AssemblyVersion and AssemblyFileVersion to 1.1.0.0. Save the file.&lt;/li&gt;
&lt;li&gt;Run bp.cmd to generate &lt;code&gt;PackageFTest.1.1.0.nupkg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Strong-Named Coupled Assembly Versions&lt;/strong&gt;
Open PackageFTest &amp;gt; Properties &amp;gt; Signing. Check &amp;quot;Sign the assembly&amp;quot;. Under Choose a strong name key file, choose New,  enter a key file name of p1.snk, uncheck Protect my key file with a password, click OK.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_07.png" alt="" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In PackageFTest.nuspec and change &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; to 2.0.0 and Save.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In AssemblyInfo, change AssemblyInformationalVersion to 2.0.0. Change AssemblyVersion and AssemblyFileVersion to 2.0.0.0. Save the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run bp.cmd to generate &lt;code&gt;PackageFTest.2.0.0.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In PackageFTest.nuspec and change &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; to 2.1.0 and Save.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In AssemblyInfo, change AssemblyInformationalVersion to 2.1.0. Change AssemblyVersion and AssemblyFileVersion to 2.1.0.0. Save the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run bp.cmd to generate &lt;code&gt;PackageFTest.2.1.0.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Strong-Named Decoupled Assembly Versions&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm using 3.1.0 and 3.2.0 here to ensure my package versions do not match the assembly version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In PackageFTest.nuspec and change &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; to 3.1.0 and Save.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In AssemblyInfo, change AssemblyInformationalVersion to 3.1.0. Change AssemblyVersion and AssemblyFileVersion to &lt;strong&gt;3.0.0.0&lt;/strong&gt;. Save the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run bp.cmd to generate &lt;code&gt;PackageFTest.3.1.0.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In PackageFTest.nuspec and change &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; to 3.2.0 and Save.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In AssemblyInfo, change AssemblyInformationalVersion to 3.2.0. &lt;strong&gt;Keep&lt;/strong&gt; AssemblyVersion and AssemblyFileVersion at &lt;strong&gt;3.0.0.0&lt;/strong&gt;. Save the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run bp.cmd to generate &lt;code&gt;PackageFTest.3.2.0.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PackageFTest folder now has six packages.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_08.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;In the Visual Studio &amp;gt; NuGet - Solution tab, refresh the page.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_09.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;With Browse selected, you should see PackageFTest. Now we'll progressively install the packages, run the application, and see the result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weak-Named Coupled Assembly Versions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install version 1.0.0 to ClassLibrary1&lt;/li&gt;
&lt;li&gt;Install version 1.1.0 to ClassLibrary2&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_10.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Uncomment the Class1 or Index code from ClassLibrary1, ClassLibrary2, and WebApplication1&lt;/li&gt;
&lt;li&gt;Build the solution&lt;/li&gt;
&lt;li&gt;Run the solution using F5. The web application runs successfully.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_11.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In WebApplication1\bin, you can check PackageFTest.dll's properties to see which version was used.  Here, I'm using FreeCommander to display the columns. Remember that product version number = package version number, and file version number = assembly version number.&lt;/p&gt;
&lt;p&gt;In this case, the latest version was used, and there were no errors because we are not strong-naming the assembly.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_12.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strong-Named Coupled Assembly Versions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install version 2.0.0 to ClassLibrary1&lt;/li&gt;
&lt;li&gt;Install version 2.1.0 to ClassLibrary2&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_13.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Build and run the solution. The dependency error is triggered at runtime.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_14.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep the debugger open and check what's in the bin folder.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_15.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Again, the latest version is selected. However, due to strong naming, the application is being told it &lt;em&gt;must&lt;/em&gt; load assembly version 2.0.0 &lt;em&gt;and&lt;/em&gt; 2.1.0, but only one dll can be in the folder.&lt;/p&gt;
&lt;p&gt;Back in Visual Studio debugging, view the Error List and enable seeing Warnings.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_16.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;If you double-click the warning, Visual Studio will add the following assembly redirect to the web.config file. Otherwise you would have to add it manually.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependentAssembly&amp;gt;
	&amp;lt;assemblyIdentity name=&amp;quot;PackageFTest&amp;quot; publicKeyToken=&amp;quot;A9CA41B60F6390A1&amp;quot; culture=&amp;quot;neutral&amp;quot;/&amp;gt;
	&amp;lt;bindingRedirect oldVersion=&amp;quot;0.0.0.0-2.1.0.0&amp;quot; newVersion=&amp;quot;2.1.0.0&amp;quot;/&amp;gt;
&amp;lt;/dependentAssembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stop the application, then F5 again and it will run successfully.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strong-Named Decoupled Assembly Versions&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Comment out the dependentAssembly xml created in the previous run. We want to prove there's no binding redirection going on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Install version 3.1.0 to ClassLibrary1&lt;/li&gt;
&lt;li&gt;Install version 3.2.0 to ClassLibrary2&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_17.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Build and run the solution. The project runs successfully.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why? Because the &lt;em&gt;assembly&lt;/em&gt; version of the two dlls is the same: 3.0.0.0.&lt;/p&gt;
&lt;p&gt;Note that this time the lower package version number was selected. This is how .Net resolves the dependency when using packages.config. When using PackageReference, the highest usable package version is selected.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_18.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This is a problem. What if ClassLibrary2 is using a method named &lt;code&gt;GetId2()&lt;/code&gt; that's in PackageFTest that's available in package version 3.2 but not 3.1?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public int GetId()
    {
        var p = new PackageFTest.Class1();
        return p.GetId() + p.GetId2();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An error is thrown, that's what.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_19.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;What's our solution? As noted above, the best is to set all projects to use PackageFTest package 3.2. What if you can't? How about a binding redirect in the WebApplication to 3.2.0?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;dependentAssembly&amp;gt;
	&amp;lt;assemblyIdentity name=&amp;quot;PackageFTest&amp;quot; publicKeyToken=&amp;quot;A9CA41B60F6390A1&amp;quot; culture=&amp;quot;neutral&amp;quot; /&amp;gt;
	&amp;lt;bindingRedirect oldVersion=&amp;quot;0.0.0.0-3.2.0.0&amp;quot; newVersion=&amp;quot;3.2.0.0&amp;quot; /&amp;gt;
&amp;lt;/dependentAssembly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No, that makes things worse. It prevents the dll from being copied to the bin folder at all.&lt;/p&gt;
&lt;p&gt;The admittedly frustrating answer is to install PackageFTest 3.2.0 to WebApplication1. This forces the latest package dll to be copied to the bin folder.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's a problem of transitive assemblies. A depends on B which depends on C, but A doesn't directly depend on C.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/Screen_Cap_20.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;At this point the application runs successfully.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Automatically resolving dependencies is, apparently, hard. If we were installing multiple assembly versions to the GAC, there wouldn't be a problem. But that's not how modern applications are all deployed. In a sense, we're deploying applications the same way as in the DOS 6 days: the entire application and its dependencies are in a folder. No shared dlls. Except, of course, as seen above, we only get to install one dll copy regardless of its version.&lt;/p&gt;
&lt;p&gt;Is this still DLL Hell? Package Hell? No matter how you label it, when things go wrong there's hell to pay.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and/images/hell-to-pay.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/24772053/found-conflicts-between-different-versions-of-the-same-dependent-assembly-that-c"&gt;.net - Found conflicts between different versions of the same dependent assembly that could not be resolved - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/reference/nuspec"&gt;.nuspec File Reference for NuGet | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.screencast.com/t/uwobrRabc37"&gt;5 minute video on letting Visual Studio help you fix your binding redirects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://haacked.com/archive/2012/02/16/changing-a-strong-name-is-a-major-breaking-change.aspx/"&gt;Changing A Strong Name Is A Major Breaking Change | You’ve Been Haacked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Code_signing"&gt;Code signing - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twilio/twilio-csharp/issues/431"&gt;Could not load file or assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. · Issue #431 · twilio/twilio-csharp · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/assembly/create-use-strong-named"&gt;Create and use strong-named assemblies | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/dependencies"&gt;Dependencies and .NET libraries | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/8567021"&gt;Does code-signing without strong-naming leave your app open to abuse?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/_apis/public/gallery/publishers/CloudNimble/vsextensions/BindingRedirectsDoctor/1.0.1/vspackage"&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://encodo.com/latest/developer-blogs/configuring-net-framework-assembly-binding-redirects/"&gt;Encodo Systems AG - en&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joshuachini.com/2017/07/12/how-to-assign-a-strong-name-to-unsigned-3rd-party-assemblies-during-the-build-process/"&gt;How to Assign a Strong Name to Unsigned 3rd-party Assemblies During the Build Process | Joshua Chini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.syncfusion.com/blogs/post/how-to-use-nuget-packages.aspx"&gt;How to Use NuGet Packages: The Ultimate Guide | Syncfusion Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://saebamini.com/how-to-version-your-net-nuget-packages-libraries-and-assemblies-azure-yaml-pipelines-example-using-net-core-cli/"&gt;How to Version Your .NET NuGet Packages, Libraries and Assemblies + Azure YAML Pipelines Example using .NET Core CLI – Saeb Amini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exceptionshub.com/how-to-fix-referenced-assembly-does-not-have-a-strong-name-error.html"&gt;How to fix “Referenced assembly does not have a strong name” error? - ExceptionsHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://michaelscodingspot.com/how-to-resolve-net-reference-and-nuget-package-version-conflicts/"&gt;How to resolve .NET reference and NuGet package version conflicts - Michael's Coding Spot&lt;/a&gt; &amp;lt;== Excellent&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nickberardi.com/json-net-strong-naming-and-nuget-woes/"&gt;JSON.NET Strong Naming And NuGet Woes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.unity.com/threads/newtonsoft-json-package.843220/"&gt;Newtonsoft Json package - Unity Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sprache/Sprache/issues/32"&gt;No Strong Named Version of the assemblies in NuGet · Issue #32 · sprache/Sprache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/concepts/dependency-resolution"&gt;NuGet Package Dependency Resolution | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/concepts/package-versioning"&gt;NuGet Package Version Reference | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.davidebbo.com/2011/01/nuget-versioning-part-3-unification-via.html"&gt;NuGet versioning Part 3: unification via binding redirects - David Ebbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/"&gt;Open-source .NET library guidance | Microsoft Docs&lt;/a&gt; &amp;lt;-- Excellent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/nuget/package-signing/"&gt;Package Signing | The NuGet Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codewinsarguments.co/2018/09/12/refreshing-net-assembly-binding-redirects-in-a-visual-studio-solution/"&gt;Refreshing .NET Assembly Binding Redirects in a Visual Studio Solution | Martin Owen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pedrolamas.com/2018/09/11/start-strong-naming-your-assemblies/"&gt;Start Strong-Naming your Assemblies! – pedrolamas.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pedrolamas.com/2016/03/01/still-strong-naming-your-assemblies-you-do-know-its-2016-right/"&gt;Still Strong-Naming your Assemblies? You do know it's 2016, right? – pedrolamas.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Strong_key"&gt;Strong key - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wibeck.org/2009/04/strong-name-versus-certificate-signing/"&gt;Strong name versus certificate signing : Peter Wibeck's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/strong-naming"&gt;Strong naming and .NET libraries | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/assembly/strong-named"&gt;Strong-named assemblies | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codingblocks.net/programming/strongly-named-assemblies-in-nuget/"&gt;Strongly Named Assemblies in Nuget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.erikheemskerk.nl/transitive-nuget-dependencies-net-core-got-your-back/"&gt;Transitive NuGet dependencies: .NET Core’s got your back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/devops/versioning-nuget-packages-cd-1/"&gt;Versioning NuGet packages in a continuous delivery world: part 1 | Azure DevOps Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/devops/versioning-nuget-packages-cd-3/"&gt;Versioning NuGet packages in a continuous delivery world: part 3 | Azure DevOps Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/versioning#assembly-version"&gt;Versioning and .NET libraries | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/blogs/suzcook/when-to-change-fileassembly-versions"&gt;When to Change File/Assembly Versions | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softwareengineering.stackexchange.com/questions/240894/why-are-strong-names-optional/240941#240941"&gt;c# - Why are strong names optional? - Software Engineering Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 30 Jul 2020 18:44:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_framework_nuget_packages_-_versioning__dependency_resolution__and</guid>
    </item>
    <item>
      <title>When Did "Save? Yes, No, Cancel" Become Wrong?</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/ScreenCap_2020-06-09_21-03-37.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="improving-on-perfection"&gt;Improving on Perfection?&lt;/h2&gt;
&lt;p&gt;It's the easiest prompt when closing an application, and has been around for decades.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you want to save your changes before closing?
[ &lt;ins&gt;Y&lt;/ins&gt;es] [&lt;ins&gt;N&lt;/ins&gt;o] [Cancel]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can press Y for Yes, N for No, and Esc for Cancel.&lt;/p&gt;
&lt;p&gt;So why does everyone seem to think this needs revising, or is somehow unclear?&lt;/p&gt;
&lt;p&gt;Here are a few screen captures from...&lt;/p&gt;
&lt;h2 id="the-save-rogues-gallery"&gt;The Save? Rogues' Gallery&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Microsoft Word&lt;/strong&gt;&lt;br /&gt;
It's as if grammar never entered their heads. At least I can press S or N, though.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/0fb1be686b8344939c0dc726d64d77a3.png" alt="5167ad0797515d9b18d5266358b1b969.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Microsoft Visual Studio&lt;/strong&gt;&lt;br /&gt;
At least MS is consistent.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/6655bd23c171496390f10894b1c75dfe.png" alt="ba5217f8fd30346a2000c266293c9da6.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paint.Net&lt;/strong&gt;&lt;br /&gt;
This one's better. The choices are the same, but they actually answer the question. Too bad they don't underline the keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/3f9cd983fdb14cd681d6f5fd3a3b3a86.png" alt="832e310c7961f5374e1f249c268a17e6.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inkscape&lt;/strong&gt;&lt;br /&gt;
I love you, Inkscape, but this dialog makes me sad.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/68f9ccc477a244ee868a7b7076b7e9e9.png" alt="35449aabc46efa8c31687d71b52f7b08.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ShareX&lt;/strong&gt;&lt;br /&gt;
One of the most confusing variations. I make the unintended choice about half the time.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/b83610532fad4a91adcc5c49f4fe0c88.png" alt="56955d9297f640c2e00a42e8729c18a7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GIMP&lt;/strong&gt;&lt;br /&gt;
With this many instructions, no wonder there's a Help button.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/7205415dc1d0425da4c5d38f043978e7.png" alt="4123db8d08645896d513faeadabfb3b3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KDiff3&lt;/strong&gt;&lt;br /&gt;
At least I'm not being asked a question. This dialog's pretty clear, but being able to press the &amp;quot;Y&amp;quot;, &amp;quot;N&amp;quot; or Esc keys would still be faster.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/f3b2a23903524aff94182ea63c7f2285.png" alt="25733a41270e721f5502cda55d6706f9.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mp3tag&lt;/strong&gt;&lt;br /&gt;
As much as I like this app, I'm astonished I can make changes, close, and am &lt;em&gt;not&lt;/em&gt; prompted to save my changes.&lt;/p&gt;
&lt;p&gt;:-(&lt;/p&gt;
&lt;h2 id="and-some-apps-that-still-do-it-right"&gt;And some apps that still do it right&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Markdown Monster&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/4df73a531d1246b5b3e1fd40415feba3.png" alt="94220a17408d304fcb1683dd29ee793b.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LINQPad&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/6da2ea377ec44d7fb764ad87d021a416.png" alt="6926a659f737bf4c4a7468e20f6dbd11.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notepad++&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/c2f4c49432bb4dd2be0c435cf907fec6.png" alt="2080aa487ab2cba2f14823b661bea02f.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audacity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/7852b800610043beaf49da96ec65ff70.png" alt="f9bf9b0a47fd02e87b6496fc055227c7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ABBYY Fine Reader&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/8324a68aac6746458bd6e59b1748fbb5.png" alt="6822f3051a3fed584500f1562645c0cc.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VSCD Video Editor Free&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__/images/77adbd6f82f9414c8253c1de8a251c52.png" alt="1a88306ae10e166159ce9e7af7c0cd0b.png" /&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 9 Jun 2020 21:05:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/when_did__save__yes,_no,_cancel__become_wrong__</guid>
    </item>
    <item>
      <title>Tabs vs Spaces is Dumb. Convert Tabs INTO Spaces.</title>
      <description>&lt;p&gt;&lt;span style="font-family:consolas, monospace;font-size:50px; color:darkred;"&gt; ^t =&amp;gt; &amp;quot;    &amp;quot; = ♥ &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A part of me thinks this is so obvious I shouldn't need to post about it. But I keep seeing &amp;quot;tabs vs spaces&amp;quot; articles by programmers and just...don't...get it.&lt;/p&gt;
&lt;p&gt;Modern text editors let you choose in settings how to treat tabs. The significant choices are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many spaces a tab represents&lt;/li&gt;
&lt;li&gt;Whether to save the tab character in the document or convert it to spaces&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To me this has always been easy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Four spaces&lt;/li&gt;
&lt;li&gt;Convert tabs to spaces&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When typing, it's faster to indent using the tab key. But when sharing with another person, there's no guarantee their tabs will use the same number of spaces as yours. So fidelity and consistency demand spaces.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It doesn't matter what efficient keyboard shorcuts you take to &lt;em&gt;generate&lt;/em&gt; the spaces, as long as the document ends up with only spaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The only argument for storing tabs in the document is being able to back &amp;quot;space&amp;quot; using them. But it's not enough of a timesaver to overcome the advantages of storing spaces.&lt;/p&gt;
&lt;p&gt;There is no reasonable--or reason for a--tabs vs spaces debate.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;If you never share your work, then the entire question is moot. I don't care what you do.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 17 May 2020 21:05:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/tabs_vs_spaces_is_dumb__convert_tabs_into_spaces_</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/tabs_vs_spaces_is_dumb__convert_tabs_into_spaces_</guid>
    </item>
    <item>
      <title>What Is Cyclomatic Complexity In a Nutshell?</title>
      <description>&lt;p&gt;Imagine you're going to walk to a friend's house. If the house is a few doors down, you don't need to make any decisions. But if your friend is further away, you may come to an intersection. You choose a direction and come to another intersection, and so on. How many paths are there to your friend's house?&lt;/p&gt;
&lt;p&gt;That's cyclomatic complexity in a nutshell.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of independent paths through a method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/what_is_cyclomatic_complexity_md/map1.png" alt="Map1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/what_is_cyclomatic_complexity_md/map2.png" alt="Map2" /&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 11 May 2020 19:45:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/what_is_cyclomatic_complexity_md</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/what_is_cyclomatic_complexity_md</guid>
    </item>
    <item>
      <title>Using FluentAssertions with xUnit Theory to Test for an Exception AND a Successful Return</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_fluentassertions_with_xunit_theory_to_test_for_an_exception_and_/images/header.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;I recently wanted to unit test a method that required significant setup, and where an invalid method argument would throw an exception while valid values returned easily testable results.&lt;/p&gt;
&lt;p&gt;While I could have created a separate test, this really lent itself to using an xUnit Theory. The problem I faced was how to test for the exception but also test for a valid return. I &lt;em&gt;didn't&lt;/em&gt; want to write duplicate code within the test itself, such as declaring the service twice.&lt;/p&gt;
&lt;p&gt;Some research and experimentation led to the approach below. The trick is to declare a delegate function, then use FluentAssertions to either catch the invocation exception, or to invoke the function and return the value.&lt;/p&gt;
&lt;p&gt;Here's a simple Class Library app to demonstrate the technique. I kind of love this because there's no wasted or duplicate code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System;
using FluentAssertions;
using Xunit;

namespace FluentAssertionsInvoking
{
    public class CustomerService_Should
    {
        [Theory]
        [InlineData(null)]
        [InlineData(&amp;quot;Marcus Welby&amp;quot;)]
        public void Return_a_customer_or_throw_an_exception(string name)
        {
            // arrange
            var expected = new Customer() { Name = name };
            var customerService = new CustomerService(expected);

            // act
            Func&amp;lt;CustomerService, Customer&amp;gt; action = service =&amp;gt; service.GetCustomer();

            // assert
            // Exception condition
            if (name == null)
            {
                customerService.Invoking(action).Should().Throw&amp;lt;Exception&amp;gt;();
            }
            else
            // Valid condition
            {
                var result = action.Invoke(customerService);
                result.Should().BeEquivalentTo(expected);
            }
        }
    }

    public class Customer
    {
        public string Name { get; set; }
    }

    public class CustomerService
    {
        private Customer _customer;
        public CustomerService(Customer customer)
        {
            _customer = customer;
        }
        public Customer GetCustomer()
        {
            if (_customer.Name == null) { throw new Exception(); }
            return _customer;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_fluentassertions_with_xunit_theory_to_test_for_an_exception_and_/images/ScreenCap_2020-04-15_19-31-15.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fluentassertions.com/"&gt;FluentAssertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xunit.net/"&gt;xUnit.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bonus"&gt;Bonus&lt;/h2&gt;
&lt;p&gt;Here's the xunit.runner.json to show only method names in the Test Runner output. Remember to set the file to Copy to Output.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;$schema&amp;quot;: &amp;quot;https://xunit.net/schema/current/xunit.runner.schema.json&amp;quot;,
  &amp;quot;methodDisplay&amp;quot;: &amp;quot;method&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_fluentassertions_with_xunit_theory_to_test_for_an_exception_and_/images/ScreenCap_2020-04-15_19-31-27.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 15 Apr 2020 19:13:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/using_fluentassertions_with_xunit_theory_to_test_for_an_exception_and_</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/using_fluentassertions_with_xunit_theory_to_test_for_an_exception_and_</guid>
    </item>
  </channel>
</rss>