<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Mock returning a List as IMongoQueryable for unit testing</title>
      <description>&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The latest MongoDb driver for .Net doesn't have a way to convert a collection such as List&lt;T&gt; to IMongoQueryable. If the code depends on that interface, it needs to be mocked, but how to set the concrete data?&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The Solution&lt;/h2&gt;
&lt;p&gt;What you'll need to run this sample yourself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/MongoDB.Driver/"&gt;MongoDb.Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/NSubstitute/"&gt;NSubstitute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/xunit/"&gt;xunit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/xunit.runner.visualstudio/"&gt;xunit.runner.visualstudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's say you've settled on using MongoDb as your NoSQL data store. You write a simple repository pattern with one method to query for any concrete type.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;	public interface IMongoRepository&amp;lt;T&amp;gt; where T : class
	{
		public IMongoQueryable&amp;lt;T&amp;gt; QueryAll();
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also have a simple Customer service that calls the repository&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CustomerService
{
	IMongoRepository&amp;lt;Customer&amp;gt; _customerRepository = null;
	public CustomerService(IMongoRepository&amp;lt;Customer&amp;gt; customerRepository)
	{
		_customerRepository = customerRepository;
	}

	public List&amp;lt;Customer&amp;gt; GetCustomers()
	{
		return _customerRepository.QueryAll().ToList();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you start writing the following test. But you discover there's no way to get a concrete instance of IMongQueryable&lt;T&gt;. There used to be, but it's legacy code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CustomerService_Should
{
	[Fact]
	public void Return_customers()
	{
		var expected = new List&amp;lt;Customer&amp;gt;() { new Customer() { Id = 1 } };
		var customerRepository = Substitute.For&amp;lt;IMongoRepository&amp;lt;Customer&amp;gt;&amp;gt;();
		
		//return the mocked data. But how to convert the list into IMongoQueryable???

		customerRepository.QueryAll().Returns([argh, what goes here??]);
		var service = new CustomerService(customerRepository);
		var actual = service.GetCustomers();
		Assert.Equal(expected.Count, actual.Count);
		Assert.Equal(expected.First().Id, actual.First().Id);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like me, you probably try all kinds of typecasting before realizing you're always trying to do something impossible. Finally, you find the answer on Stack Overflow. There are two ways to mock up the data, and both make the IMongoQueryable class accept IQueryable.&lt;/p&gt;
&lt;h2 id="using-nsubstitute"&gt;Using NSubstitute&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CustomerService_Should
{
	[Fact]
	public void Return_customers()
	{
		var expected = new List&amp;lt;Customer&amp;gt;() { new Customer() { Id = 1 } };
		var customerRepository = Substitute.For&amp;lt;IMongoRepository&amp;lt;Customer&amp;gt;&amp;gt;();
		
		//Mock IMongoQueryable to accept IQueryable, enabling just enough of the interface
		//to work
		var expectedQueryable = expected.AsQueryable();
		var mockQueryable = Substitute.For&amp;lt;IMongoQueryable&amp;lt;Customer&amp;gt;&amp;gt;();
		mockQueryable.ElementType.Returns(expectedQueryable.ElementType);
		mockQueryable.Expression.Returns(expectedQueryable.Expression);
		mockQueryable.Provider.Returns(expectedQueryable.Provider);
		mockQueryable.GetEnumerator().Returns(expectedQueryable.GetEnumerator());

		//return the mocked data
		customerRepository.QueryAll().Returns(mockQueryable);
		var service = new CustomerService(customerRepository);
		var actual = service.GetCustomers();
		Assert.Equal(expected.Count, actual.Count);
		Assert.Equal(expected.First().Id, actual.First().Id);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty slick.&lt;/p&gt;
&lt;h2 id="creating-mongoqueryable"&gt;Creating MongoQueryable&lt;T&gt;&lt;/h2&gt;
&lt;p&gt;A simple concrete class that allows setting a List property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MongoQueryable&amp;lt;T&amp;gt; : IMongoQueryable&amp;lt;T&amp;gt;
{
	public List&amp;lt;T&amp;gt; MockData { get; set; }

	public Type ElementType =&amp;gt; MockData.AsQueryable().ElementType;

	public Expression Expression =&amp;gt; MockData.AsQueryable().Expression;

	public IQueryProvider Provider =&amp;gt; MockData.AsQueryable().Provider;

	public IEnumerator&amp;lt;T&amp;gt; GetEnumerator() =&amp;gt; MockData.AsQueryable().GetEnumerator();
	IEnumerator IEnumerable.GetEnumerator() =&amp;gt; MockData.AsQueryable().GetEnumerator();

	public QueryableExecutionModel GetExecutionModel() =&amp;gt; throw new NotImplementedException();

	public IAsyncCursor&amp;lt;T&amp;gt; ToCursor(CancellationToken cancellationToken = default) =&amp;gt; throw new NotImplementedException();

	public Task&amp;lt;IAsyncCursor&amp;lt;T&amp;gt;&amp;gt; ToCursorAsync(CancellationToken cancellationToken = default) =&amp;gt; throw new NotImplementedException();

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public void Return_customers2()
{
	var expected = new List&amp;lt;Customer&amp;gt;() { new Customer() { Id = 1 } };
	var customerRepository = Substitute.For&amp;lt;IMongoRepository&amp;lt;Customer&amp;gt;&amp;gt;();

	//Mock IMongoQueryable using a class
	var mockQueryable = new MongoQueryable&amp;lt;Customer&amp;gt;();
	mockQueryable.MockData = expected;

	//return the mocked data
	customerRepository.QueryAll().Returns(mockQueryable);
	var service = new CustomerService(customerRepository);
	var actual = service.GetCustomers();
	Assert.Equal(expected.Count, actual.Count);
	Assert.Equal(expected.First().Id, actual.First().Id);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/46035390/unit-testing-with-imongoqueryable"&gt;c# - Unit Testing with IMongoQueryable - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The comments in Stack Overflow point out that using IMongoQueryable--or IQueryable-- isn't ideal because it tightly couples the code to MongoDb or to a Queryable backend. It might be better to use a truly generic repository and convert to/from MongoDb (or other database) as needed.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 28 Jan 2020 17:29:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/mock_returning_a_list_as_imongoqueryable_for_unit_testing</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/mock_returning_a_list_as_imongoqueryable_for_unit_testing</guid>
    </item>
    <item>
      <title>Git Basics With Visual Studio 2019</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/header.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-problem(s)-does-git-solve?"&gt;What problem(s) does Git solve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-git-basically-work?"&gt;How does Git basically work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what%27s-a-typical-daily-flow?"&gt;What's a typical daily flow?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#doing-it-in-visual-studio-2019"&gt;Doing It In Visual Studio 2019&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-and-checkout-a-new-branch"&gt;Create and Checkout a New Branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stage-changes-for-commit"&gt;Stage Changes for Commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-the-change"&gt;Commit the Change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-a-couple-more-commits"&gt;Make a Couple More Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clean-up-the-commits"&gt;Clean Up the Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkout-and-synchronize-master"&gt;Checkout and Synchronize Master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkout-and-rebase-feature-onto-master"&gt;Checkout and Rebase Feature Onto Master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkout-and-merge-feature-into-master"&gt;Checkout and Merge Feature Into Master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#push-changes-to-the-remote-server"&gt;Push Changes to the Remote Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delete-the-branch"&gt;Delete the Branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-operations"&gt;Common Operations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkout"&gt;Checkout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branch"&gt;Branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-(stage)"&gt;Add (stage)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit"&gt;Commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#merge"&gt;Merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rebase-(changes-history)"&gt;Rebase (changes history)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-status"&gt;Check Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-history"&gt;Check History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#revert"&gt;Revert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reset-(changes-history)"&gt;Reset (changes history)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tag"&gt;Tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-rules-for-teams"&gt;The Rules For Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-common-problems"&gt;Solving Common Problems&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pull,-merge-and-rebase-conflicts"&gt;Pull, Merge and Rebase Conflicts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remote-vs-local,-plus-base-and-backup"&gt;Remote vs Local, plus Base and Backup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#last-word"&gt;Last Word&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-problems-does-git-solve"&gt;What problem(s) does Git solve?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Multi-user offline development&lt;/li&gt;
&lt;li&gt;Rapid, dependable branching and merging&lt;/li&gt;
&lt;li&gt;Decentralized version control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git is a distributed version control system that was originally developed by Linus Torvalds in April 2005 to replace BitKeeper, which was withdrawn from free use due to alleged reverse engineering by SourcePuller creator Andrew Tridgell.&lt;/p&gt;
&lt;p&gt;Torvalds needed a system that could manage the Linux kernel development and scale to hundreds of merges performed in seconds. Git has been maintained by Junio Hamano since July 2005.&lt;/p&gt;
&lt;p&gt;Git is currently the most-used version control system by far. Microsoft recommends Git, has contributed to its development, and hosts the Windows source code using Git--the largest such repository in the world.&lt;/p&gt;
&lt;h2 id="how-does-git-basically-work"&gt;How does Git basically work?&lt;/h2&gt;
&lt;p&gt;A folder, &lt;code&gt;.git&lt;/code&gt;, contains the complete repository for files and folders underneath it. A clone of a repository contains the same history as the original.&lt;/p&gt;
&lt;p&gt;The repository is a file system. Each file is named with an SHA-1 hash. A file contains either the actual content of source code file, or contains a tree of hash file names. In this way, Git maintains references, sometimes called &amp;quot;pointers&amp;quot;--the hash file names--to content.&lt;/p&gt;
&lt;p&gt;There's a file that contains the reference to the root of the solution. From here, all the links to other files can be traced, so this becomes the current state.&lt;/p&gt;
&lt;p&gt;If any file changes, Git creates a new copy of the file with a new hash reference, updates links to it, and creates a new root-level reference. This becomes the new point-in-time version.&lt;/p&gt;
&lt;p&gt;Branches exist by creating a file with the branch name, e.g. &amp;quot;master&amp;quot;, whose content points to a particular root reference file. When people talk about branching in Git being &amp;quot;cheap,&amp;quot; it's because, to branch from another branch, all Git has to do is create another file, e.g. &amp;quot;feature-1,&amp;quot; with the same reference file name.&lt;/p&gt;
&lt;p&gt;If Charlene clones a repository from Blake, all she's doing is making a copy of the .git folder. Let's say Charlene and Blake each make a change to the same file. Each of them will get a &lt;em&gt;different&lt;/em&gt; new reference hash. This is how Git knows to merge files: when it finds a divergence in the tree, it can trace backward in the references to find the common ancestor, then determine the changes via a three-way comparison. Once the differences are resolved, a new version of the file is created with a new reference name.&lt;/p&gt;
&lt;p&gt;The process is exactly the same with repositories located on remote servers. The only difference is that remote repositories are typically &amp;quot;bare,&amp;quot; meaning there's no working folder.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyone can create a bare repository on their local file filesystem. It's really just the contents of the .git folder moved to the root level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remote branch reference information is maintained in a .git folder named &lt;code&gt;remotes&lt;/code&gt;. Where the remotes are located is maintained in a .git config file.&lt;/p&gt;
&lt;p&gt;What's important to understand at this point is that your repository can contain branches for your local work, and branches for remote work. When you &lt;code&gt;fetch&lt;/code&gt; a remote branch, the contents are merged into your local copy of that branch, e.g. &lt;code&gt;origin/master&lt;/code&gt;. You then decide whether to merge those files into your local branch, i.e. &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When it comes to tracking local changes, there are potentially three versions of the file in play at any one time.&lt;/p&gt;
&lt;p&gt;First, there's the version of the file you're editing. This is the working file.&lt;/p&gt;
&lt;p&gt;Second, there's the version of the file you're going to commit. This is the staged file. (Also called being in the &amp;quot;index&amp;quot;.)&lt;/p&gt;
&lt;p&gt;Third, there's the version of the file since the last commit. This is the repository file.&lt;/p&gt;
&lt;p&gt;How does this look in practice? Let's say the last committed file named Test.txt has one line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;one
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You edit the file and add a line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;one
two
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, now your working file is changed, but Git doesn't know about the changes. You add the file to the index via &lt;code&gt;git add Test.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you were to &lt;code&gt;commit&lt;/code&gt; now, the repository file would be updated to match the staged file. But what if you don't commit, and instead add a third line?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;one
two
three
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;code&gt;commit&lt;/code&gt;, Git will still only update the repository file with the two lines from the staged file. You'd have to &lt;code&gt;git add&lt;/code&gt; again to stage the file with all three lines.&lt;/p&gt;
&lt;p&gt;This is a very flexible approach, letting you commit only the changes that you want. While I don't cover it in this guide, it's even possible to only commit portions of a file, called &amp;quot;hunks.&amp;quot;&lt;/p&gt;
&lt;h2 id="whats-a-typical-daily-flow"&gt;What's a typical daily flow?&lt;/h2&gt;
&lt;p&gt;Let's assume you've already cloned a repository from a remote server, and have configured your local Git to work easily with that remote. Your typical day will look something like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create and 'checkout' a local branch named 'feature-1' from the 'master' branch to work on a feature.
&lt;blockquote&gt;
&lt;p&gt;This is a local feature branch that's not replicated in the remote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Make a small set of changes to the files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add&lt;/code&gt; the changes to the index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Commit&lt;/code&gt; those changes with a short message&lt;/li&gt;
&lt;li&gt;Do this a bunch of times until the feature--or enough of the feature to make available to everyone--is complete (tests run, etc).&lt;/li&gt;
&lt;li&gt;Interactively &lt;code&gt;rebase&lt;/code&gt; those commits, combining them and updating the messages so the changes will be clear in the remote repository history that will be shared with everyone.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Checkout&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Pull (fetch and merge) any changes from the remote's &lt;code&gt;master&lt;/code&gt; branch into your local &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Checkout the &lt;code&gt;feature-1&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rebase&lt;/code&gt; onto the &lt;code&gt;master&lt;/code&gt; branch. This makes it seem as if all your changes are also the latest changes.&lt;/li&gt;
&lt;li&gt;Checkout &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge &lt;code&gt;feature-1&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Push&lt;/code&gt; your local &lt;code&gt;master&lt;/code&gt; branch to the remote &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Delete your local feature branch&lt;/li&gt;
&lt;li&gt;Create and &lt;code&gt;checkout&lt;/code&gt; a new feature branch and do the whole thing again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While this is many discreet steps, the flow soon becomes natural, and the result is a history of changes that's easy to follow.&lt;/p&gt;
&lt;p&gt;Here are the commands for the above flow, which are explained in the &lt;em&gt;Common Operations&lt;/em&gt; section.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git checkout -b feature-1
git add -A
git commit -m 'Try use existing GetAddress feature for GetCustomer'
git commit -m 'Update GetCustomer with new collection'
git commit -m 'Fix broken tests'
git rebase -i master (result is a single commit with message 'Allow git GetCustomer to return addresses')
git checkout master
git pull
git checkout feature-1
git rebase master
git checkout master
git merge feature-1 --no-ff (--no-ff forces the feature to appear clearly as a merge in the log)
git push
git branch -d feature-1
git checkout -b feature-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="doing-it-in-visual-studio-2019"&gt;Doing It In Visual Studio 2019&lt;/h2&gt;
&lt;p&gt;Here are the same operations from above done in Visual Studio 2019. Using Visual Studio 2017 is very similar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don't recommend using Visual Studio 2015's Git features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="create-and-checkout-a-new-branch"&gt;Create and Checkout a New Branch&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git checkout -b feature-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/511d12b20ca34c5481c78b3611939ed1.png" alt="d56bf2ea153b26c70f88de059c3bd2b4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/252361a8b6ba44668e2f52fa9415ec67.png" alt="1ce43676df42b7b589e5f1e858bde163.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/9090dc7c34ef42e6864be762eeb79133.png" alt="726441de43f69112a3b7d22a0229f89c.png" /&gt;&lt;/p&gt;
&lt;h3 id="stage-changes-for-commit"&gt;Stage Changes for Commit&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git add -A&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: In most cases you won't explicitly stage. You'll just Commit All.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/ae54e77b885b4dc8804fdd082f2c3737.png" alt="8c1abfe61b1708c31429dc860cb16040.png" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static void Main(string[] args)
        {
            Console.WriteLine(&amp;quot;Hello Git World!&amp;quot;);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/5ba1bbb4ef08486c8b44d614eaa59462.png" alt="c8e059f6058183635ecdd882c2df4c3d.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/a8ee3bd871464dbbaef94371a6f9e727.png" alt="e588fe8a85594c950331ee7df4fd6849.png" /&gt;&lt;/p&gt;
&lt;h3 id="commit-the-change"&gt;Commit the Change&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git commit -m 'Try use existing GetAddress feature for GetCustomer'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/ae54e77b885b4dc8804fdd082f2c3737.png" alt="8c1abfe61b1708c31429dc860cb16040.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/9f2490f717ed42aab5075d521419a9eb.png" alt="190cbc8f15ebc9a03600d9489a294c8f.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/c1be3950cb3e47da960ce1da8634c872.png" alt="a852e75d75b3907f161341a813946d27.png" /&gt;&lt;/p&gt;
&lt;h3 id="make-a-couple-more-commits"&gt;Make a Couple More Commits&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git commit -m 'Update GetCustomer with new collection&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git commit -m 'Fix broken tests'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[Note shown]&lt;/p&gt;
&lt;h3 id="clean-up-the-commits"&gt;Clean Up the Commits&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git rebase -i master (result is a single commit with message 'Allow git GetCustomer to return addresses')&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Visual Studio only gives the option to &amp;quot;squash&amp;quot; the commits. This is what you'll want to do most of the time, anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/511d12b20ca34c5481c78b3611939ed1.png" alt="d56bf2ea153b26c70f88de059c3bd2b4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/b32b0cab7def4f79a1d3182e58275331.png" alt="011820fcf438a353cbfd9f2cf638c46c.png" /&gt;&lt;/p&gt;
&lt;p&gt;Select the commits to squash, right-click, choose &amp;quot;Squash commits...&amp;quot;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/b160e596e1b44a2c99610fa550574124.png" alt="72e0fc55a21c062f8e00eb9f3af21467.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/7f26fb5ea2fc4feb835d26e460d1c7cb.png" alt="42865a089fe639c93271b70295a68f3d.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Visual Studio's &amp;quot;Squash Commits&amp;quot; dialog is surprisingly terrible. You effectively can't edit the text, because A) there's no way to create a soft return, and B) you can't paste more than the top line of copied text.&lt;/p&gt;
&lt;p&gt;Until it's better, I recommend using the command line for squashing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="checkout-and-synchronize-master"&gt;Checkout and Synchronize Master&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/4247d340e64547e18e9c2f029268e8ca.png" alt="9d26612a714f0fa28863d54bbbf77b66.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/0a90d19c67d348adb50c41dad5d8cde1.png" alt="35f579bba4a8184b23c869eba0daf1f5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/17ecfcd77a034a1e9bbaf058ea439eb2.png" alt="a21d807d67769575d76026ed837b8d39.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/d48f77d71573440cb0b8bc68bbff52c0.png" alt="2d69bff4e05bca1b78988e9a5c2d95ac.png" /&gt;&lt;/p&gt;
&lt;h3 id="checkout-and-rebase-feature-onto-master"&gt;Checkout and Rebase Feature Onto Master&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git checkout feature-1&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git rebase master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/eefbbc82a8f849e9aec5430520006621.png" alt="e32a0e0f368f590511a459b46d8b9e10.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/03f2a83e4da64e718be250ac7cb30595.png" alt="4dfbf5cbdba3900185bcc5d65e3583e1.png" /&gt;&lt;/p&gt;
&lt;h3 id="checkout-and-merge-feature-into-master"&gt;Checkout and Merge Feature Into Master&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git merge feature-1 --no-ff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/4247d340e64547e18e9c2f029268e8ca.png" alt="9d26612a714f0fa28863d54bbbf77b66.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/2d68e0ea94714545bace10749edd9173.png" alt="081e72e7927dc10242f22af4b4e4b72a.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/6b2421e1e0fd414fa8c91f63facbe339.png" alt="3846c6938dca5a4f98eabe249d05c7f5.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Visual Studio doesn't appear to have a &lt;code&gt;--no-ff&lt;/code&gt; option. Because of the value to a good history, I recommend doing the final commit at the command line using an alias.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It possible to set Git to always use &lt;code&gt;--no-ff&lt;/code&gt; via the &lt;code&gt;merge.ff false&lt;/code&gt; option. However, this will only work in your local instance unless a repository-specific config file is used and committed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's how that commit looks after using &lt;code&gt;--no-ff&lt;/code&gt; at the command line. Notice how much clearer it is in both the command window and Visual Studio&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/33f4eacd08d546bf8161ea96a07bf0c6.png" alt="50591bd7eef98c1ca4a6ce8fe50b7de8.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/a13c3fa8a4174de6aae0065741548eed.png" alt="27def2246530c8a31c8a548c1b32f05b.png" /&gt;&lt;/p&gt;
&lt;h3 id="push-changes-to-the-remote-server"&gt;Push Changes to the Remote Server&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/2f17ebf42952430fa19c9151a0ea8594.png" alt="16c89e011e40d24dd6384644f134357c.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/af3613bb2a134f4f85d0fc42b5d5e52a.png" alt="14db281f2c515fd6c663d0249abf073b.png" /&gt;&lt;/p&gt;
&lt;h3 id="delete-the-branch"&gt;Delete the Branch&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git branch -d feature-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/f0ea4f860eaa4cd98c5c814362fa53d9.png" alt="6bd13d905ef6da80cf15c4c379bf22c7.png" /&gt;&lt;/p&gt;
&lt;h2 id="common-operations"&gt;Common Operations&lt;/h2&gt;
&lt;h3 id="checkout"&gt;Checkout&lt;/h3&gt;
&lt;p&gt;Checkout means to set your working folder to a particular point in time. You're always choosing a reference hash of a &amp;quot;root&amp;quot;. However, you can use branch and tag names because they &amp;quot;point&amp;quot; to a particular reference.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git checkout master
git checkout feature-1
git checkout origin\master
git checkout head
git checkout head~3
git checkout v2.35.9
git checkout f935ea4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="branch"&gt;Branch&lt;/h3&gt;
&lt;p&gt;With the above information about how Git works, you should now understand what people mean by &amp;quot;a branch is a pointer to a reference.&amp;quot;&lt;/p&gt;
&lt;p&gt;You may not use the branch command to create a branch very often. Typically, you'll create and checkout a branch in a single step using this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b feature-1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That single command runs these two commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git branch master feature-1
git checkout feature-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other branch commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;branch -d feature-1
branch -D featue-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="add-stage"&gt;Add (stage)&lt;/h3&gt;
&lt;p&gt;Adds changes to the index, to be committed.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git add -A
git add Test.txt
git add Models/Customer.cs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="commit"&gt;Commit&lt;/h3&gt;
&lt;p&gt;Commits staged changes (in the index) to the repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;commit
commit -m 'Allow GetCustomer to show addresses'
commit -amend (changes history)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You'll often amend a commit if, for example, you realized you forgot to add a file, or mispelled something in the commit message.&lt;/p&gt;
&lt;p&gt;For example, assume this history:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;1234567 Fix spelling erors
1234568 Fix my wrong spelling fix
1234569 Add marketing copy
123456A Remove temporary files
123456B Add history file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After committing &amp;quot;Fix spelling erors&amp;quot;, you realize you not only forgot to add the latest spelling file, but also mispelled &amp;quot;errors.&amp;quot; You'd execute something like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git add spelling.dat
git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The editor would open, and you could either change the message or--more likely--just close the editor. Here's how the result might look.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;afgec73 Fix spelling errors
1234568 Fix my wrong spelling fix
1234569 Add marketing copy
123456A Remove temporary files
123456B Add history file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's the important thing to notice: &lt;strong&gt;The &amp;quot;fix spelling errors&amp;quot; commit's ref hash has changed.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="merge"&gt;Merge&lt;/h3&gt;
&lt;p&gt;Merges changes from another branch into the current branch. You must have the destination branch checked out. For example, in order to merge the changes from the &lt;code&gt;feature-1&lt;/code&gt; branch into the &lt;code&gt;master&lt;/code&gt; branch, you must first be in the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git checkout master
git merge feature-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="rebase-changes-history"&gt;Rebase (changes history)&lt;/h3&gt;
&lt;p&gt;Rebase has two main uses. The first is to modify a set of commits, usually combining (&amp;quot;squashing&amp;quot;) them, so that the resulting commits are &amp;quot;the way it should have been&amp;quot;. For example, let's say you have these five commits in a local feature branch.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;1234567 Fix spelling errors
1234568 Fix my wrong spelling fix
1234569 Add marketing copy
123456A Remove temporary files
123456B Add history file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using interactive rebase, you could revise this to two commits:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;987ABCD Fix spelling errors
987AGF2 Add history file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the original file reference hashes were not reused. &lt;em&gt;New&lt;/em&gt; commits were created. It's as if these new commits had always been the &lt;em&gt;only&lt;/em&gt; commits.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, those other five commits still exist in the reflog if needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git rebase -i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a screen that guides you through the changes.&lt;/p&gt;
&lt;p&gt;The second use is making your branch's commits seem like they were just done so that they appear as the latest commits on another branch. For example, you're working on your feature branch and have cleaned up your commits. Now you want to merge your changes into master, so you checkout master and pull.&lt;/p&gt;
&lt;p&gt;The problem is, while you were working, someone else committed changes to master. So now your changes are &lt;em&gt;behind&lt;/em&gt; that other person's. If you were to merge your changes, then view history, they'd be kind of jumbled in. Instead, you want your changes to appear after the other person's.&lt;/p&gt;
&lt;p&gt;To do that, you rebase your changes onto master. Git will temporarily reset your branch to when you originally branched, merge the latest changes from master into your branch (making them identical), then &lt;em&gt;replay&lt;/em&gt; your commits on top of this history. Each of your commits is treated as new, so it gets a new reference hash.&lt;/p&gt;
&lt;p&gt;The command sequence to do this is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git checkout master
git pull
git checout feature-1
git rebase master
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;There's a chance you'll need to resolve conflicts between your changes and the other persons.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="check-status"&gt;Check Status&lt;/h3&gt;
&lt;p&gt;Shows which files are modified, new, or deleted. Also shows which files are staged.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="check-history"&gt;Check History&lt;/h3&gt;
&lt;p&gt;Shows information about commits.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git log
git log --graph --oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="revert"&gt;Revert&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;revert&lt;/code&gt; command &amp;quot;unapplies&amp;quot; a set of commits that appear after a commit in history, and creates a new commit at the top. Let's say you have this history.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;6293daae maybe ok 
fec62970 mistake 2
96ca7600 mistake 1
bac6d253 working fine
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;// reverts the top three commits
git revert 96ca7600^..6293daae


// reverts the middle two commits
git revert 96ca7600^..fec62970
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each commit that's reverted gets its own new commit. After each reversion, you need to enter &lt;code&gt;git revert --continue&lt;/code&gt; until all reversions are complete.&lt;/p&gt;
&lt;h3 id="reset-changes-history"&gt;Reset (changes history)&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;reset&lt;/code&gt; command undoes a set of commits starting at the latest. It does &lt;em&gt;not&lt;/em&gt; create a new commit. It effectively throws away the changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Basically, the HEAD file is updated to point to the given ref hash. In the example below, HEAD would change from 6293daae to bac6d253. The only other question is whether the commit changes are retained in some way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given this history,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;6293daae maybe ok 
fec62970 mistake 2
96ca7600 mistake 1
bac6d253 working fine
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the common ways to use the command to remove the top three commits.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset bac6d253&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The default command executes in --mixed mode. The index is reset, but the working folder is left alone. This means any changes are ready to add and commit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset bac6d253 --soft&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The index is &lt;em&gt;not&lt;/em&gt; reset, nor is the working folder. Any changes are already added and ready to commit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset bac6d253 --hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Both the index and working folder are reset. All changes are lost.&lt;/p&gt;
&lt;h3 id="tag"&gt;Tag&lt;/h3&gt;
&lt;p&gt;There are two kinds of tags: annotated and lightweight. Annotated tags are meant for release (such as pushing to the remote repository), while lightweight tags are good for local use and cannot be pushed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Personally, I only use annotated tags.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List all tags&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a lightweight tag at the HEAD&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag temp1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create annotated tag at the HEAD, with a message of the same text&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -a v1.2.4 -m v1.2.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Delete a tag&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -d v1.2.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Force an existing tag onto a different commit&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -a -f 63fac95&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="the-rules-for-teams"&gt;The Rules For Teams&lt;/h2&gt;
&lt;p&gt;Git is powerful, and one of its powers comes with a risk. That is the power to &amp;quot;rewrite history.&amp;quot; What this means in practice is that a user could push changes to a remote repository that conflict with existing log entries others have already pulled. I show an example below, but first here are the rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Don't push changes from &lt;code&gt;rebase&lt;/code&gt;,&lt;code&gt;revert&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, or &lt;code&gt;tag&lt;/code&gt; if you've previously pushed the affected commits.&lt;/li&gt;
&lt;li&gt;Rebase features onto master, then merge features into master.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, here's an example of an easy mistake to make. The user is on the master branch, commits locally, pushes to the remote, then amends the commit and pushes again.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;git commit -m &amp;quot;All done!&amp;quot;
git log --graph --oneline
  afea725 All done!
  7c934ag Pass all tests

git push
--Forgot to add some files!
git add --all
git commit --amend -m &amp;quot;All done!&amp;quot; &amp;lt;= gets a warning
git pull &amp;lt;= thinks this is the right thing to do, but it isn't
git commit --amend -m &amp;quot;All done!&amp;quot;
git log --graph --oneline
  024ag7d All done!
  7c934ag Pass all tests

git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the &amp;quot;All done!&amp;quot; commit's reference hash is different after being amended. The problem above would be compounded if the user didn't amend the commit for awhile.&lt;/p&gt;
&lt;p&gt;What if developer B pulls from the server after user A's first push? B will have a history that includes ref &lt;code&gt;afea725&lt;/code&gt;. In the meantime, the A amends and pushes. Now B pulls. Does her ref &lt;code&gt;afea725&lt;/code&gt; magically disappear? No. She ends up with something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-git"&gt;  024ag7d All done!
  afea725 All done!
  7c934ag Pass all tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, it could be worse. User A could force the amended commit. This will lead B to getting an even worse history.&lt;/p&gt;
&lt;p&gt;The problems arising from using the other commands that change history are similar.&lt;/p&gt;
&lt;p&gt;Second, if a user doesn't rebase features onto master, then this leads to an unclear history where the branch the user just finished and is pushing to the remote server looks as if it was done a week ago (or whatever). That's because, according to the history, it has. But that's not what the user intended.&lt;/p&gt;
&lt;h2 id="solving-common-problems"&gt;Solving Common Problems&lt;/h2&gt;
&lt;h3 id="pull-merge-and-rebase-conflicts"&gt;Pull, Merge and Rebase Conflicts&lt;/h3&gt;
&lt;p&gt;The first time I encountered a merge conflict, I was utterly &lt;a href="https://www.dictionary.com/browse/flummox"&gt;flummoxed&lt;/a&gt;. I didn't understand what to do, and I was definitely confused by whether my local files were actually &amp;quot;local&amp;quot; or &amp;quot;remote&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's a message from trying to push changes that conflict with local changes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/dab337fda0444befb3c250f0da10859d.png" alt="69d8820294e311fe814870be03de14d8.png" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;Error: hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Error encountered while pushing to the remote repository: rejected Updates were rejected because the remote contains work that you do not have locally. This is usually caused by another repository pushing to the same ref. You may want to first integrate the remote changes before pushing again.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we do what we're told and try to pull.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/61e153c157ba4c1f9b3b51088b2ba0a2.png" alt="d7d0d0f7dddc3c2971ccb392e65b6910.png" /&gt;&lt;/p&gt;
&lt;p&gt;We're now in the midst of resolving a merge conflict. At this point we have two options: resolve the conflict, or abort. If we abort, it's as if the pull never happened.&lt;/p&gt;
&lt;p&gt;To visually merge the files, click &amp;quot;Conflicts: 1&amp;quot;, then select a file that has a conflict.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/bd246b9b8fdf4a94a435c0e7496d965a.png" alt="a7b756d8efc2495e6ea4f652b111ee50.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/342e36015852460fb51eb06d640f1e5c.png" alt="47b2758f25fe31fa6f8fe2659855627c.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/2d8b7f0aeed247b79d3a1769b0cbf4d9.png" alt="a76231cdf708eb9070d7fb8dbef685d7.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are several options for comparing and merging files. The one we'll look at is the three-way merge. Click Merge. This will run whatever merge tool you've configured Git to use.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I've used KDiff3 for years because it's very clear about where the conflict is. However, since this article is about using Visual Studio, that's what I'll demonstrate. It looks like Microsoft has improved Visual Studio's diff/merge quite a bit, which is good!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/3e369ebec9594156b5b8bef6a401dfa0.png" alt="7ac96fb74ef0e5e5cb024288e58fb1bd.png" /&gt;&lt;/p&gt;
&lt;p&gt;Choose which version you want to keep, the left or right &lt;em&gt;or both&lt;/em&gt;. You can also type directly into the base. We'll take the left (our) change, Accept Merge, and close the editor.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/190f0d2bf8904fa6bb3fc9326b3fcc1f.png" alt="7fa4131d5f8f086fd3a2177b401ac653.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, commit the merge.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/81d0453964fa4dda899377a83cf64716.png" alt="071afeda9a3ac3898e7b02244d7daabb.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/aa4d8e8e4e4e46fc9b897fbb9c8c9cfc.png" alt="fec0a2bf91ee0811825e6fabbbf8e6d7.png" /&gt;&lt;/p&gt;
&lt;p&gt;And, you're ready to push.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019/images/6dbad3fbd9794386b4012289003a7c30.png" alt="382ecb4efcec7315a3c9dbfd8e394526.png" /&gt;&lt;/p&gt;
&lt;h3 id="remote-vs-local-plus-base-and-backup"&gt;Remote vs Local, plus Base and Backup&lt;/h3&gt;
&lt;p&gt;The &amp;quot;base&amp;quot; file is easy to understand; it's the version that's common to both of the changed versions prior to when they diverged.&lt;/p&gt;
&lt;p&gt;If you're dealing with a merge conflict from another developer, that's easy, too. The Remote will be their file, and Local will be yours.&lt;/p&gt;
&lt;p&gt;But what if there's a conflict locally between two branches? For example, what if you&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Branch from master into feature, commit a change there&lt;/li&gt;
&lt;li&gt;Go back to master and commit a change there&lt;/li&gt;
&lt;li&gt;Try to merge feature into master OR rebase feature onto master&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Visual Studio makes this pretty easy by using clearer terminology.&lt;/p&gt;
&lt;p&gt;In the case of &lt;strong&gt;Merge&lt;/strong&gt;, the &lt;code&gt;master&lt;/code&gt; branch file is the Target, and the &lt;code&gt;feature&lt;/code&gt; file is the Source. If you used the command &lt;code&gt;git mergetool&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt; would be LOCAL and &lt;code&gt;feature&lt;/code&gt; would be REMOTE.&lt;/p&gt;
&lt;p&gt;In the case of &lt;strong&gt;Rebase&lt;/strong&gt;, it's the same: 'master&lt;code&gt;is Target/LOCAL, and&lt;/code&gt;feature` is Source/REMOTE.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Merge vs Rebase terminology is what confuses people, so let's repeat it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If I'm on &lt;code&gt;master&lt;/code&gt; branch and &lt;strong&gt;merge&lt;/strong&gt;, &lt;code&gt;master&lt;/code&gt; is Target/LOCAL&lt;/li&gt;
&lt;li&gt;If I'm on &lt;code&gt;feature&lt;/code&gt; branch and &lt;strong&gt;rebase&lt;/strong&gt;, &lt;code&gt;master&lt;/code&gt; is &lt;em&gt;still&lt;/em&gt; Target/LOCAL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target is whichever branch you're merging &lt;em&gt;into&lt;/em&gt;, or rebasing &lt;em&gt;onto&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If Git is configured to keep backups of the file before merging begins (mergetool.keepBackup = true), after the merge is committed there will be files with a .backup extension. These need to be cleaned up.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clean -f&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I suggest setting the config file's mergetool.keepBackup to false. Several times I've accidentally added the backup files to a commit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="last-word"&gt;Last Word&lt;/h2&gt;
&lt;p&gt;Git's powerful, at times confusing, always complex, and frequently complicated. Hopefully this article has given you a solid foundation in Git's basics.&lt;/p&gt;
</description>
      <pubDate>Sun, 29 Dec 2019 19:30:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/git_basics_with_visual_studio_2019</guid>
    </item>
    <item>
      <title>TFS/Azure DevOps: Building and Releasing Git Branches, A Simple Example</title>
      <description>&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-situation"&gt;The Situation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#implementation"&gt;Implementation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#git"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tfs-build"&gt;TFS Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tfs-release"&gt;TFS Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-freeze"&gt;Code Freeze&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-situation"&gt;The Situation&lt;/h2&gt;
&lt;p&gt;The development teams run on a two-week release cycle. The final three days of the cycle they are in code freeze. Code is deployed to two environments: Test and Production.&lt;/p&gt;
&lt;p&gt;During code freeze:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start, all repos are built and released to Test. This is the production code.&lt;/li&gt;
&lt;li&gt;Newly developed code must be committed to the repository and built, but it must &lt;em&gt;not&lt;/em&gt; be released to Test.&lt;/li&gt;
&lt;li&gt;At the end, all production code is deployed to Production, and newly developed code is deployed to Test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, the teams want to have just one build and one deployement definition for each solution.&lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;h3 id="git"&gt;Git&lt;/h3&gt;
&lt;p&gt;Git is configured with two long-lived branches: master and development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developers always work against the development branch, pushing their local, short-lived feature branches.&lt;/li&gt;
&lt;li&gt;At code freeze, development is merged into master.&lt;/li&gt;
&lt;li&gt;If there are emergency production deployments, ideally they're made first to deployment and then to master. If they're made directly to master then the changes need to be merged into development (or, ideally, development is rebased onto master)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tfs-build"&gt;TFS Build&lt;/h3&gt;
&lt;p&gt;The build definition is configured with Triggers, specifically Branch filters for both master and development branches. Continuous Integration is enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_08-55-31.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This allows commits to both development and master branches to trigger the build.&lt;/p&gt;
&lt;h3 id="tfs-release"&gt;TFS Release&lt;/h3&gt;
&lt;p&gt;The deployment definition is configured in the following way:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-18-00.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Artifacts&lt;/strong&gt;&lt;br /&gt;
There's a single artifact with a Source type of Build. The Source is the build definition.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-18-03.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Continuous deployment is enabled, and both branches are allowed.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-18-55.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Environments&lt;/strong&gt;&lt;br /&gt;
Both environments use the After release trigger.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Test Environment&lt;/em&gt;&lt;br /&gt;
The artifact filters include both branches&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-21-51.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;In the sample, a Copy Files task is used to move the binaries to their release folder. While not required for the solution, it demonstrates using variables to create release subfolders. In this case, folders for branch and build number are created. Also note the Overwrite and Flatten Folders checkboxes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-43-07.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Production Environment&lt;/em&gt;&lt;br /&gt;
The differences between this and the Test environment are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only the master branch is included in the artifact filters&lt;/li&gt;
&lt;li&gt;Approvers are added&lt;/li&gt;
&lt;li&gt;Only the latest build is deployed upon approval&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-45-58.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-46-23.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_09-48-16.png" alt="" /&gt;&lt;/p&gt;
&lt;h3 id="code-freeze"&gt;Code Freeze&lt;/h3&gt;
&lt;p&gt;What has to happen during the code freeze?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Development branch commits don't deploy. That's it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are at least two ways to prevent development branch deployments during code freeze.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add a build tag using a custom task that checks for the presense of a particular file. A custom build task would be used for this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, I don't have an example of this. But I've seen it done in a real-world environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a Gated release. For example, check a web service endpoint. If it fails to return, you're in code freeze and the gate fails.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Recommendation: Stick with build tags&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The disadvantage to tagging builds is that the custom task needs to be added to each build definition. The advantage is that the tag is part of the artifact trigger.&lt;/p&gt;
&lt;p&gt;The disadvantage to gates is that there's a required timeout period of at-minimum 6 minutes before the gate fails. The advantage is that build definitions don't need to create tags.&lt;/p&gt;
&lt;p&gt;REST API Gate Sample&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_12-22-08.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example/ScreenCap_2019-12-11_12-22-35.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Web API Endpoint Sample&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;   public class InCodeFreezeController : ApiController
    {
        public IHttpActionResult Get()
        {
            //IsInCodeFreeze checks some condition. Could be the same file-existence
            //check that's used for tagging today.
            //Not ideal, but simpler for TFS Gate to just fail the request
            if (IsInCodeFreeze)
            {
                return BadRequest();
            }
            return Ok();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Thu, 12 Dec 2019 18:34:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/tfs_azure_devops__building_and_releasing_git_branches,_a_simple_example</guid>
    </item>
    <item>
      <title>Who Are You Coding For?</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/who_are_you_coding_for_/images/The_bones_of_a_bridge.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="the-lesson"&gt;The Lesson&lt;/h2&gt;
&lt;p&gt;Consider this brief, hypothetical exchange between two developers, maybe in a meeting where others are present.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer 1&lt;/strong&gt;: &amp;quot;...so, I solved the problem this way. This causes e.Data to overwrite the previous line.&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;bool overwrite = e.Data.Contains(&amp;quot;.....&amp;quot;);

WriteLog(e.Data, overwrite);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Developer 2&lt;/strong&gt;: &amp;quot;You know you could just include the condition in the WriteLog call. You don't need to go to the trouble of  setting a variable.&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;WriteLog(e.Data, e.Data.Contains(&amp;quot;.....&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Developer 1&lt;/strong&gt;: &amp;quot;Sure. So, why did I?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer 2&lt;/strong&gt;: &amp;quot;Huh?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer 1&lt;/strong&gt;: &amp;quot;Why did I use a variable?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer 2&lt;/strong&gt;: &amp;quot;I don't know.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer 1&lt;/strong&gt;: &amp;quot;Because I'm not coding for me today. I'm coding for other developers, and my future self. I want it to be as easy for them as possible to understand what this code is doing.&amp;quot;&lt;/p&gt;
&lt;h2 id="why-i-wrote-this"&gt;Why I wrote this&lt;/h2&gt;
&lt;p&gt;My grandfather was once desribed as a bridge-builder. Even if he were (metaphorically) crossing a river just once, he'd build a bridge for whoever came after him.&lt;/p&gt;
&lt;p&gt;Think about this as you make coding, architectural, and documentation decisions. What you do will affect someone in the future. Are you focused on finishing now, as fast as possible? Or crafting your code so that someone thanks you later on.&lt;/p&gt;
&lt;p&gt;Who are you coding for?&lt;/p&gt;
</description>
      <pubDate>Sun, 20 Oct 2019 18:36:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/who_are_you_coding_for_</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/who_are_you_coding_for_</guid>
    </item>
    <item>
      <title>The ViewService Pattern: Especially Good For Windows Forms</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_viewservice_pattern__especially_good_for_windows_forms/images/form.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Windows Form development is still happening, is fast, and is reasonably easy to understand how to get started with. It's event-driven and hasn't changed much since Visual Basic. You drag controls onto a canvas, double-click the controls to open their event methods, and write what's supposed to happen.&lt;/p&gt;
&lt;p&gt;Thus, Frankenstein's monster was born.&lt;/p&gt;
&lt;p&gt;I'm taming the monster with a pattern I'm calling the ViewService. I won't create a Gang of Four class diagram, but basically a ViewService is a way of separating the code that manages ViewModels, and is a useful approach in Windows Forms. It's directly analagous to domain services and models.&lt;/p&gt;
&lt;p&gt;How often have you written or maintained code that looks like this? (note this is pseudocoding, not actual code.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class MainForm
{
    void buttonLoadData(object sender, EventArgs e)
    {
        var cn = new Connection(_connString);
        var cmd = new Command(cn, &amp;quot;select a.*, b.* from Customer a join Order b on a.CustomerId = b.CustomerId&amp;quot;);
        var reader = cmd.ReadResults();
        until (reader.Eof)
        {
            var co = ConvertReaderToCustomerOrder(reader.Read());
            grid1.Row.Add(new Row(co.Name, co.Zip);
            AddOrdersToGridRow(grid1.Rows[grid1.Rows.Length-1], co)
            if (co.Type = 1) { grid1.Rows[grid1.Rows.Length-1].BackgroundColor = Blue;}
            else if (co.Type = 3) { grid1.Rows[grid1.Rows.Length-1].BackgroundColor = Orange;}
        }
        
    }
    
    void AddOrdersToGridRows(Row row, CustomerOrder order, Connection cn)
    {
        foreach (var orderitem in order.Orders)
        {
            var cmd = new Command();
            cmd.Connection = cn;
            cmd.CommandText = String.Format (&amp;quot;select * from lineitems where OrderId = %1&amp;quot;,  orderitem.OrderId);
            var items = ToLineItems(cmd.ExecuteQuery());
            row[&amp;quot;Items&amp;quot;] = AddItemsToGrid(items, row);
            if (order.Type = 3 and items.Count() &amp;gt; 15) {row.BackgroundColor = Red;}
        }
        CheckIfMoreOrdersHaveArrivedAndPrintThem();
        
    }
    
    void buttonRefreshData(object sender, EventArgs e)
    {
        buttonLoadData(sender, e);
    }
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problems with the above code could occupy us for awhile, and they add up to one word: complication.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Events are doing too many things&lt;/li&gt;
&lt;li&gt;Events are called directly&lt;/li&gt;
&lt;li&gt;Tight coupling&lt;/li&gt;
&lt;li&gt;Inconsistent naming and coding style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how I recommend clearing up this kind of code by applying the ViewService pattern.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Group form events together&lt;/li&gt;
&lt;li&gt;Group together methods that only apply to this form&lt;/li&gt;
&lt;li&gt;Group methods that could apply to a &lt;strong&gt;replacement&lt;/strong&gt; form together, potentially into a service&lt;/li&gt;
&lt;li&gt;Form events present data, or call a method to preserve data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's apply these steps to the above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The code below is pretty sparse and incomplete. The goal is to give you the idea of what to do, not provide a full-fledged implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="group-form-events-and-methods"&gt;Group form events and methods&lt;/h2&gt;
&lt;p&gt;This is organizational, and clarifies what the &lt;em&gt;user&lt;/em&gt; is doing vs what the &lt;em&gt;developer&lt;/em&gt; is doing. (Methods collapsed for clarity.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
+ void AddOrdersToGridRows(Row row, CustomerOrder order, Connection cn)...

#region &amp;quot;Control Events&amp;quot;

+ void buttonLoadData(object sender, EventArgs e)...
+ void buttonRefreshData(object sender, EventArgs e)...

#endregion

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="better-methods-and-names-and-events-call-custom-methods-instead-of-being-treated-as-custom-methods"&gt;Better methods and names, and events &lt;em&gt;call&lt;/em&gt; custom methods instead of being &lt;em&gt;treated&lt;/em&gt; as custom methods&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class MainForm
{
    List&amp;lt;CustomerOrderView&amp;gt; _customerOrders = new List&amp;lt;CustomerOrderView&amp;gt;();
    
    + void GetData()...
    + void LoadControls()
    
    void buttonLoadData(object sender, EventArgs e)
    {
        GetData();
        LoadControls();
    }
    void buttonCancel(object sender, EventArgs e)
    {
        LoadControls();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Already, we're gaining clarity.&lt;/p&gt;
&lt;h2 id="separate-the-data-calls-into-a-viewservice"&gt;Separate the data calls into a ViewService&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine the ViewService is going to be resued in a web application. That means it doesn't accept or process form controls, and is UI agnostic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the same Dependency Injection pattern used in web applications. The difference is that CustomerOrderViewService isn't a domain service, it's specific to this view of the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
class MainForm 
{
    ICustomerOrderViewService _customerOrderViewService = null;
    List&amp;lt;CustomerOrderView&amp;gt; _customerOrders = new List&amp;lt;CustomerOrderView&amp;gt;();

    
    + void MainForm(ICustomerOrderViewService)...
    
    void GetData()
    {
        _customerOrders = _customerOrderViewService.Get(txtCustomerId.Text);
    }
    
    void LoadControls()
    {
        if (_customerOrders == null) { GetData(); }
        gridOrders.DataSource = _customerOrders;
    }

}

//These two classes would be in separate files, and *could* be in a separate namespace
//to emphasize the decoupling.

class CustomerOrderViewService: ICustomerOrderViewService
{
    ICustomerOrderService _customerOrderService = null;
    
    + public CustomerOrderViewService(ICustomerOrderService _customerOrderService)...
    

    public List&amp;lt;CustomerOrderView&amp;gt; Get(string customerId)
    {
        //This is the call to the *domain service*. It might call the database directly, or might in turn call a web api.
        
        //Returns type CustomerOrder
        var customerOrders = _customerOrderService.GetOrdersByCustomer(string customerId);
        
        //Mapping
        return customerOrders.Select(a =&amp;gt; a.ToCustomerOrderView());
    }
    
}

class static CustomerOrderViewServiceHelpers
{
    public static ToCustomerOrderView (this CustomerOrder customerOrder)
    {
        return new CustomerOrderView()
        {
            Name = customerOrder.Name,
            CustomerType = customerOrder.CustomerType,
            etc....
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-happy-wrap-up"&gt;The Happy Wrap Up&lt;/h2&gt;
&lt;p&gt;By applying the ViewService pattern, we can separate Windows Form code into cleaner areas of concern, making our code clear, testable, maintainable and replaceable.&lt;/p&gt;
</description>
      <pubDate>Sun, 13 Oct 2019 12:03:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_viewservice_pattern__especially_good_for_windows_forms</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_viewservice_pattern__especially_good_for_windows_forms</guid>
    </item>
    <item>
      <title>Most of Us Developers Aren't Smart</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/most_of_us_developers_arent_smart/images/light-bulbs-styled-after-felix-gonzalez-torres.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Most of us developers think we're smart. But we aren't smart. We're clever.&lt;/p&gt;
&lt;p&gt;And confused.&lt;/p&gt;
&lt;p&gt;You can easily prove this by looking at our code. Specifically, by answering these questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many layers of indirection are there?&lt;/li&gt;
&lt;li&gt;How many abstractions of abstractions are there?&lt;/li&gt;
&lt;li&gt;How many different things are our methods doing?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Combined, these reveal how complicated a set of code is.&lt;/p&gt;
&lt;p&gt;What we do as developers is complex. There are lots of little moving parts that all need to work together.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Complex: composed of many interconnected parts; compound; composite&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Complicated: difficult to analyze, understand, explain, etc.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because we're clever, we think we understand how to manage this complexity. But we don't. We're confused by it. So, instead of making the complex clear, we complicate it. We add stuff that makes those moving parts harder to understand (over-use of indirection and abstraction), and harder to work together (method multi-responsibility).&lt;/p&gt;
&lt;p&gt;No one likes to hear this or face it in themselves. But we face it too often when supporting others' code. It comes with that little, internal question, &amp;quot;Couldn't this be easier?&amp;quot;&lt;/p&gt;
&lt;p&gt;So, what do we do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, decide that &amp;quot;we&amp;quot; applies to &amp;quot;you.&amp;quot; It's better to start with this assumption because it leads to learning rather than avoidance. If I insist I'm smart, I won't make the effort to learn better--thus, not smart. But if I insist I can be better, no matter how good I am, then the path to improvement and away from stagnation opens long and wide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, find examples of complex code that isn't complicated. Open source projects coming out of Microsoft and Google are good starting points.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, Read about and apply the principles behind uncomplicating code. Three of these are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, be guided by four overarching principles in your architecture and coding. Make your code...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clear&lt;/li&gt;
&lt;li&gt;Maintainable&lt;/li&gt;
&lt;li&gt;Testable&lt;/li&gt;
&lt;li&gt;Replaceable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We may not &lt;em&gt;be&lt;/em&gt; smart, but be can code smarter.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;strong&gt;Complex&lt;/strong&gt; 1645–55; 1905–10 for def 7; (adj.) &amp;lt; Latin complexus, past participle of complectī, complectere to embrace, encompass, include, equivalent to complect- (see complect) + -tus past participle suffix; (noun) &amp;lt; Late Latin complexus totality, complex (Latin: inclusion, grasping, embrace), equivalent to complect(ere) + -tus suffix of v. action; reanalysis of the Latin v. as “to intertwine (completely)” has influenced sense of the adj.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;strong&gt;Complicated&lt;/strong&gt; 1615–25; &amp;lt; Latin complicātus (past participle of complicāre to fold together), equivalent to com- com- + -plic- (combining form of *plecāre to fold, akin to plectī to plait; see complex) + -ātus -ate1&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 13 Oct 2019 11:15:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/most_of_us_developers_arent_smart</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/most_of_us_developers_arent_smart</guid>
    </item>
    <item>
      <title>Confirmed Android text punctuation voice commands</title>
      <description>&lt;p&gt;This is what I've confirmed can be done on an Android phone. (From what I've read, Apple is superior in its speech-recognition of punctuation.)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Enter once then capitalize&lt;/td&gt;
&lt;td&gt;&amp;quot;new line&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter twice then capitlize&lt;/td&gt;
&lt;td&gt;&amp;quot;new paragraph&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;&amp;quot;period&amp;quot; &amp;quot;dot&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;&amp;quot;question mark&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&amp;quot;exclamation point&amp;quot; &amp;quot;exclamation mark&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;&amp;quot;comma&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&amp;quot;hyphen&amp;quot; &amp;quot;dash&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;&amp;quot;percent sign&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:-)&lt;/td&gt;
&lt;td&gt;&amp;quot;smiley face&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:-(&lt;/td&gt;
&lt;td&gt;&amp;quot;sad face&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;&amp;quot;dot dot dot&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      <pubDate>Sun, 6 Oct 2019 15:17:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/confirmed_android_text_punctuation_voice_commands</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/confirmed_android_text_punctuation_voice_commands</guid>
    </item>
    <item>
      <title>Summary of "Accelerate State of DevOps 2019"</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/summary_of_accelerate_state_of_devops_2019/images/ScreenCap_2019-10-03_22-02-21.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This year's report from DevOps Research and Assessment (DORA) starts with &lt;a href="https://cloud.google.com/blog/products/devops-sre/the-2019-accelerate-state-of-devops-elite-performance-productivity-and-scaling"&gt;The 2019 Accelerate State of DevOps: Elite performance, productivity, and scaling&lt;/a&gt;, which links to more detailed information.&lt;/p&gt;
&lt;p&gt;DORA provides, in my opinion, the best researched information on DevOps available. Making implementation decisions based on their insights is a safe bet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The report provides a comprehensive view of the DevOps industry.... With six years of research and data from more than 31,000 professionals worldwide, the 2019 Accelerate State of DevOps Report is the largest and longest-running research of its kind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My notes, below, are primarily quotes from the reports, even when I haven't explicitly quoted the text. Spelling/grammar mistakes are mine, and I'm sure I'll hear about them from my wife.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You really should download and read the report. I haven't captured everything here, just what caught my attention.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#highlights-from-the-summary"&gt;Highlights from the summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-quick-assessment"&gt;The Quick Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-full-report"&gt;The Full Report&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#executive-summary"&gt;Executive Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#who-took-the-survey?"&gt;Who Took the Survey?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demographics-and-firmographics"&gt;Demographics and Firmographics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-elite-performers...perform?"&gt;How do Elite Performers...Perform?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-reserch-models"&gt;The Reserch Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#software-delivery-&amp;amp;-operational-performance"&gt;Software Delivery &amp;amp; Operational Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#productivity"&gt;Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-we-transform:-what-really-works"&gt;How Do We Transform: What Really Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-thoughts."&gt;Final Thoughts.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-info"&gt;More Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="highlights-from-the-summary"&gt;Highlights from the summary&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;From 2018 to 2019, &amp;quot;elite&amp;quot; performers rose from 7% to 20% of all organizations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've called out the above because it dramatically &amp;quot;shows that excellence is possible—those that execute on key capabilities see the benefits.&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;For the first time, industry matters&amp;quot; Retail performed better in speed and stability. But that doesn't impact the evidence that all organizations can benefit from DevOps.&lt;/li&gt;
&lt;li&gt;&amp;quot;[T]he highest DevOps performers (that is, the high and elite performers), focus on structural solutions that build community&amp;quot;&lt;/li&gt;
&lt;li&gt;Low performers use more proprietary software, high and elite performers use more open source software. Reason? cost.&lt;/li&gt;
&lt;li&gt;The detailed report has two research models: performance and productivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This year’s report revalidates important findings for the sixth year in a row: First, that it’s possible to optimize for stability without sacrificing speed. Second, DevOps delivers value to customers and end users by impacting both commercial and non-commercial goals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-quick-assessment"&gt;The Quick Assessment&lt;/h2&gt;
&lt;p&gt;DORA provides on line the same assessment they ask of organizations. It'll give you a quick understanding of where your business stands compared to others in the same industry. I've listed the metrics in the Executive Summary section, below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.devops-research.com/quickcheck.html"&gt;DevOps quick check&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-full-report"&gt;The Full Report&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.google.com/devops/state-of-devops/"&gt;Download the full report&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="executive-summary"&gt;Executive Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Our research continues to show that the industry-standard &lt;a href="https://www.thoughtworks.com/radar/techniques/four-key-metrics"&gt;Four Key Metrics&lt;/a&gt; of software development and delivery drive organizational performance in technology transformations.&amp;quot;
&lt;ul&gt;
&lt;li&gt;Lead time (time from code committed to code released to production)&lt;/li&gt;
&lt;li&gt;Deployment frequency&lt;/li&gt;
&lt;li&gt;Mean time to restore (when there's an outage or bug that affects usage)&lt;/li&gt;
&lt;li&gt;Chail fail percentage (of released changes, how many fail and affect usage)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;quot;For organizations seeking guidance on how to improve, we point to the only real path forward: Start with foundations, and then adopt a continuous improvement mindset by identifying your unique constraint (or set of constraints). Once those constraints no longer hold you back, repeat the process.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The use of cloud—as defined by NIST Special Publication 800-145— is predictive of software delivery performance and availability. The highest performing teams were 24 times more likely than low performers to execute on all five capabilities of cloud computing.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="who-took-the-survey"&gt;Who Took the Survey?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Overall, we see similar representation across key demographic and firmographic measures when compared to last year, other than a &lt;em&gt;noticeable drop in the reported percentage of women on teams&lt;/em&gt;.&amp;quot;  (emphasis mine)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="demographics-and-firmographics"&gt;Demographics and Firmographics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gender: Male 83%, Female 10%, Other 7%&lt;/li&gt;
&lt;li&gt;Disability: 6%&lt;/li&gt;
&lt;li&gt;Underrepresented groups: 14%&lt;/li&gt;
&lt;li&gt;More than 16 years exeperience: 48%&lt;/li&gt;
&lt;li&gt;Departments: Dev/Eng 30%, DevOps/SRE 26%, Manager 16%, IT Ops/Infrastructure 5%&lt;/li&gt;
&lt;li&gt;Industry: Tech 38%, Finance 12%, Retail/Consumer/e-Commerce 9%&lt;/li&gt;
&lt;li&gt;Region: North America 50%, EU/UK 29%. Respondents from Asia fell from 18% to 9%.&lt;/li&gt;
&lt;li&gt;Employees: 10K+ 26%, 100-499 21%, 500-1,999 15%, 20-99 13%&lt;/li&gt;
&lt;li&gt;Operating Systems: Looks like an even split between Windows and Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-do-elite-performers.perform"&gt;How do Elite Performers...Perform?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deployment Frequency: &lt;strong&gt;On Demand (multiple deploys per day)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Lead time for changes: &lt;strong&gt;Less than one day&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Time to restore service: &lt;strong&gt;Less than on hour&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Change failure rate: &lt;strong&gt;0-15%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-research-models"&gt;The Research Models&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;SDO Performance&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Productivity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Culture of Psychological Safety&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Culture of Psychological Safety&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Change Management&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Useful, Easy-To-Use Tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Cloud&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Internal Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Technical Practices&lt;/td&gt;
&lt;td style="text-align: center;"&gt;External Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Disaster Recovery Testing&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Technical Debt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="software-delivery-operational-performance"&gt;Software Delivery &amp;amp; Operational Performance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn from the retail example, who...
&lt;ul&gt;
&lt;li&gt;Embraced A/B testing to understand customers' buying habits&lt;/li&gt;
&lt;li&gt;Require efficiency and automation&lt;/li&gt;
&lt;li&gt;Leveraged the cloud to enable handling swings in demand&lt;/li&gt;
&lt;li&gt;Learned how to operate in regulated environments quickly and securely.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More and more organizations are choosing multi-cloud and hybrid cloud solutions.&lt;/li&gt;
&lt;li&gt;What matters is &lt;em&gt;how teams implement their cloud services&lt;/em&gt;. The five essential characteristics of cloud computing are:
&lt;ol&gt;
&lt;li&gt;On-demand self-service&lt;/li&gt;
&lt;li&gt;Broad network access (from desktop, phone, etc)&lt;/li&gt;
&lt;li&gt;Resource pooling (multi-tenant models)&lt;/li&gt;
&lt;li&gt;Rapid elasticity (immediate capability provionsing)&lt;/li&gt;
&lt;li&gt;Measured service (automatic resource usage reporting)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Technical Practices: Execute for maximum effect. It's useful to include these complete statements:
&lt;blockquote&gt;
&lt;p&gt;Many organizations wanting to adopt DevOps look for a set of prescriptive steps or best practices to guide their journey. However, every organization is different and which practices to adopt depends on the current state of the organization—including the state of its technology, culture, and processes—and its short- and long-term goals.&lt;/p&gt;
&lt;p&gt;The solution is to take a holistic approach, where you first work to understand the constraints in your current software delivery process with an eye to your short- and long-term outcomes in measurable terms. Then empower teams to decide how best to accomplish those outcomes— after all, they are the experts in their work and context.14 Those who adopt this approach see more scalable and flexible solutions, and by not having to micromanage detailed execution plans, management can focus on high-level outcomes, allowing their organizations to grow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;This year, the research looked at the relationship between continuous integration and automated testing and found that automated testing positively impacts CI.&lt;/li&gt;
&lt;li&gt;Loosely coupled architecture is still important&lt;/li&gt;
&lt;li&gt;Code maintainability positively contiributes to successful continous delivery (CD)&lt;/li&gt;
&lt;li&gt;Disaster recovery plans without testing are useless.&lt;/li&gt;
&lt;li&gt;Only 40% of respondents perform disaster recovery testing at least annually using one or more of the methods listed. Organizations that conduct disaster recovery tests are more likely to have higher levels of service availability—that is, the ability for technology teams and organizations to make and keep promises and assertions about the software product or service they are operating.&lt;/li&gt;
&lt;li&gt;Heavyweight change processes, such as change advisory boards, negatively impact software delivery performance.&lt;/li&gt;
&lt;li&gt;A culture of psychological safety is predictive of software delivery performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="productivity"&gt;Productivity&lt;/h3&gt;
&lt;p&gt;This is the first year DORA has investigated productivity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what is productivity, and how should we measure it? Productivity cannot be captured with a simple metric such as lines of code, story points, or bugs closed; doing so results in unintended consequences that sacrifice the overall goals of the team. For example, teams may refuse to help others because it would negatively impact their velocity, even if their help is important to achieve organizational goals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Productivity is the ability to get complex, time-consuming tasks completed with minimal distractions and interruptions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Developers need useful and easy-to-use tools. Purchasing based on lower cost is the wrong approach, because harder-to-use tools cost developers in productivity.&lt;/li&gt;
&lt;li&gt;&amp;quot;Automation is truly a sound investment.&amp;quot;&lt;/li&gt;
&lt;li&gt;Effective ability to search and find internal resources increases productivity.&lt;/li&gt;
&lt;li&gt;Likewise (and slightly lower) productivity is seen when searching external sources such Stack Overflow.&lt;/li&gt;
&lt;li&gt;&amp;quot;Every minute spent on not-quite-right code counts as interest on that debt. Entire
engineering organizations can be brought to a standstill under the debt load of an
unconsolidated implementation.&amp;quot; --Ward Cunningham, 1992&lt;/li&gt;
&lt;li&gt;Additional Benefits of Improved Productivity
&lt;ul&gt;
&lt;li&gt;Better work recovery (leaving work at work)&lt;/li&gt;
&lt;li&gt;Reduced burnout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-do-we-transform-what-really-works"&gt;How Do We Transform: What Really Works&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Mashups are commonly reported in this sample at 40%, but they lack sufficient funding and resources in any particular investment. We caution that without a strategy to guide a technology transformation, organizations will often make the mistake of hedging their bets and suffer from “death by initiative”: identifying initiatives in too many areas, which ultimately leads to underresourcing important work and dooming them all to failure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The top two strategies employed are Communities of Practice and Grassroots, followed by Proof of Concept (PoC) as a Template (a pattern where the PoC copies) and PoC as a Seed.&lt;/li&gt;
&lt;li&gt;The four strategies that work (used by high/elite performers). See the report's Appendix B for details.
&lt;ol&gt;
&lt;li&gt;Community Builders, seen 46% of the time&lt;/li&gt;
&lt;li&gt;University, 9%&lt;/li&gt;
&lt;li&gt;Emergent, 23%&lt;/li&gt;
&lt;li&gt;Experimenters, 22%&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-thoughts"&gt;Final Thoughts.&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Every decade has its own trendy software methodology. While they all seem to feel better, history proves them to be ineffective. However, we see continued evidence that DevOps delivers value, and for six consecutive years, we have statistically verified key capabilities and practices that help organizations improve their software development and delivery using DevOps methods.&lt;/p&gt;
&lt;p&gt;DevOps is not a trend, and will eventually be the standard way of software development and operations, offering everyone a better quality of life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="more-info"&gt;More Info&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.google.com/devops/"&gt;DevOps Solutions | Google Cloud&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 3 Oct 2019 19:58:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/summary_of_accelerate_state_of_devops_2019</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/summary_of_accelerate_state_of_devops_2019</guid>
    </item>
    <item>
      <title>Posh-git Fork to Allow Visual Studio to Use TFVC and Ignore Git</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git/images/git-plus-tfvc.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Source Code: &lt;a href="https://github.com/bladewolf55/posh-git-tfvc"&gt;bladewolf55/posh-git-tfvc: A PowerShell environment for Git, modified to use with TFVC-based solutions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created this version of posh-git to handle a specific use case: a developer works for a company that requires using TFVC, but she wants to use Git locally to gain its rapid branching/merging abilities. Yet, she also wants to get the benefits of using Visual Studio's TFVC integration, namely CodeLens information.&lt;/p&gt;
&lt;p&gt;Visual Studio supports both TFVC and Git version controls, and you're allowed to choose which one to use via Options &amp;gt; Source Control. Except, not really. If your solution has a .git folder or .git file, VS assumes you're using Git even if you also have a $tf file or your solution/projecs are configured for TFVC.&lt;/p&gt;
&lt;p&gt;The general solution is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rename .git to _git&lt;/li&gt;
&lt;li&gt;Set environment variable GIT_DIR to the full path to the _git folder&lt;/li&gt;
&lt;li&gt;Set environment variable GIT_WORK_TREE to the full path to the working folder&lt;/li&gt;
&lt;li&gt;Add line to .gitignore to ignore the _git folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git/images/ScreenCap_2019-09-24_20-46-29.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;My modifications to the &lt;code&gt;GitUtils.ps1&lt;/code&gt; file accomplish that.&lt;/p&gt;
&lt;p&gt;As a bonus, in the &lt;code&gt;test _git&lt;/code&gt; folder there's a file containing a Git alias to initialize a repo using a _git folder and the appropriate .gitignore and .tfignore changes.&lt;/p&gt;
&lt;p&gt;It's not fancy, and I'm sure a better developer can improve on it.&lt;/p&gt;
</description>
      <pubDate>Tue, 24 Sep 2019 20:04:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git</guid>
    </item>
    <item>
      <title>ASP.NET Core Controllers - Exploring How To Test a Simple Feature</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/asp_net_core_controllers_-_exploring_how_to_test_a_simple_feature/images/header.png" alt="" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#puzzle-1:-the-controller"&gt;Puzzle 1: The Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#puzzle-2:-the-service"&gt;Puzzle 2: The Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-testing:-the-proof-of-the-pudding-is-in-the-tasting"&gt;Functional Testing: The Proof of the Pudding Is In the Tasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-up"&gt;Wrap Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Here's a brief feature description: &lt;em&gt;When a user story is saved, if it's new then it's assigned the latest sequence number + 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;How might this be developed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using Test-Driven Development (TDD)&lt;/li&gt;
&lt;li&gt;...in a web application&lt;/li&gt;
&lt;li&gt;...that calls a service?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="puzzle-1-the-controller"&gt;Puzzle 1: The Controller&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In truth, this article isn't specific to ASP.NET Core. But it's what I was working on at the time, &lt;em&gt;and&lt;/em&gt; I found the answer via a Core-specific article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To illustrate where we can have mental hiccups, let's start with the controller and work &lt;em&gt;backwards&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    [HttpPost]
    public IActionResult SaveStory(UserStory model)
    {
        if (!ModelState.IsValid)
        {
            return View(model);
        }

        //Save
        //The service takes care of setting the Sequence property on new models.
        model = _storyService.SaveStory(model);

        return RedirectToAction(actionName: nameof(Index));
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is reasonable code. The controller passes the model to the service, and the service implements the business rule ofincrementing the Sequence property.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take a minute and ask yourself: What would your controller's unit test...test?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Done? Now ask yourself: If I &lt;em&gt;hadn't written any code yet&lt;/em&gt;, what would I test for?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe your first answer started off something like this in your imagination.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
    [Fact]
    public void SaveStory_increments_UserStory_Sequence_by_one()
    {
        //arrange
        var service = MockUserStoryService();
        service.MaxSequence = 10;
        UserStory userStory = new UserStory(service) 
        {
            // set some fields
        };
        var controller = new HomeController();
        //act
        var result = controller.SaveStory(model);
        //assert
        result.Should().Be()...uh...um....
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there's the trap. What I, and I'm sure others, find hard about unit testing and TDD is being clear on the dependencies of what's being testing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In TDD, ask yourself, &amp;quot;What is this &lt;em&gt;unit&lt;/em&gt; going to do or change &lt;em&gt;by itself&lt;/em&gt;?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My first thought would be, &amp;quot;Well, the Sequence is going to change. That's the feature, after all.&amp;quot; But that isn't what the controller is doing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assuming no errors, the only thing the controller does is pass the model to the service's SaveStory method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The service is a dependency, and we don't test a dependency's behavior. Let me call that one out, because it's crucial.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In unit testing, don't test a &lt;em&gt;dependency's&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You &lt;em&gt;always&lt;/em&gt; control the dependency's state, and &lt;em&gt;always&lt;/em&gt; return a value you've determined. What you test is what the unit is supposed to &lt;em&gt;do&lt;/em&gt; with that value. This is why we mock dependencies.&lt;/p&gt;
&lt;p&gt;OK, what's the unit test for the controller? I admit, I was puzzled until I read Steve Smith's article, &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing"&gt;Test controller logic in ASP.NET Core | Microsoft Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I should ensure that the service's &lt;code&gt;SaveStory&lt;/code&gt; method was called. I don't need to test &lt;em&gt;that&lt;/em&gt; something was saved, only that it &lt;em&gt;should&lt;/em&gt; be. He's using Moq's &lt;code&gt;Validate&lt;/code&gt; feature for this. I can implement a similar feature in a self-created mock.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    // https://stackoverflow.com/a/11296961/1628707
    // This is one of those cases where it's simpler to inherit Collection&amp;lt;T&amp;gt;
    // and add a couple of needed methods.
    public class CalledMethods : Collection&amp;lt;CalledMethod&amp;gt;
    {

        public CalledMethod this[string name]
        {
            get { return this.SingleOrDefault(a =&amp;gt; a.Name == name); }
        }

        private CalledMethod AddAndReturn(string name)
        {
            
            if (this[name] == null) Add(new CalledMethod(name,0));
            return this[name];
        }

        /// &amp;lt;summary&amp;gt;
        /// Adds a &amp;lt;see cref=&amp;quot;CalledMethod&amp;quot;/&amp;gt; if necessary and increments its &amp;lt;see cref=&amp;quot;CalledMethod.Count&amp;quot;/&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
        public void Increment(string name)
        {
            var entry = this[name] ?? AddAndReturn(name);
            entry.Count++;
        }
    }
    
    public class CalledMethod
    {
        public string Name { get; set; }
        public int Count { get; set; }

        public CalledMethod() { }
        public CalledMethod(string name, int count = 0)
        {
            Name = name;
            Count = count;
        }
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling from the Mock class method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public UserStory SaveStory(UserStory story)
    {
        CalledMethods.Increment(System.Reflection.MethodBase.GetCurrentMethod().Name);
        CheckException();
        return UserStory;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And using in the test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    // assume arrange and act before this, then
    _storyService.CalledMethods[&amp;quot;SaveStory&amp;quot;].Count.Should().Be(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="puzzle-2-the-service"&gt;Puzzle 2: The Service&lt;/h2&gt;
&lt;p&gt;We still haven't implemented the feature. In fact, arguably we shouldn't have written the controller or its test at all; the controller doesn't save the story, the service does.&lt;/p&gt;
&lt;p&gt;Regardless, let's write the test first this time:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public void SaveStory_sets_new_UserStory_Sequence_to_Max_plus_one()
{
    var service = new UserStoryService();
    var userStory = new UserStory()
    {
        //set needed fields. Sequence is null or 0.
        
    };
    userStory = service.SaveStory(userStory);
    
    userStory.Sequence.Should().Be(???);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah. We run into a question of how to setup the Max Sequence. But writing the test is helping us. We need to answer&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does the service depend on something else to get the MaxSequence?&lt;/li&gt;
&lt;li&gt;If so, mock it&lt;/li&gt;
&lt;li&gt;If not, &lt;em&gt;it will be a functional test&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's assume our service depends on a data service, and finish the unit test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public void SaveStory_sets_new_UserStory_Sequence_to_Max_plus_one()
{
    var dataService = new MockDataService();
    dataService.MaxSequence = 15;    
    var service = new UserStoryService(dataService);
    var userStory = new UserStory()
    {
        //set needed fields. Sequence is null or 0.
        
    };
    userStory = service.SaveStory(userStory);
    
    userStory.Sequence.Should().Be(16);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For you to figure out: What if SaveStory were a void method?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="functional-testing-the-proof-of-the-pudding-is-in-the-tasting"&gt;Functional Testing: The Proof of the Pudding Is In the Tasting&lt;/h2&gt;
&lt;p&gt;At some point, some piece of code is actually persisting data. There's no way to unit test that. If your service depends on an ORM such as Entity Framework (EF), then you can mock EF. But if you want to test that that your concrete UnitOfWork/Repository/DbContext/Whatever works as expected, you have to use a real database and check the values. Another example: if you at some point write to file, you'll need to write functional tests for that, and verify that what was written is what you expected.&lt;/p&gt;
&lt;p&gt;Bonus: how might the functional tests look? Remember, these will be slower and likely run as part of a separate project, just like your integration tests.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class DataServiceTests {
    Db _db = new Db();
    public DataServiceTests()
    {
        //In xUnit.Net, the constructor is used to reset the environment
        //to a known state.
        //There could be a lot of actions to take, so this is simplistic.
        _db.Reset();
    }

    [Fact]
    public void GetMaxSequence_returns_expected_value()
    {
        var service = new DataService(_db);
        //Our known starting point for MaxSequence is 10.
        service.GetMaxSequence().Should().Be(10);
    }
    
    [Fact]
    public void IncrementMaxSequence_sets_expected_value()
    {
        var service = new DataService(_db);
        // _db is reset before every test, so MaxSequence is 10 again.
        service.IncrementMaxSequence(1);
        service.GetMaxSequence().Should().Be(11);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;TDD isn't nearly so much what to do, as how to think. Especially, I find it forces thinking about how to decouple code and make it testable. The tricky part, requiring practice, is seeing what are dependencies and what aren't. Knowing what your unit is responsible for.&lt;/p&gt;
&lt;p&gt;I think learning from the simplest cases is great, because it teaches the principles to apply.&lt;/p&gt;
</description>
      <pubDate>Thu, 12 Sep 2019 22:15:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/asp_net_core_controllers_-_exploring_how_to_test_a_simple_feature</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/asp_net_core_controllers_-_exploring_how_to_test_a_simple_feature</guid>
    </item>
  </channel>
</rss>