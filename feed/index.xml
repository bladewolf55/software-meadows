<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>.NET Framework vs Core Environment Configuration</title>
      <description>&lt;h2 id="the-source-code"&gt;The Source Code&lt;/h2&gt;
&lt;p&gt;Code is found at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bladewolf55/ConfigDemo"&gt;https://github.com/bladewolf55/ConfigDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-crucial-difference"&gt;The Crucial Difference&lt;/h2&gt;
&lt;p&gt;.NET Framework applies environment configurations at &lt;em&gt;build time&lt;/em&gt;, transforming environment-specific files to create a single configuration file for the deployed application. The application &lt;em&gt;knows&lt;/em&gt; what environment it's supposed to be in, regardless of where it's deployed.&lt;/p&gt;
&lt;p&gt;.NET/Core applies environment configurations at &lt;em&gt;run time&lt;/em&gt;, using a specific environment variable, and can consume many configuration sources. The application &lt;em&gt;asks&lt;/em&gt; what environment it's deployed in.&lt;/p&gt;
&lt;h2 id="whats-in-store"&gt;What's In Store&lt;/h2&gt;
&lt;p&gt;To show how Framework and Core differ, I'll show two ASP.NET MVC apps that do the same thing using both configuration strategies.&lt;/p&gt;
&lt;h2 id="brief-history"&gt;Brief History&lt;/h2&gt;
&lt;p&gt;.NET's configuration strategy has a &lt;a href="https://grammarist.com/idiom/checkered-past-and-chequered-past/"&gt;checkered past&lt;/a&gt;. The .NET Framework depends on a single &lt;code&gt;web.config&lt;/code&gt; or &lt;code&gt;app.config&lt;/code&gt;&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. This is a hard dependency, meaning the file &lt;em&gt;must&lt;/em&gt; exist. There's no way to construct a configuration in memory, and if you want to change a configuration value you have to save to the config file.&lt;/p&gt;
&lt;p&gt;Over time, Microsoft tried various ways to allow changed the config file. The most common is arguably &lt;a href="https://learn.microsoft.com/en-us/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/web-config-transformations"&gt;XML Transforms&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new build configuration such as &amp;quot;Staging&amp;quot;&lt;/li&gt;
&lt;li&gt;Add the corresponding config file, &lt;code&gt;web.Staging.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write transformations that update the base &lt;code&gt;web.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apply those transformations when publishing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several problems with this approach.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It conflates &lt;em&gt;build configuration&lt;/em&gt; with &lt;em&gt;environment configuration&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It's build-time, as noted above.&lt;/li&gt;
&lt;li&gt;By design, transformations can &lt;em&gt;not&lt;/em&gt; be applied during development. You don't run the app in Visual Studio using the Staging configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last item was a sticking point for developers. Whether we shouldn't be running other than locally, we often need to. So, developers found various, non-supported ways to handle this. The most common is using a pre-build target to apply the transform.&lt;/p&gt;
&lt;p&gt;This led to yet another problem: the &lt;code&gt;web.config&lt;/code&gt; file kept changing and, with the rise of version control, was either accidentally checked in or had to be undone. There are some &lt;a href="https://github.com/bladewolf55/DeftConfig"&gt;clever ways to manage that&lt;/a&gt;, but they're fundamentally workarounds.&lt;/p&gt;
&lt;p&gt;Microsoft pretty much fixed all these problems in .NET Core. It was clear that developers needed to be able to consume environment-based configurations from arbitrary sources during run time.&lt;/p&gt;
&lt;p&gt;In .NET/Core, the build configuration (Debug, Release) are separate from environment configurations. Build configurations determine things like assembly names, optimization settings, and whether you can debug.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to be able to Debug in any environment!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No matter the source, all environment configurations must be key-value pairs. A simple way to understand environment configurations is also a simple, supported case: when the application runs, it reads all its configuration from system environment variables.&lt;/p&gt;
&lt;h2 id="why-run-time-configuration-matters-build-once-deploy-to-many"&gt;Why Run-Time Configuration Matters: Build Once, Deploy To Many&lt;/h2&gt;
&lt;p&gt;Quick quiz: if I build the same .NET Framework code using three different transform files, are they all the same or different?&lt;/p&gt;
&lt;p&gt;It's tempting to say, &amp;quot;Well, the code is the same, just the configs are different.&amp;quot; But that's technically false. They are three different binaries. The code, in some way, &lt;em&gt;could&lt;/em&gt; be different. This breaks a principle of continuous deployment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build once, deploy to many&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We want to have one build artifact which we then deploy to any environment. This way, we &lt;em&gt;know&lt;/em&gt; the code is the same, and the only difference is the environment. We also save considerable time in our CI/CD process.&lt;/p&gt;
&lt;h2 id="show-me-the-code"&gt;Show Me the Code!&lt;/h2&gt;
&lt;p&gt;Our web site does just a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display an environment-based setting called TestKey&lt;/li&gt;
&lt;li&gt;Display a customer from the environment's database&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="database"&gt;Database&lt;/h3&gt;
&lt;p&gt;The app assumes using a SQL Server; modify to your needs. Here's a script for creating the database, tables, and data.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;use master
go
create database ConfigLocal
go

use ConfigLocal
go
create table Customers (
	CustomerId int primary key identity,
	Name varchar(max)
)

insert Customers(Name) values ('Local Louise')
select * from Customers
------------------------------------------------------

use master
go
create database ConfigDevelopmentShared
go

use ConfigDevelopmentShared
go
create table Customers (
	CustomerId int primary key identity,
	Name varchar(max)
)

insert Customers(Name) values ('Development Shared Dagmar')
select * from Customers
------------------------------------------------------

use master
go
create database ConfigStaging
go

use ConfigStaging
go
create table Customers (
	CustomerId int primary key identity,
	Name varchar(max)
)

insert Customers(Name) values ('Staging Sierra')
select * from Customers
------------------------------------------------------

use master
go
create database ConfigProduction
go

use ConfigProduction
go
create table Customers (
	CustomerId int primary key identity,
	Name varchar(max)
)

insert Customers(Name) values ('Production Pavla')
select * from Customers
------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="net-framework-version"&gt;.NET Framework Version&lt;/h3&gt;
&lt;p&gt;We're going to fly through the coding part while calling out what matters.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create new ASP.NET Web Application (.NET Framework) project named &amp;quot;ConfigFramework&amp;quot;&lt;/li&gt;
&lt;li&gt;Choose MVC template&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;EntityFramework&lt;/code&gt; NuGet package&lt;/li&gt;
&lt;li&gt;Add Data folder
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;Customer.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace ConfigFramework.Data
{
    public class Customer
    {
        public int CustomerId { get; set; }
        public string Name { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;ConfigDb.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System.Data.Entity;

namespace ConfigFramework.Data
{
    public class ConfigDb: DbContext
    {
        public DbSet&amp;lt;Customer&amp;gt; Customers { get; set; }

        public ConfigDb(): base(&amp;quot;name=ConfigDb&amp;quot;) { }

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Models/CustomerViewModel.cs&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace ConfigFramework.Models
{
    public class CustomerViewModel
    {
        public int CustomerId { get; set; } 
        public string Name { get; set; }
        public string TestKey { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Replace code in &lt;code&gt;Controllers/HomeController.cs&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using ConfigFramework.Data;
using ConfigFramework.Models;
using System.Linq;
using System.Web.Mvc;

namespace ConfigFramework.Controllers
{
    public class HomeController : Controller
    {
        ConfigDb db = new ConfigDb();

        public ActionResult Index()
        {
            var customer = db.Customers.First();
            var model = new CustomerViewModel()
            {
                CustomerId = customer.CustomerId,
                Name = customer.Name,
                TestKey = Settings.TestKey
            };
            return View(model);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Replace code in &lt;code&gt;Views/Home/Index.cshtml&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;@model ConfigFramework.Models.CustomerViewModel

&amp;lt;p&amp;gt;Customer:  @(Model.CustomerId.ToString() + &amp;quot; &amp;quot; + Model.Name)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Key: @(Model.TestKey)&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;How Do We Read the Environment Configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add at root &lt;code&gt;Settings.cs&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System.Web.Configuration;

namespace ConfigFramework
{
    public static class Settings
    {
        public static string TestKey = WebConfigurationManager.AppSettings[&amp;quot;TestKey&amp;quot;];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;web.config&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!--&amp;gt; Add under configuration &amp;gt; configSections--&amp;gt;
&amp;lt;connectionStrings&amp;gt;
    &amp;lt;add name=&amp;quot;ConfigDb&amp;quot; connectionString=&amp;quot;Server=.;Database=ConfigLocal;Trusted_Connection=True&amp;quot; 
        providerName=&amp;quot;System.Data.SqlClient&amp;quot;/&amp;gt;
&amp;lt;/connectionStrings&amp;gt;

&amp;lt;!-- Add to appSettings&amp;gt; --&amp;gt;
&amp;lt;add key=&amp;quot;TestKey&amp;quot; value=&amp;quot;Local&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Open Build &amp;gt; Configuration Manager&lt;/li&gt;
&lt;li&gt;Drop down Active solution configuration &amp;gt; New&lt;/li&gt;
&lt;li&gt;Name = &amp;quot;Development&amp;quot;, Copy settings from = &amp;quot;Debug&amp;quot;, Create new project configurations = checked&lt;/li&gt;
&lt;li&gt;OK&lt;/li&gt;
&lt;li&gt;Do the same to create Staging and Production configurations&lt;/li&gt;
&lt;li&gt;If you don't immediately see the &lt;code&gt;Web.[environment].config&lt;/code&gt; files under &lt;code&gt;web.config&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;Right-click &lt;code&gt;web.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Choose Add config transform&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;Web.Debug.config&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;configuration xmlns:xdt=&amp;quot;http://schemas.microsoft.com/XML-Document-Transform&amp;quot;&amp;gt;
    &amp;lt;connectionStrings&amp;gt;
        &amp;lt;add name=&amp;quot;ConfigDb&amp;quot; connectionString=&amp;quot;Server=.;Database=ConfigLocal;Trusted_Connection=True&amp;quot; 
            providerName=&amp;quot;System.Data.SqlClient&amp;quot;
        xdt:Transform=&amp;quot;SetAttributes&amp;quot; xdt:Locator=&amp;quot;Match(name)&amp;quot;/&amp;gt;
    &amp;lt;/connectionStrings&amp;gt;
    &amp;lt;appSettings&amp;gt;
        &amp;lt;add key=&amp;quot;TestKey&amp;quot; value=&amp;quot;Local&amp;quot; xdt:Transform=&amp;quot;SetAttributes&amp;quot; xdt:Locator=&amp;quot;Match(key)&amp;quot;/&amp;gt;
    &amp;lt;/appSettings&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Similarly, update Development, Staging, and Release with these values:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Development:&lt;/strong&gt; Database=ConfigDevelopmentShared, TestKey value=&amp;quot;Development&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staging:&lt;/strong&gt; Database=ConfigStaging, TestKey value=&amp;quot;Staging&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production:&lt;/strong&gt; Database=ConfigProduction, TestKey value=&amp;quot;Production&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Using an external editor, modify &lt;code&gt;ConfigFramework.csproj&lt;/code&gt;. Add this task node at the bottom.
&lt;blockquote&gt;
&lt;p&gt;This is the magic sauce that allows running the app in Visual Studio using different configurations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Target Name=&amp;quot;BeforeBuild&amp;quot;&amp;gt;
    &amp;lt;TransformXml Source=&amp;quot;Web.config&amp;quot; Transform=&amp;quot;Web.$(Configuration).config&amp;quot; Destination=&amp;quot;Web.config&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Run It&lt;/strong&gt;&lt;br /&gt;
Setting the configuration to Debug and pressing F5 should, at this point, open the web site and display something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-11-04-39.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;You might get a message about enabling debug. Go ahead and do that. We aren't going to disable debugging in our environment files, but in a real application we would.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-11-02-11.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Changing the configuration displays different data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Environments are linked to build configurations.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-11-06-34.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web site is run using one IIS Express setup, regardless of configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-11-08-06.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.NET Framework has no dependency injection out of the box. So, we're using a global, static Settings file. This means unit testing depends on the unit testing project having a &lt;code&gt;web.config&lt;/code&gt; file that's configured appropriately rather than injecting configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While it's possible to get settings from other sources (such as a database), it's custom work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="netcore-version"&gt;.NET/Core Version&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The steps here are very similar in .NET Core 3+ and .NET 5+. This code uses .NET 6 and includes improved C# language features such as file-scoped namespaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Create a new ASP.NET Core Web App (Model-View-Controller) project named &amp;quot;ConfigCore&amp;quot;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; Be sure to use the Model-View-Controller template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt; NuGet package&lt;/li&gt;
&lt;li&gt;Add Data folder
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;Customer.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace ConfigFramework.Data;

public class Customer
{
    public int CustomerId { get; set; }
    public string Name { get; set; } = string.Empty;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;ConfigDb.cs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.EntityFrameworkCore;

namespace ConfigFramework.Data;

public class ConfigDb: DbContext
{
    public DbSet&amp;lt;Customer&amp;gt; Customers { get; set; }

    public ConfigDb(DbContextOptions options) : base(options) { }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Models/CustomerViewModel.cs&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace ConfigFramework.Models;

public class CustomerViewModel
{
    public int CustomerId { get; set; } 
    public string Name { get; set; } = string.Empty;
    public string TestKey { get; set; } = string.Empty;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Replace code in &lt;code&gt;Controllers/HomeController.cs&lt;/code&gt;
&lt;blockquote&gt;
&lt;p&gt;There's more code, but we're also doing more with dependency injection&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using ConfigFramework.Data;
using ConfigFramework.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace ConfigCore.Controllers;

public class HomeController : Controller
{
    readonly ILogger&amp;lt;HomeController&amp;gt; _logger;
    readonly ConfigDb db;
    readonly Settings settings;

    public HomeController(ILogger&amp;lt;HomeController&amp;gt; logger, ConfigDb db, IOptions&amp;lt;Settings&amp;gt; settings)
    {
        _logger = logger;
        this.db = db;
        this.settings = settings.Value;
    }

    public IActionResult Index()
    {
        var customer = db.Customers.First();
        var model = new CustomerViewModel()
        {
            CustomerId = customer.CustomerId,
            Name = customer.Name,
            TestKey = settings.TestKey
        };
        return View(model);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Replace code in &lt;code&gt;Views/Home/Index.cshtml&lt;/code&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;@model ConfigFramework.Models.CustomerViewModel

&amp;lt;p&amp;gt;Customer:  @(Model.CustomerId.ToString() + &amp;quot; &amp;quot; + Model.Name)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Key: @(Model.TestKey)&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;How Do We Read the Environment Configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here's where we see how very different Framework and Core are&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Add at root &lt;code&gt;Settings.cs&lt;/code&gt;
&lt;blockquote&gt;
&lt;p&gt;Note this does not directly read configurations. Properties get set later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace ConfigCore;

public class Settings
{
    public const string AppSettings = &amp;quot;AppSettings&amp;quot;;

    public string TestKey { get; set; } = String.Empty;
}    
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;Program.cs&lt;/code&gt;
&lt;blockquote&gt;
&lt;p&gt;Set up the DbContext and configuration file dependency injection&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Add after builder.Services.AddControllersWithViews();
builder.Services.AddDbContext&amp;lt;ConfigDb&amp;gt;(options =&amp;gt; options.UseSqlServer(&amp;quot;name=ConnectionStrings:ConfigDb&amp;quot;));
builder.Services.Configure&amp;lt;Settings&amp;gt;(builder.Configuration.GetSection(Settings.AppSettings));
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add a file named &lt;code&gt;appsettings.Development.json&lt;/code&gt;
&lt;blockquote&gt;
&lt;p&gt;The section names are arbritary, but we still have a supported convention of sections named
ConnectionStrings and AppSettings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;Logging&amp;quot;: {
        &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Information&amp;quot;,
        &amp;quot;Microsoft.AspNetCore&amp;quot;: &amp;quot;Warning&amp;quot;
        }
    },
    &amp;quot;ConnectionStrings&amp;quot;: {
        &amp;quot;ConfigDb&amp;quot;: &amp;quot;Server=.;Database=ConfigLocal;Trusted_Connection=True;TrustServerCertificate=true;&amp;quot;
    },
    &amp;quot;AppSettings&amp;quot;: {
        &amp;quot;TestKey&amp;quot;: &amp;quot;Development&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add the remaining files with these environment names:
&lt;blockquote&gt;
&lt;p&gt;These files are &lt;em&gt;one&lt;/em&gt; of several source that .NET checks for when configuring&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;DevelopmentShared:&lt;/strong&gt; Database=ConfigDevelopmentShared, TestKey value=&amp;quot;Development&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staging:&lt;/strong&gt; Database=ConfigStaging, TestKey value=&amp;quot;Staging&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production:&lt;/strong&gt; Database=ConfigProduction, TestKey value=&amp;quot;Production&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;Properties/launchSettings.json&lt;/code&gt;. Replace the IIS Express entry with these new entries.
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;IIS Express Development&amp;quot;: {
  &amp;quot;commandName&amp;quot;: &amp;quot;IISExpress&amp;quot;,
  &amp;quot;launchBrowser&amp;quot;: true,
  &amp;quot;environmentVariables&amp;quot;: {
    &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;
  }
},
&amp;quot;IIS Express Development Shared&amp;quot;: {
  &amp;quot;commandName&amp;quot;: &amp;quot;IISExpress&amp;quot;,
  &amp;quot;launchBrowser&amp;quot;: true,
  &amp;quot;environmentVariables&amp;quot;: {
    &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;DevelopmentShared&amp;quot;
  }
},
&amp;quot;IIS Express Staging&amp;quot;: {
  &amp;quot;commandName&amp;quot;: &amp;quot;IISExpress&amp;quot;,
  &amp;quot;launchBrowser&amp;quot;: true,
  &amp;quot;environmentVariables&amp;quot;: {
    &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Staging&amp;quot;
  }
},
&amp;quot;IIS Express  Production&amp;quot;: {
  &amp;quot;commandName&amp;quot;: &amp;quot;IISExpress&amp;quot;,
  &amp;quot;launchBrowser&amp;quot;: true,
  &amp;quot;environmentVariables&amp;quot;: {
    &amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Production&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Run It&lt;/strong&gt;&lt;br /&gt;
Keep the build configuration as Debug, choose the IIS Express Development runtime configuration and F5 to run.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-11-37-22.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;You should see this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-11-38-14.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Points&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build configurations are not usually customized&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-12-06-35.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IIS Express can start as other environments&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration/2023-10-15-12-08-01.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment is an environment variable, &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment settings come from many sources, including &lt;code&gt;appsettings.[Environment].json&lt;/code&gt; files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;launchSettings.json&lt;/code&gt; is used to set the environment variable for &lt;em&gt;local&lt;/em&gt; development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
It may not be obvious, but if you deployed the application to a web server running IIS and wanted it to run as Staging, you would &lt;em&gt;have&lt;/em&gt; to add/set the &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; to &amp;quot;Staging&amp;quot;. Without that, the app will run as Production by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="time-out-whats-with-developmentshared-and-how-does-all-this-work"&gt;Time Out! What's With DevelopmentShared? And How Does All This Work?&lt;/h2&gt;
&lt;p&gt;In .NET/Core&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WebApplication.CreateBuilder&lt;/code&gt; reads a bunch of configuration sources by default, in a specific order.&lt;/li&gt;
&lt;li&gt;The &amp;quot;Development&amp;quot; environment has special behaviors that you don't know about unless you read the documentation, which will catch you by surprise.&lt;/li&gt;
&lt;li&gt;&amp;quot;Development&amp;quot; is intended for local work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's some problematic--but understandable--mental modeling at work here that I've seen over the years. Just as Microsoft conflated build and environment configurations, developers have conflated Debug and Development. .NET Framework accidentally encouraged developers to think of Debug as &amp;quot;local development.&amp;quot; Many teams have a shared development environment (shared web and database). So, they naturally added a Development configuration that meant &amp;quot;remote.&amp;quot;&lt;/p&gt;
&lt;p&gt;In .NET/Core, Debug has nothing to do with environment, and Development equals local. This is stated in the documentation, and is evident in code like this from &lt;code&gt;Program.cs&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler(&amp;quot;/Home/Error&amp;quot;);
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Development is the environment where we'd be calling other services with local ports, such as &lt;code&gt;https://localhost:50334&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But more importantly, when the configuration is built up, if the &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; environment is &amp;quot;Development&amp;quot;, user secrets are read if they exist. This is important for keeping sensitive information secure.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-application-configuration-sources"&gt;Default application configuration sources&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don't like it, but as far as I can tell these hidden behaviors are only enabled if &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; is set to &amp;quot;Development&amp;quot;. Not &amp;quot;Dev&amp;quot;, and not any other user-defined value. You can, of course, easily customize the builder, but it's critical to know the default behaviors.&lt;/p&gt;
&lt;p&gt;Also, I prefer sticking with defaults when I can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, that's why I added a DevelopmentShared environment. I would &lt;em&gt;assume&lt;/em&gt; that any secrets needed in a shared environment come from a shared source such as Azure Key Vault.&lt;/p&gt;
&lt;p&gt;How many configuration sources are looked up by default? Six, and in this order. The later sources will override values of the same keys in earlier sources.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fallback host configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appsettings.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appsettings.[Environment].json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;User secrets&lt;/li&gt;
&lt;li&gt;Environment variables&lt;/li&gt;
&lt;li&gt;Command-line arguments&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="proving-how-it-works"&gt;Proving How It Works&lt;/h2&gt;
&lt;p&gt;As stated earlier, one goal of the new configuration approach is &amp;quot;build once, deploy to many,&amp;quot; meaning I should be able to control my application's settings without changing the appsettings files. Let's try that.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run using IIS Express Staging.&lt;/li&gt;
&lt;li&gt;You should see customer &amp;quot;Staging Sierra&amp;quot; and key &amp;quot;Staging&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll run the app using a different environment, similar to running in IIS. For convenience, we'll do this from the command line with in-process environment variables.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open PowerShell&lt;/li&gt;
&lt;li&gt;Run
&lt;pre&gt;&lt;code class="language-powershell"&gt;# cd [path/to/ConfigCore solution]
$Env:ASPNETCORE_ENVIRONMENT = &amp;quot;Production&amp;quot;
dotnet run --project ConfigCore --no-launch-profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;The site runs using the Kestral webhost. Open whatever URL is displayed, typically http://localhost:5000&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should see customer = &amp;quot;Pavla&amp;quot; and key = &amp;quot;Production&amp;quot;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl-C&lt;/code&gt; to stop the site.&lt;/li&gt;
&lt;li&gt;Run
&lt;pre&gt;&lt;code class="language-powershell"&gt;$Env:AppSettings__TestKey = &amp;quot;Blamo&amp;quot;
dotnet run --project ConfigCore --no-launch-profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Once running, refresh the page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key should change to &amp;quot;Blamo.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why is the environment variable name &lt;code&gt;AppSettings__TestKey&lt;/code&gt; with the double-underscore? That's a Microsoft convention that allows converting the key to a hierarchy of the form &amp;quot;AppSettings:TestKey&amp;quot;. In fact, the json file also converts to that format, as does any other configuration source. The double-underscore works with Linux environment variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you run using Visual Studio, &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; is usually set in launchSettings. But it doesn't have to be. If you delete the &lt;code&gt;environmentVariables&lt;/code&gt; key, the app will either run as Production (the default) or as whatever is set for &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; in the user profile or system environment variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Remember you have to close/reopen Visual Studio to see new environment variable changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Microsoft fundamentally changed how configuration works in .NET/Core compared to Framework. They solved many problems and provided flexible and testable methods. The biggest barrier I've seen to using the new configuration strategies is understanding what changed and how they're intended to work.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Because, I guess, Microsoft believed two names were better than one. So far I haven't found an article on why they used two names.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 15 Oct 2023 09:34:52 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/framework_vs_core_environment_configuration</guid>
    </item>
    <item>
      <title>One Sheet Summary: Software Engineering at Google - Testing</title>
      <description>&lt;p&gt;I make these to post on my wall and help me learn the subject. Be sure to read the book!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/well-being"&gt;All One Sheet Summaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Software-Engineering-Google-Lessons-Programming-ebook/dp/B0859PF5HB"&gt;Buy the book on Amazon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;This summary is &lt;em&gt;only&lt;/em&gt; for the chapters on testing! And, it's kind of messy. You need to read those chapters yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summary-_engineering-at_google__testing/images/engineering-at_google__testing.pdf"&gt;Download the PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/one_sheet_summary-_engineering-at_google__testing/images/engineering-at_google__testing.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 12 Aug 2023 12:30:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/one_sheet_summary-_engineering-at_google__testing</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/one_sheet_summary-_engineering-at_google__testing</guid>
    </item>
    <item>
      <title>Getting Started With Software (and Business and Life) Skills - 2023</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/getting_started_with_software_(and_business_and_life)_skills_2023/images/slate.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-am-i-writing-this"&gt;Why Am I Writing This?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#principles-du-jour"&gt;Principles Du Jour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-big-hitters"&gt;The Big Hitters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning"&gt;Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fufillment"&gt;Fufillment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#productivity"&gt;Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#business"&gt;Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communication-and-presentation"&gt;Communication and Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#programming-specific"&gt;Programming-Specific&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#appendix-a---skills-i-think-software-developers-need-to-cultivate"&gt;Appendix A - Skills (I Think) Software Developers Need to Cultivate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#appendix-b---everything-you-might-need-to-know-to-create-an-enterprise-level-web-application"&gt;Appendix B - Everything You Might Need to Know To Create an Enterprise-Level Web Application&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#user-interface"&gt;User Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-service"&gt;Web Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-server-back-end"&gt;Web Server Back End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-persistence"&gt;Data Persistence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#version-control"&gt;Version Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#methodology"&gt;Methodology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#platforms"&gt;Platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-am-i-writing-this"&gt;Why Am I Writing This?&lt;/h2&gt;
&lt;p&gt;I wrote my &lt;a href="https://www.softwaremeadows.com/posts/getting_started_with_software_(and_business_and_life)_skills/"&gt;first version of this article&lt;/a&gt; in 2018, inspired by a young violinist-turned-developer. This time I'm thinking about some colleagues who are already in the field and wondering what might help them in their careers.&lt;/p&gt;
&lt;p&gt;What interested me was how to answer a question: &lt;em&gt;What do I think a junior software engineer needs to know?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Most of what I wrote in 2018 holds today, so there's some copy/paste going on below, but I've asked, &amp;quot;What matters to me now?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer has almost nothing to do with programming. Oh, sure, I could list a whole bunch of programming resources that even I haven't read. But curious developers eventually find those. What I think, based on over twenty-five years of experience in the industry (plus fifteen years in retail, food service, and other jobs before that), is that a successful, fulfilled &lt;strong&gt;person&lt;/strong&gt; needs to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn how to learn&lt;/li&gt;
&lt;li&gt;Know what it means to know something&lt;/li&gt;
&lt;li&gt;Communicate well in good and bad situations&lt;/li&gt;
&lt;li&gt;Find a job that aligns with one's purpose and values&lt;/li&gt;
&lt;li&gt;Savor life&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Are there skills specific to being a programmer? Sure. See Appendix A. But I think they don't matter without the basic human stuff. You're not going to find (much) fluff below, because one of my mottos is &amp;quot;show me the science.&amp;quot;&lt;/p&gt;
&lt;p&gt;So . . . here we go!&lt;/p&gt;
&lt;h2 id="principles-du-jour"&gt;Principles Du Jour&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Develop skills. Knowledge will come.&lt;/li&gt;
&lt;li&gt;Little habits add up.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-big-hitters"&gt;The Big Hitters&lt;/h2&gt;
&lt;p&gt;Last time I chose just three books/articles. I can't do that this time. These are my current top recommendations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Good-Habits-Bad-Science-Positive-ebook/dp/B07PKGTDMB"&gt;Good Habits, Bad Habits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are other good books on habit-forming out there, but Dr Wood is a premier researcher on the subject. When about 40% of your life is habits, it's a good idea to turn them to your benefit.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say-ebook/dp/B07L2KL5XV"&gt;Leadership is Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Combining current science with compelling, practical stories, submarine captain David Marquette explains how and why he transformed himself from a command-and-coerce leadership style to collaborate-and-improve. It was literally a matter of life or death. I recommend this book all the time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Crucial-Conversations-Tools-Talking-Stakes-ebook/dp/B093Y3N433"&gt;Crucial Conversations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think the essence of this book is, &amp;quot;Be 100% honest, 100% respectful, and keep it safe.&amp;quot; I've always been good at the first one . . . not so good at the other two. This book helped me improve my relationships.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates-ebook/dp/B004P1JDJO"&gt;Drive: The Surprising Truth About What Motivates Us&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Daniel Pink delivers one of the most important books I've read on motivation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity-ebook/dp/B00KWG9M2E"&gt;Getting Things Done&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've used, adapted, and revisited GTD for over ten years. It's helped me tremendously. In my view, Allen's crucial messages are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get everything you want to do out of your head and into a &lt;em&gt;system you trust&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The purpose of a personal productivity system is to &lt;em&gt;reduce stress&lt;/em&gt;, not get more done.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.careerlab.com/"&gt;Career Lab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a departure from the above books. Are you trying to figure out what your career should be like? Or considering transitioning? Bill is a consultant, and if you can afford to you should pay him for his expertise and experience. For those who can't, he's provided a real treasure: his entire methodology is on his web site. I took a month to work through all his exercises and they really focused me on my values. Hard work, worth it.&lt;/p&gt;
&lt;h2 id="learning"&gt;Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hbr.org/2007/07/the-making-of-an-expert"&gt;The Making of an Expert - Harvard Business Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flattland.com/posts/rapid_learning_-_9_articles_reviewed/"&gt;Rapid Learning - 9 Articles Reviewed&lt;/a&gt; &lt;strong&gt;&amp;lt;= my article&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fufillment"&gt;Fufillment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/the-science-of-well-being#"&gt;The Science of Well-Being | Coursera&lt;/a&gt; &lt;strong&gt;&amp;lt;= Fantastic! Thank you Dr Santos!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.viacharacter.org/www/Character-Strengths-Survey#"&gt;Character Strengths Survey: VIA Character&lt;/a&gt; &lt;strong&gt;&amp;lt;= one of the board members of VIA is Dr Martin Seligman, author of the books &lt;em&gt;Learned Optimism&lt;/em&gt; and &lt;em&gt;Authentic Happiness&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hminnovations.org/meditation-app"&gt;Healthy Minds App&lt;/a&gt; &lt;strong&gt;&amp;lt;= the only app on the lists. It's meditation, but also work, and also science!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="productivity"&gt;Productivity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Habits-Highly-Effective-People-Powerful-ebook/dp/B07WF972WK"&gt;7 Habits of Highly Effective People&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ji5_MqicxSo"&gt;Randy Pausch, The Last Lecture: Achieving Your Childhood Dreams - YouTube&lt;/a&gt; &lt;strong&gt;&amp;lt;= This was literally Dr Pausch's last lecture: he had cancer and a few months to live. Watch this to learn about being human.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Last-Lecture-Randy-Pausch-ebook/dp/B00139VU7E/"&gt;The Last Lecture -- Randy Pausch&lt;/a&gt; &lt;strong&gt;&amp;lt;= and read his book, too&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development/"&gt;The 50-10 Time Box - Revising Pomodoro For Software Development&lt;/a&gt; &lt;strong&gt;&amp;lt;= my article&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="business"&gt;Business&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Measure-What-Matters-Google-Foundation-ebook/dp/B078FZ9SYB"&gt;Measure What Matters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html?_r=0"&gt;What Google Learned From Its Quest to Build the Perfect Team - The New York Times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Business Plans&lt;/em&gt;&lt;br /&gt;
In my 2018 meeting, I was asked about business plans. I have limited experience writing a business plan, and I knew there'd be plenty of resources available online, such as those listed.&lt;/p&gt;
&lt;p&gt;Here's my opinion: unless you're seeking investors or a loan, the point of working on a business plan is to get you thinking, and to prepare for conversations with other professionals. This quote sums that up nicely.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;In preparing for battle I have always found that plans are useless, but planning is indispensable.&amp;quot; --Dwight D. Eisenhower&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.entrepreneur.com/article/281416"&gt;7 Steps to a Perfectly Written Business Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.businessknowhow.com/startup/businessplanning.htm"&gt;Business Plan Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://articles.bplans.com/a-standard-business-plan-outline/"&gt;A Standard Business Plan Outline [Updated for 2018] | Bplans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="communication-and-presentation"&gt;Communication and Presentation&lt;/h2&gt;
&lt;p&gt;Despite not listing any resources below, communication and presentation might be the &lt;em&gt;most&lt;/em&gt; important area any person can work on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpersonal (Toastmasters, acting, practice presentations and record them).&lt;/li&gt;
&lt;li&gt;Simple courtesies: thank-you notes, formalities, emails.&lt;/li&gt;
&lt;li&gt;Follow through. Under-promise, over-deliver.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="programming-specific"&gt;Programming-Specific&lt;/h2&gt;
&lt;p&gt;Developing a software engineer curriculum is &lt;em&gt;hard&lt;/em&gt;, because there are about twenty subject areas. Start with what interests you, the rest will follow. &lt;em&gt;See &lt;a href="#appendix-b-everything-you-might-need-to-know-to-create-an-enterprise-level-web-application"&gt;Appendix B&lt;/a&gt; for an overwhelming list of what it can take to write a single, professional web application&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn about the fundamentals of programming and what's physically happening in the computer. A lower-level language like C++ helps with this, but don't learn the language, just the concepts. A partial list: what are . . .
&lt;ul&gt;
&lt;li&gt;Memory addresses&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Collections (such as linked lists and dictionaries)&lt;/li&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Iterating and Enumerating&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agilemanifesto.org/"&gt;Manifesto for Agile Software Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agilemanifesto.org/principles.html"&gt;Principles Behind the Agile Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fundamentals of eXtreme Programming/Scrum/Kanban/Lean. Try one (I like Kanban).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/"&gt;Accelerate: The Science of Lean Software and DevOps&lt;/a&gt; &lt;strong&gt;&amp;lt;= One of the most important books on development practices today&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Art-Agile-Development-James-Shore-ebook/dp/B09JL2JW4V"&gt;The Art of Agile Development&lt;/a&gt; &lt;strong&gt;&amp;lt;= I trust James Shore's approach and understanding. It's not faux-Agile.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Podcast: &lt;a href="https://developertea.com/"&gt;Developer Tea&lt;/a&gt; &lt;strong&gt;&amp;lt;= Ten minute programs about improvement. I love this show.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find the [your-language/platform-here] version of &lt;a href="https://www.alvinashcraft.com/"&gt;Morning Dew - Daily links for Windows and .NET developers.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automate repetitive tasks&lt;/li&gt;
&lt;li&gt;Systematize administrative routines (tasks, calendar) (plain text is great). That is, make it easy to practice GTD or whatever method you choose.&lt;/li&gt;
&lt;li&gt;Tools are an aid, not an end. Learn your tools, but don't become a tool junkie.&lt;/li&gt;
&lt;li&gt;Be ruthless about maintainability (and maintenance)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="appendix-a-skills-i-think-software-developers-need-to-cultivate"&gt;Appendix A - Skills (I Think) Software Developers Need to Cultivate&lt;/h2&gt;
&lt;p&gt;Sorry, I know I'm all about evidence, but I haven't researched this. Here is my opinion on skills/traits specific to software development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Puzzle/problem solving&lt;/strong&gt;. Programmers have to be able to solve problems. In my opinion, the very best are interested in how to solve problems multiple ways, and never think they have the only right answer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tenacity&lt;/strong&gt;. Programmers are faced with tasks that take hours, days, or months to accomplish. They face problems that often don't have obvious or simple answers. They have to keep after it. And they're sitting in a chair, which is completely unhealthy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Abstract thinking&lt;/strong&gt;. This is a fact, because software is an abstraction. Programming is one of the few fields where what you see is &lt;em&gt;not&lt;/em&gt; what you get. Developers stare at words that are instructions later interpreted to produce something someone sees. It's not natural or easy. Imagine your job was to describe, in braille, how to write an English document that explained all the steps to painting Van Gogh's &lt;em&gt;Starry Night&lt;/em&gt;, and if the painting doesn't look right the braille book doesn't open.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communicating complexity simply&lt;/strong&gt;. On a scale of 1 to 10, most programmers reach about a 2 on this. A program is like a night at the theater (or movie, or symphony). You, the audience (manager, user) have no idea what it took to create. It looks simple, it must have been. Developers, especially seniors, must be able to explain how something seemingly simple will work, and why it will take a year to do it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understand everyone else's job&lt;/strong&gt;. Scale of 1 to 10: most programmers are a 3 (but think they're a 7). This really depends on what area of software you're working on, but it's rare for programmers to work on software they use. A consulting shop will work for all kinds of clients. In addition to the gobs of information about their own jobs, programmers often need to understand essentials of diverse fields. I, for example, have needed to rapidly learn about: accounting, manufacturing, aircraft maintenance, and radio-nucleotide decay, to name a few.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research&lt;/strong&gt;. Programmers need to be able to figure out how to query the internet for information, then they have to evaluate the dozen different answers and determine which, if any, fit the issue at hand. I spend as much time researching as I do programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="appendix-b-everything-you-might-need-to-know-to-create-an-enterprise-level-web-application"&gt;Appendix B - Everything You Might Need to Know To Create an Enterprise-Level Web Application&lt;/h2&gt;
&lt;p&gt;Don't worry, I promise you'll get there. And most of the time, you'll work with other people who know the stuff you don't.&lt;/p&gt;
&lt;p&gt;These lists are heavily weighted toward the Microsoft development stack, because that's what I know.&lt;/p&gt;
&lt;h3 id="user-interface"&gt;User Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IDEs: Visual Studio, Visual Studio Code, text editor(s),&lt;/li&gt;
&lt;li&gt;Design Prototyping: Balsamiq&lt;/li&gt;
&lt;li&gt;Design Images: Photoshop/GIMP/Paint.Net, Illustrator/Inkscape&lt;/li&gt;
&lt;li&gt;Image Formats: JPG, PNG, GIF, SVG&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;CSS preprocessors (Less, Sass)&lt;/li&gt;
&lt;li&gt;Dynamic web page languages and templates: WebForms, Razor forms, Blazor&lt;/li&gt;
&lt;li&gt;Javascript language&lt;/li&gt;
&lt;li&gt;Javascript server-side development: Node&lt;/li&gt;
&lt;li&gt;Javascript frameworks: Angular, React, JQuery&lt;/li&gt;
&lt;li&gt;Javascript style checking: ESLint&lt;/li&gt;
&lt;li&gt;Javascript Unit Testing: Jasmine, Karma, Angular-mocks&lt;/li&gt;
&lt;li&gt;Package Managers: NPM&lt;/li&gt;
&lt;li&gt;Integration Testing: Selenium&lt;/li&gt;
&lt;li&gt;Authentication: OAuth, OpenID&lt;/li&gt;
&lt;li&gt;Security: CORS, Cross-site injection&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Other tools: Chrome F12, Fiddler&lt;/li&gt;
&lt;li&gt;Concepts: page layout, colors, user experience, accessibility (handicapped), minification, HTTP protocol, MVVM, MVC (specifically views), REST, mocking, dependency injection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web-service"&gt;Web Service&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IDEs: Visual Studio, text editor(s)&lt;/li&gt;
&lt;li&gt;Diff and Merge: KDiff3, WinMerge, Beyond Compare&lt;/li&gt;
&lt;li&gt;Languages: C#, VB.Net&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;REST&lt;/li&gt;
&lt;li&gt;WebAPI (models and controllers)&lt;/li&gt;
&lt;li&gt;SOAP&lt;/li&gt;
&lt;li&gt;Package Managers: NPM, NuGet&lt;/li&gt;
&lt;li&gt;Unit Testing: MSTest, xUnit, NSubstitute&lt;/li&gt;
&lt;li&gt;Dependency Injection/Inversion of Control: .NET Core dependency framework&lt;/li&gt;
&lt;li&gt;Authentication: OAuth, OpenID&lt;/li&gt;
&lt;li&gt;Security: Cross-site injection, SQL Injection,&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Other tools: Fiddler, PowerShell&lt;/li&gt;
&lt;li&gt;Logging: NLog, Elastic Search, Application Insights&lt;/li&gt;
&lt;li&gt;Architecture: Onion, distributed, (micro)service-oriented&lt;/li&gt;
&lt;li&gt;Concepts: networking, routing, view models&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="web-server-back-end"&gt;Web Server Back End&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IDEs: Visual Studio, text editor(s)&lt;/li&gt;
&lt;li&gt;Diff and Merge: KDiff3, WinMerge, Beyond Compare&lt;/li&gt;
&lt;li&gt;Languages: C#, VB.NET&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;MVC (specifically models and controllers)&lt;/li&gt;
&lt;li&gt;ORM: Entity Framework, NHibernate, Active Record&lt;/li&gt;
&lt;li&gt;Architecture (layers, onion,...)&lt;/li&gt;
&lt;li&gt;Web Servers: IIS, Apache, Node.js&lt;/li&gt;
&lt;li&gt;Javascript server-side development: Node&lt;/li&gt;
&lt;li&gt;Package Managers: NPM, NuGet&lt;/li&gt;
&lt;li&gt;Unit Testing: MSTest, xUnit, NSubstitute&lt;/li&gt;
&lt;li&gt;Dependency Injection/Inversion of Control: .NET Core dependency framework&lt;/li&gt;
&lt;li&gt;Authentication: OAuth, OpenID&lt;/li&gt;
&lt;li&gt;Security: Cross-site injection, SQL Injection,&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Logging: NLog, Elastic Search, Application Insights&lt;/li&gt;
&lt;li&gt;Architecture: Onion, distributed, (micro)service-oriented&lt;/li&gt;
&lt;li&gt;Concepts: networking, routing, view models&lt;/li&gt;
&lt;li&gt;Other tools: PowerShell&lt;/li&gt;
&lt;li&gt;Concepts: networking, routing, data modeling, business entity modeling, business rules, test-driven development, REST, mocking, dependency injection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="data-persistence"&gt;Data Persistence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IDEs: SQL Server Management Studio, LINQPad, text editor(s)&lt;/li&gt;
&lt;li&gt;Languages: T-SQL, LINQ,&lt;/li&gt;
&lt;li&gt;Databases: SQL (Microsoft, Oracle), No-SQL (MongoDB, Redis)&lt;/li&gt;
&lt;li&gt;ORM: Entity Framework, NHibernate, Active Record&lt;/li&gt;
&lt;li&gt;Authentication (network)&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Other tools: Redgate, PowerShell&lt;/li&gt;
&lt;li&gt;Concepts: database design, data modeling, relational design&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="version-control"&gt;Version Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Source control systems: Git&lt;/li&gt;
&lt;li&gt;IDEs: command line, Visual Studio extensions, VS Code extensions, Git Kraken&lt;/li&gt;
&lt;li&gt;Other tools: GitHub, BitBucket, GitLab&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="methodology"&gt;Methodology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Development Approaches: Agile, Waterfall, Lean&lt;/li&gt;
&lt;li&gt;Agile methodologies: Scrum, Kanban, eXtreme Programming&lt;/li&gt;
&lt;li&gt;Project/Task Management: Kanban/Scrub board, Azure DevOps&lt;/li&gt;
&lt;li&gt;Issue Tracking: Azure DevOps, GitHub, GitLab, BitBucket&lt;/li&gt;
&lt;li&gt;Architecture Approaches: N-Tier, Domain-Driven Design, Onion, Service-Oriented, Microservice, Distributed&lt;/li&gt;
&lt;li&gt;Messaging: service bugs, message queues&lt;/li&gt;
&lt;li&gt;Continuous Integration/Release: Azure DevOps Pipelines (YAML-based), Infrastructure-As-Code&lt;/li&gt;
&lt;li&gt;Concepts: organization, teamwork, communication, creativity, problem-solving, estimating&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unit: Javascript, web, back-end, mocking, automated&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Exploratory&lt;/li&gt;
&lt;li&gt;My current favorite unit testing stack:
&lt;ul&gt;
&lt;li&gt;xUnit&lt;/li&gt;
&lt;li&gt;NSubstitute&lt;/li&gt;
&lt;li&gt;FluentAssertions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="platforms"&gt;Platforms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Hosting: Azure, Amazon Web Services, Google Cloud&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Office (Word, Excel, PowerPoint)&lt;/li&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Stack Overflow web site for researching problems&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Sat, 21 Jan 2023 09:00:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/getting_started_with_software_(and_business_and_life)_skills_2023</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/getting_started_with_software_(and_business_and_life)_skills_2023</guid>
    </item>
    <item>
      <title>Why I Don't Use Dark Mode - Science!</title>
      <description>&lt;p&gt;A colleague asked my thoughts about dark vs light modes, so here's the quick answer I gave him. It doesn't have my usual list of references, you can do your own research this time!&lt;/p&gt;
&lt;p&gt;Generally speaking, our eyes work less when reading dark text on a light background. When trying to read light next on a dark background, our pupils dilate, resulting in the text being fuzzier and both our eyes and brain working harder to read.&lt;/p&gt;
&lt;p&gt;There are exceptions you might see, such as older footage of air traffic control at night where the text is orange. But that's only text, not our graphics-heavy displays, and those orange (or green) choices were based on some science.&lt;/p&gt;
&lt;p&gt;Reducing screen brightness and color range may--probably does?--help reduce eyestrain in a dark environment. I haven't checked the research on that.&lt;/p&gt;
&lt;p&gt;Personally, I generally configure my computer/apps this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a dark, non-distracting wallpaper (often a single color)&lt;/li&gt;
&lt;li&gt;If the app allows, use darker backgrounds for &amp;quot;background&amp;quot; areas.&lt;/li&gt;
&lt;li&gt;Use dark text on light backgrounds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use &lt;a href="https://justgetflux.com/"&gt;f.lux&lt;/a&gt; to manage my screen color/brightness. I find it better than Windows's built-in utility. I've adjusted it to what's comfortable for both day and night (do enable the extended color range). If I ever have to edit images at night, I need to disable f.lux if I care about color accuracy.&lt;/p&gt;
&lt;p&gt;One other concern I have--my opinion, not researched--is that our brains are evolved to be more afraid in dark environments and light text on a dark background might be triggering my sympathetic nervous system (fight/flight). I don't want any more stress in my life than needed.&lt;/p&gt;
&lt;p&gt;Dark modes &lt;em&gt;look&lt;/em&gt; cool, but I abandoned them quite a while ago based on the evidence as I understand it.&lt;/p&gt;
&lt;p&gt;I take it back: here's one reference.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.wired.co.uk/article/dark-mode-chrome-android-ios-science"&gt;Dark mode isn't as good for your eyes as you believe | WIRED UK&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Dec 2022 09:31:43 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/why_i_dont_use_dark_mode_-_science</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/why_i_dont_use_dark_mode_-_science</guid>
    </item>
    <item>
      <title>The Mythical Man-Month: A Short Review of the Essential Essays</title>
      <description>&lt;p&gt;A book club I belong to agreed to read Frederick P. Brooks's seminal essay collection &lt;a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959"&gt;The Mythical Man-Month&lt;/a&gt;. We somewhat abandoned the book, finding a lot of it hard to relate to because we don't write operating systems for specific hardware in a time-sharing environment. Plus there's no audio version, which is how some of the members like to read. I promised the group I'd read some specific essays because I wanted to, and report back.&lt;/p&gt;
&lt;p&gt;I've made good on that promise. I think the following are worth reading for a few reasons, which I touch on below. Something not clear initially is when the essays were written. I think that's important for the context, so include what the dates seem to be.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Tar Pit (1975)&lt;/em&gt;&lt;br /&gt;
While not essential, this short essay nicely discusses what makes software hard and enjoyable. I think most of what Brooks says holds true today.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Mythical Man-Month (1975)&lt;/em&gt;&lt;br /&gt;
For the title essay, the thesis has held up; adding developers (to a late project) doesn't reduce time-to-completion. Communication is a core challenge of software shops. When new developers are added, there's significant ramp-up time for them, plus other employees' training time devoted to them--taking time away from their own days.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No Silver Bullet (1986)&lt;/em&gt;&lt;br /&gt;
This is Brooks's other most famous essay, written just as microcomputers are coming on the scene. In it he proposes software development won't see magnitudes of performance improvement from any single tool or process. He also breaks down why that is, and comparing software development to hardware development makes an observation I hadn't considered: it's hardware development that's the outlier. The incredible advances in power coupled with reduced cost hadn't--and haven't--happened in any other industry.&lt;/p&gt;
&lt;p&gt;Reading this essay is watching history unfold. Brooks is excited about new approaches--such as objective-oriented programming!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;'No Silver Bullet' Refired (1995)&lt;/em&gt;&lt;br /&gt;
Here, Brooks examines his own essay nine years later. What a difference those years make! And yet, he argues that there is still no single silver bullet despite many advances. He discusses the various critiques of his essay, acknowledges where they're valid, points out where they're not. I enjoyed that he quotes Capers Jones on the subject of productivity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;NSB,&amp;quot; like most writings at the time, was focused on &lt;em&gt;productivity&lt;/em&gt;, the software output per unit of input. Jones says, &amp;quot;No. Focus on &lt;em&gt;quality&lt;/em&gt;, and productivity will follow.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I completely agree.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Mythical Man-Month after 20 Years (1995)&lt;/em&gt;&lt;br /&gt;
This might be my favorite essay. Brooks discusses his entire book, where he was right, and where he was wrong. With gracious humility, he says, &amp;quot;I dismissed Parnas's concept [of information hiding] as a 'recipe for disaster' in Chapter 7. Parnas was right, and I was wrong.&amp;quot;&lt;/p&gt;
&lt;p&gt;He reveals discussions with the great James McCarthy of Microsoft who pioneered incremental and iterative processes we take for granted (even when business still don't do them!). But mostly, this essay is a snapshot of the industry approaching a turning point of both powerful personal computers and, in a few years, the codification of Agile values and principles. He names bunches of software, a lot I recognized, and most of which is no longer in use.&lt;/p&gt;
&lt;p&gt;1995 was only a year after I entered the computing industry. I wish I'd found this book then, though I wouldn't have understood it. So much of what we talk and read about seems new, but Brooks and his colleagues were struggling with--and solving--these problems already.&lt;/p&gt;
&lt;p&gt;We owe these masters a debt, and maybe that's why I'm glad I didn't give up on reading more of the book. I feel I've, in a small way, said &amp;quot;thank you&amp;quot; to those who came before me and made my career possible.&lt;/p&gt;
&lt;p&gt;One final item. While the essay &lt;em&gt;Why Did the Tower of Babel Fail&lt;/em&gt; didn't make my list, I wrote a fuller article about it on my blog. It disputes Brooks's Tower metaphor, and won't be to everyone's taste, but here it is for you to decide for yourself.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project/"&gt;Meditation On The Mythical Man-Month: Who Failed On The Tower Of Babel Project?&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 9 Sep 2022 19:20:49 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_mythical_man-month__a_short_review_of_the_essential_essays</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_mythical_man-month__a_short_review_of_the_essential_essays</guid>
    </item>
    <item>
      <title>Basic Debugging and Problem Solving Questions</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/basic_debugging_and_problem_solving_questions/elisa-ventur-bmJAXAz6ads-unsplash.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Photo by &lt;a href="https://unsplash.com/@elisa_ventur?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"&gt;Elisa Ventur&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/problem?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;While a short post, I hope this will help others as it did me. These questions came out of an experience trying to troubleshoot a deployment issue I was called into some time ago. The problem got solved, but the approach to identifying the problem wasn't . . . ideal. Among the challenges were pressure from above and the group dynamics of a thirty-person Zoom meeting.&lt;/p&gt;
&lt;p&gt;Afterward, I performed a personal post-mortem to identify heuristics that would help with this general class of problems, the &amp;quot;It's not working and we don't know why but it needs to be fixed right now we're watching you&amp;quot; situation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Actually, these are good questions for any debugging/troubleshooting, not just the under-pressure variety.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Questions&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;What's the symptom?&lt;/strong&gt; Get clear on this from the start and respectfully question what you're first told. &amp;quot;The prices are all wrong!&amp;quot; &amp;quot;Would you show me exactly what a where you're seeing that?&amp;quot; &amp;quot;Sure. See? All (and only) the shirt prices are multiplied by ten on this screen.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What changed?&lt;/strong&gt; In my situation, the exact same code was deployed to a different environment. The code worked in the other three environments. So, the problem wasn't the code. We needed to review the environment, not dive into the debugger. (It was a wrong deployment environment variable.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What's the dumbest thing it could be?&lt;/strong&gt; Did something get misspelled? Did you push the wrong version?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working backward, what controls that behavior?&lt;/strong&gt; It's so easy to assume you know what &amp;quot;must be&amp;quot; causing the symptom. Stop. Don't think &amp;quot;must be,&amp;quot; but instead &amp;quot;might be&amp;quot; and especially &amp;quot;&lt;em&gt;shouldn't&lt;/em&gt; be but let's check.&amp;quot; What class method displays that text? What service calls that class?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Other Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ask, &amp;quot;What's the real problem?&amp;quot;&lt;/strong&gt; For example, the symptom might be &amp;quot;we're getting a 404 on this page.&amp;quot; But the real problem might be, &amp;quot;Our main customer is blocked from completing a critical report.&amp;quot; Maybe the customer problem can be addressed without immediately fixing the symptom.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't rush.&lt;/strong&gt;  Pressure is the enemy, and often an illusion. Solving the problem fast isn't as important as solving it right. Wanting to be the hero and feeling the pressure of being the expert inevitably causes delays and failure. &lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summry-_leadership_is_language/"&gt;David Marquet&lt;/a&gt; calls this &amp;quot;control the clock, don't obey the clock.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change one thing at a time.&lt;/strong&gt; This is a hard-won skill. Change one thing, and confirm other variables are &amp;quot;known good.&amp;quot; Decades ago, I called my boss for help with a non-working printer. He asked, &amp;quot;Are you using a known-good cable?&amp;quot; &amp;quot;Uh, no.&amp;quot; &amp;quot;You have to make sure the cable works!&amp;quot; He was right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always know what you changed.&lt;/strong&gt; If you must change multiple variables, keep track.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix the problem, not the blame.&lt;/strong&gt; Now isn't the time for a retrospective, or questioning why the code is written the way it is. That just derails the conversation and is evidence of a &lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture"&gt;pathological organization&lt;/a&gt;. But do have a post-mortem when heads are clear.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of all these, &amp;quot;what's the symptom?&amp;quot;, &amp;quot;what changed?&amp;quot;, and &amp;quot;don't rush&amp;quot; will take you very far.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;It's important to think when things are going crazy, if you want to take the smartest action to get them sane again.&amp;quot; --Harry Dresden, &lt;em&gt;Battle Ground&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Fri, 12 Aug 2022 10:54:06 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/basic_debugging_and_problem_solving_questions</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/basic_debugging_and_problem_solving_questions</guid>
    </item>
    <item>
      <title>WIP Metaphor: Not Burgers. Books!</title>
      <description>&lt;h2 id="developers-dont-cook-hamburgers"&gt;Developers Don't Cook Hamburgers&lt;/h2&gt;
&lt;p&gt;Metaphors&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; are strong ways of explaining or clarifying difficult concepts. However, the wrong metaphor can weaken one's case.&lt;/p&gt;
&lt;p&gt;In his article &lt;a href="https://lucasfcosta.com/2022/07/19/finish-what-you-start.html"&gt;How finishing what you start makes teams more productive and predictable&lt;/a&gt;, Lucas F. Costa uses making hamburgers to illustrate work-in-progress. He's trying to show the importance and efficiency of finishing a task at a time and uses the following illustrations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serial&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-09-30-58.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concurrent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-09-31-08.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Here's the problem. &lt;em&gt;&lt;strong&gt;His metaphor is dead wrong.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let me be clear from the outset. Mr Costa is right about WIP and task switching in software development, and I assume his math equations are right, too. In fact, &lt;em&gt;I encourage you to read the entire piece because it's good stuff.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, I'm going to argue he shouldn't use the hamburger metaphor at all. It's too easy to poke holes in, and therefore not take seriously. If he tried to &amp;quot;educate the cook&amp;quot; in any of millions of restaurant kitchens on how to cook burgers, he'd rightfully be told he doesn't know what he's talking about.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I've worked as a cook. I do know what I'm talking about.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This point is really important. When trying to persuade people outside our field by using a metaphor, we &lt;em&gt;must&lt;/em&gt; know that other subject matter. We can't say, &amp;quot;I know it's not the same, but do you see my point?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer from senior management: &amp;quot;No, because you've made your point using an invalid example. Now I don't trust you. Get back to work on those features and stop complaining.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you use a bad metaphor, the other person will focus on the flaws in the metaphor, not the strengths of your argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we used this metaphor to try to persuade management or execs who don't understand software development why we should limit work-in-progress, we'd fail. Let's see why.&lt;/p&gt;
&lt;h2 id="computers-cook-hamburgers"&gt;Computers Cook Hamburgers&lt;/h2&gt;
&lt;p&gt;How does short order cooking of burgers actually work? (My drawings aren't as good as Mr Costa's!)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-08-25-37.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now, what happens if two people order burgers simultaneously?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-08-26-01.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Why doesn't it take 30 seconds each to assemble and plate the burgers? Because I can &lt;em&gt;combine like tasks&lt;/em&gt;. Open both buns, slather both with mustard, place lettuce on both, then tomato on both. Then put the patties on the buns.&lt;/p&gt;
&lt;p&gt;Finally, what happens if three customers order burgers one minute apart? Let's make the visual clearer.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-09-37-27.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Each burger has fixed grill times, with a flip in between. It only takes a couple of seconds to flip a burger.&lt;/p&gt;
&lt;p&gt;At the two minute mark, I need to flip the first burger, then start grilling the third. That adds a couple of seconds to the third order.&lt;/p&gt;
&lt;p&gt;Similarly, at the four minute mark, I flip the third, then assemble and plate the first.&lt;/p&gt;
&lt;p&gt;I then assemble and plate the remaining burgers with almost no pause. My customers each wait about five minutes. This isn't theory; I've done it. If I cook my burgers one after the other, the first customer gets his burger in under five minutes, and the third gets hers in &lt;em&gt;fifteen&lt;/em&gt; minutes. She won't be happy, and I'll go out of business.&lt;/p&gt;
&lt;p&gt;Why is flipping burgers so different than coding software?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cooking has significant &lt;em&gt;wait time&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I put a patty on the grill, I'm not stuck grilling the patty the entire two minutes. The patty is, essentially, grilling itself. I'm just waiting. This means I can start working on something else, and come back to flip the patty when it's ready.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cooking has lots of async-await. It's highly asynchronous.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, as a cook I can take advantage of my wait times and prepare even more. Assembling a burger involves pre-assembly (buns and condiments), and final assembly (putting the patty on the burger). I can pre-assemble early and plate the burger sooner.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-08-54-23.png" alt="" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is very much what a computer CPU is doing. A process is spawned that only uses a portion of memory, and so the CPU spawns another process. It's task switching, but that's what computers are good at, not people.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does this mean WIP doesn't apply to cooking? No, it does apply. In fact, in a restaurant kitchen, there's a real danger of starting too many orders. This leads to &lt;em&gt;cognitive overload&lt;/em&gt;. &amp;quot;Which patties are ready to flip?&amp;quot; It also leads to too many overlapping tasks. &amp;quot;I need to flip these four patties, assemble those five, plate these other two, and get back to these three patties before they burn.&amp;quot;&lt;/p&gt;
&lt;p&gt;The kitchen, though, has its own WIP limiter: grill space.&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You can only start so many burgers. This is why you have to wait so long in a crowded diner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While cooking is highly asynchronous, it is also highly limited. It's a just-in-time system where you only start orders when you have capacity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But we're still left with a dilemma. We want to explain to upper management why trying to code multiple features at once is severely counter-productive. What metaphor can we use that they'll immediately grasp?&lt;/p&gt;
&lt;h2 id="features-are-books"&gt;Features Are Books&lt;/h2&gt;
&lt;p&gt;Software engineering is a creative endeavour. It's not kitchen work, and it's not assembly line work. We need to use a creativity-based metaphor.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/typewriter.png" alt="" /&gt; &lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/typewriter.png" alt="" /&gt; &lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/typewriter.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;If you were tasked to write three books in two years, how would you do it? Would you&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write page one of each book, then page two, then page three, and so on?&lt;/li&gt;
&lt;li&gt;Write chapter one of each book, then chapter two, etc?&lt;/li&gt;
&lt;li&gt;Write book one, then book two, then book three?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option one is patently ridiculous. And yet it's how management &lt;em&gt;and developers&lt;/em&gt; often think when they're asked to add a new project or feature to an existing workload. &amp;quot;OK, sure, I can fit that in.&amp;quot; Or, &amp;quot;Sure, I can do that at the same time.&amp;quot;&lt;/p&gt;
&lt;p&gt;No. No you can't. This is where Mr Costa's article and math are so helpful, and is the point he's trying to make.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Coding has no wait times. You can't start coding a feature, and then switch to another feature while the first one magically continues coding itself. Coding is highly synchronous.&lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are the consequences of trying to write three books asynchronously? Will they be finished sooner, the same, or later than if you write them one after the other?&lt;a id="fnref:5" href="#fn:5" class="footnote-ref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All three books will be late, and each will take longer to write. Why? Because of task switching. You don't need to be much of a writer to imagine trying to switch between three different books, plots, characters, locations, every page. You'd never &lt;em&gt;read&lt;/em&gt; three books that way, right? The reason's the same. The writer needs to become immersed in the story. Switching to another story requires &amp;quot;getting back into it.&amp;quot; In software development, this is often called &amp;quot;ramp up time&amp;quot; or &amp;quot;reloading the code into my head&amp;quot; and generally takes &lt;em&gt;ten to twenty minutes&lt;/em&gt; after an interruption.&lt;/p&gt;
&lt;p&gt;If you want all three books on time, write them one after the other.&lt;/p&gt;
&lt;p&gt;There's another important business consideration here, and one that should appeal to all executives. In our metaphor of the writer, I &lt;em&gt;want&lt;/em&gt; to finish the first book before starting the second. Why? Because I need the money. That book can get published and I can get royalties while writing my second book. I can also use the reviews of my first book to help improve my next one.&lt;/p&gt;
&lt;p&gt;This is critical to understand in software development. We need to work on one feature at a time &lt;em&gt;with minimal distraction&lt;/em&gt; so we can finish it more quickly and get feedback to both fix the existing feature and inform future features. We also want to get products to users quickly because that's where the company's revenue comes from.&lt;/p&gt;
&lt;h2 id="metaphors-are-metaphorically-the-grail-choice-in-indiana-jones"&gt;Metaphors Are, Metaphorically, the Grail Choice in Indiana Jones&lt;/h2&gt;
&lt;p&gt;As the knight reminds in &lt;a href="https://www.youtube.com/watch?v=VA7J0KkanzM"&gt;Indiana Jones and the Last Crusade&lt;/a&gt;, you must choose wisely. Like all metaphors, the writing metaphor is incomplete. For example, unlike writers finishing a book, programmers are constantly fixing previously released code. Imagine if writers were forced to revise and republish all their books throughout the year! Also, writers do sketch ideas for future books, and they'll edit one book while writing another. But would you have said to J.K. Rowling, &amp;quot;I know we have an August deadline for the next Harry Potter, but we need you to start another book, too, and have it finished in September without missing the August deadline. Plus these five magazine articles.&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course not.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The difference between metaphors and similes is a metaphor substitutes, a simile compares. &amp;quot;I watched the flaming chariot cross the sky&amp;quot; is a metaphor for the sun. &amp;quot;The sun crossing the sky is like a flaming chariot&amp;quot; is a simile. When you see &amp;quot;is like,&amp;quot; it's a simile. In this article, I'm using &amp;quot;metaphor&amp;quot; throughout because it's easier to understand.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Mr Costa does touch on batching, but his example is, again, inaccurate compared to kitchen cooking reality.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Mr Costa notes this as well.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Of course, there is technically some wait time, for example while code is building. But compared to restaurant cooking, there's essentially none.&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;We're setting aside for the moment the danger of writer's block. We're assuming we can write continuously.&lt;a href="#fnref:5" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 10 Aug 2022 10:36:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 7 - Deploying, the Other People's Links Edition</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition/"&gt;Part 7 - Deploying, the Other People's Links Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="checking-my-ego"&gt;Checking My Ego&lt;/h2&gt;
&lt;p&gt;I kind of promised this part in the series, where I was going to take my progressively modified default app and show deploying it. But you know what? Other people have already covered this. So, here are their links and I don't think I have anything to add or clarify. Read them. They'll point you the right way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/"&gt;Getting Started with DevOps and .NET MAUI - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.andreasnesheim.no/setting-up-ci-for-your-net-maui-windows-app-in-azure-devops/"&gt;Setting up CI for your .NET MAUI Windows app in Azure DevOps - Andreas Nesheim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=FNwv_W3TtSU&amp;amp;t=8s"&gt;Create a .NET MAUI Windows MSIX to Sideload Or Publish to the Microsoft Store - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I &lt;em&gt;may&lt;/em&gt; still write a future post showing .NET MAUI CI/CD in Azure DevOps Pipelines. That would be interesting because it would ideally cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The local build and package script&lt;/li&gt;
&lt;li&gt;Remote (integrated) build&lt;/li&gt;
&lt;li&gt;Package once, deploy to many environments&lt;/li&gt;
&lt;li&gt;How to manage testing versions before publishing to the platform stores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing is, I haven't done this with .NET MAUI, and I have some other topics I'm more interested in right now. But I'll eventually learn and write about it when I--hopefully--publish my first .NET MAUI application!&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;This series has used the out-of-the-box .NET MAUI project template as a starting point for learning many key concepts and techniques. Some apply only to .NET MAUI, while most apply to general enterprise development.&lt;/p&gt;
&lt;p&gt;I hope it's been helpful. You rock!&lt;/p&gt;
</description>
      <pubDate>Sun, 31 Jul 2022 07:46:53 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition</guid>
    </item>
    <item>
      <title>The Better Software Engineer Interview Process</title>
      <description>&lt;p&gt;I've been finding my next job. I've looked at literally hundreds of listings and been on several interviews. Over my career, I've interviewed &lt;em&gt;a lot&lt;/em&gt;. Today, software engineer interviews work mostly like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Screening interview (&amp;quot;do we want to proceed with you?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Development Manager interview (&amp;quot;do I want to work with you?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Technical interview or assessment (&amp;quot;can you do the job?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Other Management interviews (&amp;quot;do we have any objections?&amp;quot;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There can be as low as three (rarely two) steps. I've literally seen it up to six. A six-step interview!&lt;/p&gt;
&lt;p&gt;One intended goal for this process, I think, is to reduce the amount of time taken by management and developers for interviews so they can focus on coding. Another reason--again, my opinion--is there's a belief that management can screen out for fit early.&lt;/p&gt;
&lt;p&gt;Fit matters. I care a lot about whether I'll fit in with a prospective employer. But, after quite a few recent interviews and really pondering and reading about hiring, I think the typical process is backward, biased, onerous, and ineffective.&lt;/p&gt;
&lt;h2 id="a-better-way"&gt;A Better Way&lt;/h2&gt;
&lt;p&gt;Here are the steps I'd like to see.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initial, online technical assessment using real-world coding. No FizzBuzz, no &amp;quot;reverse this string the hard way.&amp;quot;&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Work with the team.&lt;/li&gt;
&lt;li&gt;Development Manager interview.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="online-assessment"&gt;1. Online Assessment&lt;/h2&gt;
&lt;p&gt;I've been skeptical of online skill assessments in the past, but a recent experience has warmed me to them. While still not as good as working with one's daily tools such as Visual Studio, the online interface was very good. So, why should companies start with (and pay for!) this assessment?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many candidates will drop out because they know they're not ready. This reduces the pool that the development team needs to assess. It's self-selection.&lt;/li&gt;
&lt;li&gt;The remaining results will be reasonably apples-to-apples.&lt;/li&gt;
&lt;li&gt;What matters first is &amp;quot;can you do the job.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The skills assessment can be tailored, so junior devs are assessed differently than seniors and architects. And the goal is to gain information, not punish people for not having arcane knowledge. &amp;quot;The basics&amp;quot; (you know, bubble sorting) really don't apply day-to-day. Let me show you I can write testable, clean, object-oriented code!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A fair, online assessment reduces lots of bias. A candidate shouldn't be disregarded out of the gate just because a hiring manager or the candidate hasn't had lunch yet. This is more common than people want to admit.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="team-work"&gt;2. Team Work&lt;/h2&gt;
&lt;p&gt;With the assessment results and resumes in hand, the development team can--with coaching from management and HR--decide who they want to meet. Let me say that again. &lt;em&gt;The developers choose.&lt;/em&gt; You can bet they'll be careful with their time.  In my view, they should ideally work on some code together, or do something that shows the candidate how life will really be. In a word, collaborate. This shouldn't be a &amp;quot;let's talk&amp;quot; meeting. Pull an item from the backlog, discuss how it might be approached, do some pair programming or even &lt;a href="https://en.wikipedia.org/wiki/Mob_programming"&gt;mob programming&lt;/a&gt;.&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The candidate will be working mostly with developers. They have the biggest stake, so they should have the biggest say in hiring. This is even more important if you claim to be an Agile shop. If you aren't letting developers self-manage their teams, you may still be a top-down bureaucracy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="management-blessing"&gt;3. Management Blessing&lt;/h2&gt;
&lt;p&gt;Someone's going to chafe at my suggestion that the final step is only with the development manager; that is, the person who will be the candidate's direct supervisor, or at most one level above that. But why have you promoted people to management/leadership positions if you're not going to &lt;em&gt;trust&lt;/em&gt; their judgement? By now in the process, the only candidates who talk to the manager have been pre-approved by the development team she'll be working with. There's really no reason to bring in other managers, except to stroke their egos and forestall &amp;quot;why wasn't I consulted?&amp;quot; comments later.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Besides, most managers complain they're too busy with endless meetings. This reduces meetings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other managers and execs should certainly introduce themselves after the hiring. But if a qualified developer who is liked by the people she'll be working with doesn't get a job because the CEO or president has a &amp;quot;gut feeling,&amp;quot; and needs to &amp;quot;meet everyone who's going to work here,&amp;quot; a disservice has been done to the entire organization. It signals that people's careers are at the mercy of caprice.&lt;/p&gt;
&lt;h2 id="change-your-ways-itll-save-you-money-and-improve-your-culture"&gt;Change Your Ways, It'll Save You Money and Improve Your Culture&lt;/h2&gt;
&lt;p&gt;Companies spend a lot of money on recruiters, time spent reviewing resumes, time spent in interviews. But have they really evaluated whether that money is being well-spent? Have they applied research and evidence, or are they interviewing software engineers the same way they always have?&lt;/p&gt;
&lt;p&gt;This article proposes the answer is, generally, no. We're hiring developers using a traditional model. And we're getting traditionally chancy results.&lt;/p&gt;
&lt;p&gt;I learned decades ago to look for these qualities as part of hiring, and they still apply.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Can&lt;/strong&gt;&lt;/em&gt; the person do the job?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Will&lt;/strong&gt;&lt;/em&gt; the person do the job?&lt;/li&gt;
&lt;li&gt;Does the person &lt;em&gt;&lt;strong&gt;fit&lt;/strong&gt;&lt;/em&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The principles I've outlined above boil down to.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce initial bias&lt;/li&gt;
&lt;li&gt;Let developers hire developers (with help)&lt;/li&gt;
&lt;li&gt;Trust your colleagues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm no expert, but I think we can hire better.&lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2022/05/23/the-science-of-interviewing-developers/?utm_medium=email"&gt;The science of interviewing developers - Stack Overflow Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://builtin.com/job-interview/candidates-interview-companies"&gt;How Candidates Should Interview Companies | Built In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.woventeams.com/"&gt;Technical Interview Software for Developers | Woven Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tdwright.co.uk/2022/07/14/fizzbuzz-is-fizzbuzz-years-old-and-still-a-powerful-tool/"&gt;FizzBuzz is FizzBuzz years old (and still a powerful tool) | Tom Wrights Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say-ebook/dp/B07L2KL5XV/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=1658874171&amp;amp;sr=8-1"&gt;Leadership Is Language: The Hidden Power of What You Say--and What You Don't&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Noise-Human-Judgment-Daniel-Kahneman-ebook/dp/B08KQ2FKBX/ref=sr_1_4?keywords=kahnemann&amp;amp;qid=1658874780&amp;amp;sr=8-4"&gt;Noise: A Flaw in Human Judgment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;FizzBuzz can have value if done as pair-programming, but requires a different skill set on the part of the interviewer.&lt;/p&gt;
&lt;p&gt;As far as the &amp;quot;find substrings in a string&amp;quot; tradition, in my opinion, it's outdated and useless. The technical interviews where a couple of developers assign a seemingly trivial task and watch in silence while the candidate tries to work it out is just terrible. It's completely removed from the reality of the job (I hope!), and puts useless pressure on the candidate.&lt;/p&gt;
&lt;p&gt;It isn't an assessment. It's a hazing.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;As discussed by Daniel Kahneman in his book &lt;em&gt;Noise&lt;/em&gt;, and reported on in this &lt;a href="https://www.theguardian.com/books/2021/jun/03/noise-by-daniel-kahneman-olivier-sibony-and-cass-sunstein-review-the-price-of-poor-judgment"&gt;article&lt;/a&gt;.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This was one of my favorite interview experiences.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;To be intellectually fair, I really haven't found out what research there's been on effective developer hiring practices. I'm just voicing a slightly educated opinion that may be dead wrong.&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 26 Jul 2022 17:09:30 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_better_software_engineer_interview_process</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_better_software_engineer_interview_process</guid>
    </item>
    <item>
      <title>Meditation on The Mythical Man-Month: Who Failed on the Tower of Babel Project?</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;&lt;br /&gt;
I'm not a biblical scholar. This post treads on sensitive ground regarding matters of theology. My intention isn't to critique faith, but instead is the same as Brooks's: interpret the account of the Tower of Babel through the lens of project and corporate management. I hope I've navigated the line between serious and tongue-in-cheek successfully.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In his seminal 1975 book &lt;a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959"&gt;&lt;em&gt;The Mythical Man-Month&lt;/em&gt;&lt;/a&gt;, author and engineer Frederick P. Brooks starts chapter 7, &amp;quot;Why Did the Tower of Babel Fail?&amp;quot; with the relevant Biblical text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now the whole earth used only one language, with few words. On the occasion of a migration from the east, men discovered a plain in the land of Shinar, and settled there. Then they said to one another, &amp;quot;Come, let us make bricks, burning them well.&amp;quot; So they used bricks for stone, and bitumen for mortar. Then they said, &amp;quot;Come, let us build ourselves a city with a tower whose top shall reach the heavens (thus making a name for ourselves), so that we may not be scattered all over the earth.&amp;quot; Then the Lord came down to look at the city and tower which human beings had built. The Lord said, &amp;quot;They are just one people, and they all have the same language. If this is what they can do as a beginning, then nothing that they resolve to do will be impossible for them. Come, let us go down, and there make such a babble of their language that they will not understand one another's speech.&amp;quot; Thus the Lord dispersed them from there all over the earth, so that they had to stop building the city.&lt;/p&gt;
&lt;p&gt;GENESIS 11:1-8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an aside, it's fascinating that after a solid search I don't find this translation anywhere else but in Brooks's book. It seems unlikely he played fast and loose with the Bible, so where did his translation come from?&lt;/p&gt;
&lt;p&gt;But to the point. Brooks makes the case that the Tower project failed, and that its failure was due to lack of communication and organization by the development team.&lt;/p&gt;
&lt;p&gt;Is this supported by the text?&lt;/p&gt;
&lt;p&gt;The first question to answer is whether the project was completed. Initially, reading &amp;quot;Then the Lord came down to look at the city and tower which human beings had built,&amp;quot; it seems they &lt;em&gt;did&lt;/em&gt; complete the city and tower. The puzzle is in the comment, &amp;quot;If this is what they can do as a beginning,&amp;quot; which implies the work is merely started. But if it's merely started, how is there even a tower?&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.biblestudytools.com/genesis/11.html"&gt;New International Version&lt;/a&gt; translates this subtly--but crucially--differently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But the LORD came down to see the city and the tower the people were &lt;em&gt;building&lt;/em&gt;. [Emphasis mine]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, many other translations use the past tense, &amp;quot;built.&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer seems to be in the following statements that the Lord confused the language, scattered the people, and they &amp;quot;had to stop building the city.&amp;quot; It appears clear the work was unfinished and the past tense &amp;quot;built&amp;quot; should be read as &amp;quot;built so far&amp;quot; rather than &amp;quot;completed.&amp;quot;&lt;/p&gt;
&lt;p&gt;Is an uncompleted project a failure? Not necessarily. Sometimes projects are abandoned because priorities change. We need to understand, why wasn't this project completed?&lt;/p&gt;
&lt;p&gt;So, let's examine the project as a corporate development effort as Brooks did, but without--in my opinion--his bias.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The developers had a clear goal and motivation.&lt;/li&gt;
&lt;li&gt;They began with great success, communicating very well and accomplishing quality work.&lt;/li&gt;
&lt;li&gt;The CEO checked up on them and felt threatened by their success.&lt;/li&gt;
&lt;li&gt;He didn't directly cancel the project. He broke up the teams. Not only that, he &lt;em&gt;created&lt;/em&gt; barriers to communication.&lt;/li&gt;
&lt;li&gt;At that point, the developers gave up on the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me call the first point out again: the Tower of Babel was not failing. The development team was &lt;em&gt;succeeding&lt;/em&gt;. The evidence points to the CEO as being the source of the failure, not the developers.&lt;/p&gt;
&lt;p&gt;Before making that case, one question is &lt;em&gt;why&lt;/em&gt; did the CEO react that way? Why did he feel threatened? The usual reason given for the Lord's actions is the people's hubris.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; They--from the Lord's viewpoint--are trying to achieve godliness, and the Lord and his host (the C-level execs, if you will) don't take kindly to that. They don't want the people making &amp;quot;a name for themselves.&amp;quot; Maybe they see the roots of a competitive company growing within their own organization!&lt;/p&gt;
&lt;p&gt;From the people's point of view, their goal is the opposite. They want to stay together, &lt;em&gt;not&lt;/em&gt; be broken up, and see their project as the means to accomplish that goal. If making a name for themselves is against company policy, they don't seem to know it.&lt;/p&gt;
&lt;p&gt;Brooks's purpose in the chapter is showing that poor communication and organization cause major project problems. I agree, and so I believe does lots of research. Where I disagree with Brooks in his metaphor is who's responsible. This isn't a trivial point; it's a problem I've routinely seen in the dozens of companies I've worked for.&lt;/p&gt;
&lt;p&gt;So now we come to the crux: &lt;em&gt;What were the communication and organization problems?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think there are a few important answers. Framing it in software development terms,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The development department didn't communicate their intentions well enough to the CEO.&lt;/li&gt;
&lt;li&gt;The CEO was ignorant of what was going on in the company.&lt;/li&gt;
&lt;li&gt;The CEO didn't have a clear mission for the organization.&lt;/li&gt;
&lt;li&gt;The CEO valued punishment over learning.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If it seems like I'm laying most of the blame for the failed Tower at executive management's feet, I am. The CEO, in this organization, has developed a reputation for being omniscient. It was reasonable for the development department to believe he knew their plans. After all, they stated them out in the open, and such a big project could hardly be missed even in the planning stages.&lt;/p&gt;
&lt;p&gt;Still, they could have made sure. After all, the CEO also has a reputation as a bit of a hot head. Maybe the CIO assumed too much or didn't talk the the CEO directly. A few emails and phone calls might have helped. Something like, &amp;quot;We've settled into our new offices. We're working really well together and want that to continue. We're thinking of showing what we can do by building this beautiful social network application called 'City and Tower.' Is that in line with your goals?&amp;quot;&lt;/p&gt;
&lt;p&gt;The fact that they missed the mark on such a major project tells me the CEO didn't establish a clear vision. His development department was &lt;em&gt;literally&lt;/em&gt; wandering. They shouldn't have been blamed for making the best of their situation.&lt;/p&gt;
&lt;p&gt;What's worse is the CEO's reaction when he finds out about the project. He doesn't ask, &amp;quot;How could I have done better?&amp;quot; In fact, he doesn't confirm or consider their motivation. He &lt;em&gt;assumes&lt;/em&gt; bad intent on the team's part. There's no conversation. &lt;em&gt;No communication&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Even worse, he doesn't see the opportunity in the developers' excellent work. He responds in an Industrial Age, J.P. Morgan command-and-coerce style. &amp;quot;I'm the boss, you're threatening my power and position, I demand loyalty, so I'm firing you.&amp;quot;&lt;/p&gt;
&lt;p&gt;The developers showed the hallmarks of drive: &lt;em&gt;autonomy, mastery, and purpose&lt;/em&gt;.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Their initiative should have been rewarded and redirected. What would have been good advice to the CEO?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask yourself: &amp;quot;How did I not know about this project?&amp;quot;&lt;/li&gt;
&lt;li&gt;Ask the team: &amp;quot;What's your motivation? How does this project help the organization?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;Did my actions or lack of direction affect their decision?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;I feel threatened. Is the threat real?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;Did they do the wrong thing well? If so, can I harness that in service to the organization?&amp;quot;&lt;/li&gt;
&lt;li&gt;Act: &amp;quot;I apologize for my part in not communicating well. Let's improve that. You all started something amazing, but I think it's not in line with our objectives. Let's see if our objectives need to be adjusted, but if not let's bring your team to bear on our shared mission.&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I agree the Tower project failed because of poor communication and organization. But the primary failure was at the top management level. What the CEO communicated most successfully was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;I won't be clear in what I want.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I don't know what's going on.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I'll punish you if I think you're against me.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I'm never to blame.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are characteristic of what Ron Westrum defines as a pathological culture, which is worse than a bureaucratic one.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pathological&lt;/th&gt;
&lt;th&gt;Bureaucratic&lt;/th&gt;
&lt;th&gt;Generative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Power oriented&lt;/td&gt;
&lt;td&gt;Rule oriented&lt;/td&gt;
&lt;td&gt;Performance oriented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Low cooperation&lt;/td&gt;
&lt;td&gt;Modest cooperation&lt;/td&gt;
&lt;td&gt;High cooperation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Messengers &amp;quot;shot&amp;quot;&lt;/td&gt;
&lt;td&gt;Messengers neglected&lt;/td&gt;
&lt;td&gt;Messengers trained&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsibilities shirked&lt;/td&gt;
&lt;td&gt;Narrow responsibilities&lt;/td&gt;
&lt;td&gt;Risks are shared&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bridging discouraged&lt;/td&gt;
&lt;td&gt;Bridging tolerated&lt;/td&gt;
&lt;td&gt;Bridging encouraged&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Failure leads to scapegoating&lt;/td&gt;
&lt;td&gt;Failure leads to justice&lt;/td&gt;
&lt;td&gt;Failure leads to inquiry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Novelty crushed&lt;/td&gt;
&lt;td&gt;Novelty leads to problems&lt;/td&gt;
&lt;td&gt;Novelty implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While there were mistakes on both sides, the clans of Noah's sons really deserved better, especially after all they'd gone through.&lt;/p&gt;
&lt;p&gt;Imagine what wonderful products and services that team could have built in a generative organizational culture!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.biblestudytools.com/"&gt;The Bible - Read and Study Free Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates-ebook/dp/B004P1JDJO"&gt;Drive&lt;/a&gt; by Daniel Pink&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Measure-What-Matters-Google-Foundation-ebook/dp/B078FZ9SYB"&gt;Measure What Matters&lt;/a&gt; by John Doerr&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say-ebook/dp/B07L2KL5XV"&gt;Leadership Is Language&lt;/a&gt; by David Marquet&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Crucial-Conversations-Tools-Talking-Stakes-ebook/dp/B093Y3N433"&gt;Crucial Conversations&lt;/a&gt; by Grenny, Patterson, et al&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture"&gt;Westrum Organizational Culture Taxonomy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I think it's pretty well established the reason for the myth of Babel exists at all is early people were trying to figure out &amp;quot;why do we have multiple languages?&amp;quot; Linguistics wasn't a thing, yet, and understanding the evolution of language is super hard anyway, so it was easier--and reasonable--to basically say &amp;quot;God did it.&amp;quot; I just wish they hadn't tacked on &amp;quot;and it's our fault.&amp;quot;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;From &lt;em&gt;Drive&lt;/em&gt; by Daniel Pink, see Resources.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 13:58:08 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project</guid>
    </item>
  </channel>
</rss>