<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>The ViewService Pattern: Especially Good For Windows Forms</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_viewservice_pattern__especially_good_for_windows_forms/images/form.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Windows Form development is still happening, is fast, and is reasonably easy to understand how to get started with. It's event-driven and hasn't changed much since Visual Basic. You drag controls onto a canvas, double-click the controls to open their event methods, and write what's supposed to happen.&lt;/p&gt;
&lt;p&gt;Thus, Frankenstein's monster was born.&lt;/p&gt;
&lt;p&gt;I'm taming the monster with a pattern I'm calling the ViewService. I won't create a Gang of Four class diagram, but basically a ViewService is a way of separating the code that manages ViewModels, and is a useful approach in Windows Forms. It's directly analagous to domain services and models.&lt;/p&gt;
&lt;p&gt;How often have you written or maintained code that looks like this? (note this is pseudocoding, not actual code.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class MainForm
{
    void buttonLoadData(object sender, EventArgs e)
    {
        var cn = new Connection(_connString);
        var cmd = new Command(cn, &amp;quot;select a.*, b.* from Customer a join Order b on a.CustomerId = b.CustomerId&amp;quot;);
        var reader = cmd.ReadResults();
        until (reader.Eof)
        {
            var co = ConvertReaderToCustomerOrder(reader.Read());
            grid1.Row.Add(new Row(co.Name, co.Zip);
            AddOrdersToGridRow(grid1.Rows[grid1.Rows.Length-1], co)
            if (co.Type = 1) { grid1.Rows[grid1.Rows.Length-1].BackgroundColor = Blue;}
            else if (co.Type = 3) { grid1.Rows[grid1.Rows.Length-1].BackgroundColor = Orange;}
        }
        
    }
    
    void AddOrdersToGridRows(Row row, CustomerOrder order, Connection cn)
    {
        foreach (var orderitem in order.Orders)
        {
            var cmd = new Command();
            cmd.Connection = cn;
            cmd.CommandText = String.Format (&amp;quot;select * from lineitems where OrderId = %1&amp;quot;,  orderitem.OrderId);
            var items = ToLineItems(cmd.ExecuteQuery());
            row[&amp;quot;Items&amp;quot;] = AddItemsToGrid(items, row);
            if (order.Type = 3 and items.Count() &amp;gt; 15) {row.BackgroundColor = Red;}
        }
        CheckIfMoreOrdersHaveArrivedAndPrintThem();
        
    }
    
    void buttonRefreshData(object sender, EventArgs e)
    {
        buttonLoadData(sender, e);
    }
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problems with the above code could occupy us for awhile, and they add up to one word: complication.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Events are doing too many things&lt;/li&gt;
&lt;li&gt;Events are called directly&lt;/li&gt;
&lt;li&gt;Tight coupling&lt;/li&gt;
&lt;li&gt;Inconsistent naming and coding style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how I recommend clearing up this kind of code by applying the ViewService pattern.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Group form events together&lt;/li&gt;
&lt;li&gt;Group together methods that only apply to this form&lt;/li&gt;
&lt;li&gt;Group methods that could apply to a &lt;strong&gt;replacement&lt;/strong&gt; form together, potentially into a service&lt;/li&gt;
&lt;li&gt;Form events present data, or call a method to preserve data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's apply these steps to the above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The code below is pretty sparse and incomplete. The goal is to give you the idea of what to do, not provide a full-fledged implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="group-form-events-and-methods"&gt;Group form events and methods&lt;/h2&gt;
&lt;p&gt;This is organizational, and clarifies what the &lt;em&gt;user&lt;/em&gt; is doing vs what the &lt;em&gt;developer&lt;/em&gt; is doing. (Methods collapsed for clarity.)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
+ void AddOrdersToGridRows(Row row, CustomerOrder order, Connection cn)...

#region &amp;quot;Control Events&amp;quot;

+ void buttonLoadData(object sender, EventArgs e)...
+ void buttonRefreshData(object sender, EventArgs e)...

#endregion

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="better-methods-and-names-and-events-call-custom-methods-instead-of-being-treated-as-custom-methods"&gt;Better methods and names, and events &lt;em&gt;call&lt;/em&gt; custom methods instead of being &lt;em&gt;treated&lt;/em&gt; as custom methods&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class MainForm
{
    List&amp;lt;CustomerOrderView&amp;gt; _customerOrders = new List&amp;lt;CustomerOrderView&amp;gt;();
    
    + void GetData()...
    + void LoadControls()
    
    void buttonLoadData(object sender, EventArgs e)
    {
        GetData();
        LoadControls();
    }
    void buttonCancel(object sender, EventArgs e)
    {
        LoadControls();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Already, we're gaining clarity.&lt;/p&gt;
&lt;h2 id="separate-the-data-calls-into-a-viewservice"&gt;Separate the data calls into a ViewService&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine the ViewService is going to be resued in a web application. That means it doesn't accept or process form controls, and is UI agnostic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the same Dependency Injection pattern used in web applications. The difference is that CustomerOrderViewService isn't a domain service, it's specific to this view of the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
class MainForm 
{
    ICustomerOrderViewService _customerOrderViewService = null;
    List&amp;lt;CustomerOrderView&amp;gt; _customerOrders = new List&amp;lt;CustomerOrderView&amp;gt;();

    
    + void MainForm(ICustomerOrderViewService)...
    
    void GetData()
    {
        _customerOrders = _customerOrderViewService.Get(txtCustomerId.Text);
    }
    
    void LoadControls()
    {
        if (_customerOrders == null) { GetData(); }
        gridOrders.DataSource = _customerOrders;
    }

}

//These two classes would be in separate files, and *could* be in a separate namespace
//to emphasize the decoupling.

class CustomerOrderViewService: ICustomerOrderViewService
{
    ICustomerOrderService _customerOrderService = null;
    
    + public CustomerOrderViewService(ICustomerOrderService _customerOrderService)...
    

    public List&amp;lt;CustomerOrderView&amp;gt; Get(string customerId)
    {
        //This is the call to the *domain service*. It might call the database directly, or might in turn call a web api.
        
        //Returns type CustomerOrder
        var customerOrders = _customerOrderService.GetOrdersByCustomer(string customerId);
        
        //Mapping
        return customerOrders.Select(a =&amp;gt; a.ToCustomerOrderView());
    }
    
}

class static CustomerOrderViewServiceHelpers
{
    public static ToCustomerOrderView (this CustomerOrder customerOrder)
    {
        return new CustomerOrderView()
        {
            Name = customerOrder.Name,
            CustomerType = customerOrder.CustomerType,
            etc....
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-happy-wrap-up"&gt;The Happy Wrap Up&lt;/h2&gt;
&lt;p&gt;By applying the ViewService pattern, we can separate Windows Form code into cleaner areas of concern, making our code clear, testable, maintainable and replaceable.&lt;/p&gt;
</description>
      <pubDate>Sun, 13 Oct 2019 12:03:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_viewservice_pattern__especially_good_for_windows_forms</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_viewservice_pattern__especially_good_for_windows_forms</guid>
    </item>
    <item>
      <title>Most of Us Developers Aren't Smart</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/most_of_us_developers_arent_smart/images/light-bulbs-styled-after-felix-gonzalez-torres.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Most of us developers think we're smart. But we aren't smart. We're clever.&lt;/p&gt;
&lt;p&gt;And confused.&lt;/p&gt;
&lt;p&gt;You can easily prove this by looking at our code. Specifically, by answering these questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many layers of indirection are there?&lt;/li&gt;
&lt;li&gt;How many abstractions of abstractions are there?&lt;/li&gt;
&lt;li&gt;How many different things are our methods doing?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Combined, these reveal how complicated a set of code is.&lt;/p&gt;
&lt;p&gt;What we do as developers is complex. There are lots of little moving parts that all need to work together.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Complex: composed of many interconnected parts; compound; composite&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Complicated: difficult to analyze, understand, explain, etc.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because we're clever, we think we understand how to manage this complexity. But we don't. We're confused by it. So, instead of making the complex clear, we complicate it. We add stuff that makes those moving parts harder to understand (over-use of indirection and abstraction), and harder to work together (method multi-responsibility).&lt;/p&gt;
&lt;p&gt;No one likes to hear this or face it in themselves. But we face it too often when supporting others' code. It comes with that little, internal question, &amp;quot;Couldn't this be easier?&amp;quot;&lt;/p&gt;
&lt;p&gt;So, what do we do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, decide that &amp;quot;we&amp;quot; applies to &amp;quot;you.&amp;quot; It's better to start with this assumption because it leads to learning rather than avoidance. If I insist I'm smart, I won't make the effort to learn better--thus, not smart. But if I insist I can be better, no matter how good I am, then the path to improvement and away from stagnation opens long and wide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, find examples of complex code that isn't complicated. Open source projects coming out of Microsoft and Google are good starting points.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, Read about and apply the principles behind uncomplicating code. Three of these are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, be guided by four overarching principles in your architecture and coding. Make your code...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clear&lt;/li&gt;
&lt;li&gt;Maintainable&lt;/li&gt;
&lt;li&gt;Testable&lt;/li&gt;
&lt;li&gt;Replaceable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We may not &lt;em&gt;be&lt;/em&gt; smart, but be can code smarter.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;strong&gt;Complex&lt;/strong&gt; 1645–55; 1905–10 for def 7; (adj.) &amp;lt; Latin complexus, past participle of complectī, complectere to embrace, encompass, include, equivalent to complect- (see complect) + -tus past participle suffix; (noun) &amp;lt; Late Latin complexus totality, complex (Latin: inclusion, grasping, embrace), equivalent to complect(ere) + -tus suffix of v. action; reanalysis of the Latin v. as “to intertwine (completely)” has influenced sense of the adj.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;strong&gt;Complicated&lt;/strong&gt; 1615–25; &amp;lt; Latin complicātus (past participle of complicāre to fold together), equivalent to com- com- + -plic- (combining form of *plecāre to fold, akin to plectī to plait; see complex) + -ātus -ate1&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 13 Oct 2019 11:15:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/most_of_us_developers_arent_smart</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/most_of_us_developers_arent_smart</guid>
    </item>
    <item>
      <title>Confirmed Android text punctuation voice commands</title>
      <description>&lt;p&gt;This is what I've confirmed can be done on an Android phone. (From what I've read, Apple is superior in its speech-recognition of punctuation.)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Enter once then capitalize&lt;/td&gt;
&lt;td&gt;&amp;quot;new line&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter twice then capitlize&lt;/td&gt;
&lt;td&gt;&amp;quot;new paragraph&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;&amp;quot;period&amp;quot; &amp;quot;dot&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;&amp;quot;question mark&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;&amp;quot;exclamation point&amp;quot; &amp;quot;exclamation mark&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;&amp;quot;comma&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&amp;quot;hyphen&amp;quot; &amp;quot;dash&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;&amp;quot;percent sign&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:-)&lt;/td&gt;
&lt;td&gt;&amp;quot;smiley face&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:-(&lt;/td&gt;
&lt;td&gt;&amp;quot;sad face&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;&amp;quot;dot dot dot&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      <pubDate>Sun, 6 Oct 2019 15:17:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/confirmed_android_text_punctuation_voice_commands</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/confirmed_android_text_punctuation_voice_commands</guid>
    </item>
    <item>
      <title>Summary of "Accelerate State of DevOps 2019"</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/summary_of_accelerate_state_of_devops_2019/images/ScreenCap_2019-10-03_22-02-21.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This year's report from DevOps Research and Assessment (DORA) starts with &lt;a href="https://cloud.google.com/blog/products/devops-sre/the-2019-accelerate-state-of-devops-elite-performance-productivity-and-scaling"&gt;The 2019 Accelerate State of DevOps: Elite performance, productivity, and scaling&lt;/a&gt;, which links to more detailed information.&lt;/p&gt;
&lt;p&gt;DORA provides, in my opinion, the best researched information on DevOps available. Making implementation decisions based on their insights is a safe bet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The report provides a comprehensive view of the DevOps industry.... With six years of research and data from more than 31,000 professionals worldwide, the 2019 Accelerate State of DevOps Report is the largest and longest-running research of its kind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My notes, below, are primarily quotes from the reports, even when I haven't explicitly quoted the text. Spelling/grammar mistakes are mine, and I'm sure I'll hear about them from my wife.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You really should download and read the report. I haven't captured everything here, just what caught my attention.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#highlights-from-the-summary"&gt;Highlights from the summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-quick-assessment"&gt;The Quick Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-full-report"&gt;The Full Report&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#executive-summary"&gt;Executive Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#who-took-the-survey?"&gt;Who Took the Survey?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demographics-and-firmographics"&gt;Demographics and Firmographics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-elite-performers...perform?"&gt;How do Elite Performers...Perform?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-reserch-models"&gt;The Reserch Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#software-delivery-&amp;amp;-operational-performance"&gt;Software Delivery &amp;amp; Operational Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#productivity"&gt;Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-we-transform:-what-really-works"&gt;How Do We Transform: What Really Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-thoughts."&gt;Final Thoughts.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-info"&gt;More Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="highlights-from-the-summary"&gt;Highlights from the summary&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;From 2018 to 2019, &amp;quot;elite&amp;quot; performers rose from 7% to 20% of all organizations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've called out the above because it dramatically &amp;quot;shows that excellence is possible—those that execute on key capabilities see the benefits.&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;For the first time, industry matters&amp;quot; Retail performed better in speed and stability. But that doesn't impact the evidence that all organizations can benefit from DevOps.&lt;/li&gt;
&lt;li&gt;&amp;quot;[T]he highest DevOps performers (that is, the high and elite performers), focus on structural solutions that build community&amp;quot;&lt;/li&gt;
&lt;li&gt;Low performers use more proprietary software, high and elite performers use more open source software. Reason? cost.&lt;/li&gt;
&lt;li&gt;The detailed report has two research models: performance and productivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This year’s report revalidates important findings for the sixth year in a row: First, that it’s possible to optimize for stability without sacrificing speed. Second, DevOps delivers value to customers and end users by impacting both commercial and non-commercial goals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-quick-assessment"&gt;The Quick Assessment&lt;/h2&gt;
&lt;p&gt;DORA provides on line the same assessment they ask of organizations. It'll give you a quick understanding of where your business stands compared to others in the same industry. I've listed the metrics in the Executive Summary section, below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.devops-research.com/quickcheck.html"&gt;DevOps quick check&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-full-report"&gt;The Full Report&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.google.com/devops/state-of-devops/"&gt;Download the full report&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="executive-summary"&gt;Executive Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Our research continues to show that the industry-standard &lt;a href="https://www.thoughtworks.com/radar/techniques/four-key-metrics"&gt;Four Key Metrics&lt;/a&gt; of software development and delivery drive organizational performance in technology transformations.&amp;quot;
&lt;ul&gt;
&lt;li&gt;Lead time (time from code committed to code released to production)&lt;/li&gt;
&lt;li&gt;Deployment frequency&lt;/li&gt;
&lt;li&gt;Mean time to restore (when there's an outage or bug that affects usage)&lt;/li&gt;
&lt;li&gt;Chail fail percentage (of released changes, how many fail and affect usage)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;quot;For organizations seeking guidance on how to improve, we point to the only real path forward: Start with foundations, and then adopt a continuous improvement mindset by identifying your unique constraint (or set of constraints). Once those constraints no longer hold you back, repeat the process.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;The use of cloud—as defined by NIST Special Publication 800-145— is predictive of software delivery performance and availability. The highest performing teams were 24 times more likely than low performers to execute on all five capabilities of cloud computing.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="who-took-the-survey"&gt;Who Took the Survey?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Overall, we see similar representation across key demographic and firmographic measures when compared to last year, other than a &lt;em&gt;noticeable drop in the reported percentage of women on teams&lt;/em&gt;.&amp;quot;  (emphasis mine)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="demographics-and-firmographics"&gt;Demographics and Firmographics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gender: Male 83%, Female 10%, Other 7%&lt;/li&gt;
&lt;li&gt;Disability: 6%&lt;/li&gt;
&lt;li&gt;Underrepresented groups: 14%&lt;/li&gt;
&lt;li&gt;More than 16 years exeperience: 48%&lt;/li&gt;
&lt;li&gt;Departments: Dev/Eng 30%, DevOps/SRE 26%, Manager 16%, IT Ops/Infrastructure 5%&lt;/li&gt;
&lt;li&gt;Industry: Tech 38%, Finance 12%, Retail/Consumer/e-Commerce 9%&lt;/li&gt;
&lt;li&gt;Region: North America 50%, EU/UK 29%. Respondents from Asia fell from 18% to 9%.&lt;/li&gt;
&lt;li&gt;Employees: 10K+ 26%, 100-499 21%, 500-1,999 15%, 20-99 13%&lt;/li&gt;
&lt;li&gt;Operating Systems: Looks like an even split between Windows and Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-do-elite-performers.perform"&gt;How do Elite Performers...Perform?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deployment Frequency: &lt;strong&gt;On Demand (multiple deploys per day)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Lead time for changes: &lt;strong&gt;Less than one day&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Time to restore service: &lt;strong&gt;Less than on hour&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Change failure rate: &lt;strong&gt;0-15%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-research-models"&gt;The Research Models&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;SDO Performance&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Productivity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Culture of Psychological Safety&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Culture of Psychological Safety&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Change Management&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Useful, Easy-To-Use Tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Cloud&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Internal Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Technical Practices&lt;/td&gt;
&lt;td style="text-align: center;"&gt;External Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Disaster Recovery Testing&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Technical Debt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="software-delivery-operational-performance"&gt;Software Delivery &amp;amp; Operational Performance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn from the retail example, who...
&lt;ul&gt;
&lt;li&gt;Embraced A/B testing to understand customers' buying habits&lt;/li&gt;
&lt;li&gt;Require efficiency and automation&lt;/li&gt;
&lt;li&gt;Leveraged the cloud to enable handling swings in demand&lt;/li&gt;
&lt;li&gt;Learned how to operate in regulated environments quickly and securely.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More and more organizations are choosing multi-cloud and hybrid cloud solutions.&lt;/li&gt;
&lt;li&gt;What matters is &lt;em&gt;how teams implement their cloud services&lt;/em&gt;. The five essential characteristics of cloud computing are:
&lt;ol&gt;
&lt;li&gt;On-demand self-service&lt;/li&gt;
&lt;li&gt;Broad network access (from desktop, phone, etc)&lt;/li&gt;
&lt;li&gt;Resource pooling (multi-tenant models)&lt;/li&gt;
&lt;li&gt;Rapid elasticity (immediate capability provionsing)&lt;/li&gt;
&lt;li&gt;Measured service (automatic resource usage reporting)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Technical Practices: Execute for maximum effect. It's useful to include these complete statements:
&lt;blockquote&gt;
&lt;p&gt;Many organizations wanting to adopt DevOps look for a set of prescriptive steps or best practices to guide their journey. However, every organization is different and which practices to adopt depends on the current state of the organization—including the state of its technology, culture, and processes—and its short- and long-term goals.&lt;/p&gt;
&lt;p&gt;The solution is to take a holistic approach, where you first work to understand the constraints in your current software delivery process with an eye to your short- and long-term outcomes in measurable terms. Then empower teams to decide how best to accomplish those outcomes— after all, they are the experts in their work and context.14 Those who adopt this approach see more scalable and flexible solutions, and by not having to micromanage detailed execution plans, management can focus on high-level outcomes, allowing their organizations to grow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;This year, the research looked at the relationship between continuous integration and automated testing and found that automated testing positively impacts CI.&lt;/li&gt;
&lt;li&gt;Loosely coupled architecture is still important&lt;/li&gt;
&lt;li&gt;Code maintainability positively contiributes to successful continous delivery (CD)&lt;/li&gt;
&lt;li&gt;Disaster recovery plans without testing are useless.&lt;/li&gt;
&lt;li&gt;Only 40% of respondents perform disaster recovery testing at least annually using one or more of the methods listed. Organizations that conduct disaster recovery tests are more likely to have higher levels of service availability—that is, the ability for technology teams and organizations to make and keep promises and assertions about the software product or service they are operating.&lt;/li&gt;
&lt;li&gt;Heavyweight change processes, such as change advisory boards, negatively impact software delivery performance.&lt;/li&gt;
&lt;li&gt;A culture of psychological safety is predictive of software delivery performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="productivity"&gt;Productivity&lt;/h3&gt;
&lt;p&gt;This is the first year DORA has investigated productivity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what is productivity, and how should we measure it? Productivity cannot be captured with a simple metric such as lines of code, story points, or bugs closed; doing so results in unintended consequences that sacrifice the overall goals of the team. For example, teams may refuse to help others because it would negatively impact their velocity, even if their help is important to achieve organizational goals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Productivity is the ability to get complex, time-consuming tasks completed with minimal distractions and interruptions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Developers need useful and easy-to-use tools. Purchasing based on lower cost is the wrong approach, because harder-to-use tools cost developers in productivity.&lt;/li&gt;
&lt;li&gt;&amp;quot;Automation is truly a sound investment.&amp;quot;&lt;/li&gt;
&lt;li&gt;Effective ability to search and find internal resources increases productivity.&lt;/li&gt;
&lt;li&gt;Likewise (and slightly lower) productivity is seen when searching external sources such Stack Overflow.&lt;/li&gt;
&lt;li&gt;&amp;quot;Every minute spent on not-quite-right code counts as interest on that debt. Entire
engineering organizations can be brought to a standstill under the debt load of an
unconsolidated implementation.&amp;quot; --Ward Cunningham, 1992&lt;/li&gt;
&lt;li&gt;Additional Benefits of Improved Productivity
&lt;ul&gt;
&lt;li&gt;Better work recovery (leaving work at work)&lt;/li&gt;
&lt;li&gt;Reduced burnout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-do-we-transform-what-really-works"&gt;How Do We Transform: What Really Works&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Mashups are commonly reported in this sample at 40%, but they lack sufficient funding and resources in any particular investment. We caution that without a strategy to guide a technology transformation, organizations will often make the mistake of hedging their bets and suffer from “death by initiative”: identifying initiatives in too many areas, which ultimately leads to underresourcing important work and dooming them all to failure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The top two strategies employed are Communities of Practice and Grassroots, followed by Proof of Concept (PoC) as a Template (a pattern where the PoC copies) and PoC as a Seed.&lt;/li&gt;
&lt;li&gt;The four strategies that work (used by high/elite performers). See the report's Appendix B for details.
&lt;ol&gt;
&lt;li&gt;Community Builders, seen 46% of the time&lt;/li&gt;
&lt;li&gt;University, 9%&lt;/li&gt;
&lt;li&gt;Emergent, 23%&lt;/li&gt;
&lt;li&gt;Experimenters, 22%&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-thoughts"&gt;Final Thoughts.&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Every decade has its own trendy software methodology. While they all seem to feel better, history proves them to be ineffective. However, we see continued evidence that DevOps delivers value, and for six consecutive years, we have statistically verified key capabilities and practices that help organizations improve their software development and delivery using DevOps methods.&lt;/p&gt;
&lt;p&gt;DevOps is not a trend, and will eventually be the standard way of software development and operations, offering everyone a better quality of life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="more-info"&gt;More Info&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.google.com/devops/"&gt;DevOps Solutions | Google Cloud&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 3 Oct 2019 19:58:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/summary_of_accelerate_state_of_devops_2019</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/summary_of_accelerate_state_of_devops_2019</guid>
    </item>
    <item>
      <title>Posh-git Fork to Allow Visual Studio to Use TFVC and Ignore Git</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git/images/git-plus-tfvc.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Source Code: &lt;a href="https://github.com/bladewolf55/posh-git-tfvc"&gt;bladewolf55/posh-git-tfvc: A PowerShell environment for Git, modified to use with TFVC-based solutions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I created this version of posh-git to handle a specific use case: a developer works for a company that requires using TFVC, but she wants to use Git locally to gain its rapid branching/merging abilities. Yet, she also wants to get the benefits of using Visual Studio's TFVC integration, namely CodeLens information.&lt;/p&gt;
&lt;p&gt;Visual Studio supports both TFVC and Git version controls, and you're allowed to choose which one to use via Options &amp;gt; Source Control. Except, not really. If your solution has a .git folder or .git file, VS assumes you're using Git even if you also have a $tf file or your solution/projecs are configured for TFVC.&lt;/p&gt;
&lt;p&gt;The general solution is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rename .git to _git&lt;/li&gt;
&lt;li&gt;Set environment variable GIT_DIR to the full path to the _git folder&lt;/li&gt;
&lt;li&gt;Set environment variable GIT_WORK_TREE to the full path to the working folder&lt;/li&gt;
&lt;li&gt;Add line to .gitignore to ignore the _git folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git/images/ScreenCap_2019-09-24_20-46-29.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;My modifications to the &lt;code&gt;GitUtils.ps1&lt;/code&gt; file accomplish that.&lt;/p&gt;
&lt;p&gt;As a bonus, in the &lt;code&gt;test _git&lt;/code&gt; folder there's a file containing a Git alias to initialize a repo using a _git folder and the appropriate .gitignore and .tfignore changes.&lt;/p&gt;
&lt;p&gt;It's not fancy, and I'm sure a better developer can improve on it.&lt;/p&gt;
</description>
      <pubDate>Tue, 24 Sep 2019 20:04:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/posh-git_fork_to_allow_visual_studio_to_use_tfvc_and_ignore_git</guid>
    </item>
    <item>
      <title>ASP.NET Core Controllers - Exploring How To Test a Simple Feature</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/asp_net_core_controllers_-_exploring_how_to_test_a_simple_feature/images/header.png" alt="" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#puzzle-1:-the-controller"&gt;Puzzle 1: The Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#puzzle-2:-the-service"&gt;Puzzle 2: The Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-testing:-the-proof-of-the-pudding-is-in-the-tasting"&gt;Functional Testing: The Proof of the Pudding Is In the Tasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-up"&gt;Wrap Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Here's a brief feature description: &lt;em&gt;When a user story is saved, if it's new then it's assigned the latest sequence number + 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;How might this be developed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using Test-Driven Development (TDD)&lt;/li&gt;
&lt;li&gt;...in a web application&lt;/li&gt;
&lt;li&gt;...that calls a service?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="puzzle-1-the-controller"&gt;Puzzle 1: The Controller&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In truth, this article isn't specific to ASP.NET Core. But it's what I was working on at the time, &lt;em&gt;and&lt;/em&gt; I found the answer via a Core-specific article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To illustrate where we can have mental hiccups, let's start with the controller and work &lt;em&gt;backwards&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    [HttpPost]
    public IActionResult SaveStory(UserStory model)
    {
        if (!ModelState.IsValid)
        {
            return View(model);
        }

        //Save
        //The service takes care of setting the Sequence property on new models.
        model = _storyService.SaveStory(model);

        return RedirectToAction(actionName: nameof(Index));
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is reasonable code. The controller passes the model to the service, and the service implements the business rule ofincrementing the Sequence property.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take a minute and ask yourself: What would your controller's unit test...test?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Done? Now ask yourself: If I &lt;em&gt;hadn't written any code yet&lt;/em&gt;, what would I test for?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe your first answer started off something like this in your imagination.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
    [Fact]
    public void SaveStory_increments_UserStory_Sequence_by_one()
    {
        //arrange
        var service = MockUserStoryService();
        service.MaxSequence = 10;
        UserStory userStory = new UserStory(service) 
        {
            // set some fields
        };
        var controller = new HomeController();
        //act
        var result = controller.SaveStory(model);
        //assert
        result.Should().Be()...uh...um....
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there's the trap. What I, and I'm sure others, find hard about unit testing and TDD is being clear on the dependencies of what's being testing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In TDD, ask yourself, &amp;quot;What is this &lt;em&gt;unit&lt;/em&gt; going to do or change &lt;em&gt;by itself&lt;/em&gt;?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My first thought would be, &amp;quot;Well, the Sequence is going to change. That's the feature, after all.&amp;quot; But that isn't what the controller is doing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assuming no errors, the only thing the controller does is pass the model to the service's SaveStory method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The service is a dependency, and we don't test a dependency's behavior. Let me call that one out, because it's crucial.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In unit testing, don't test a &lt;em&gt;dependency's&lt;/em&gt; behavior.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You &lt;em&gt;always&lt;/em&gt; control the dependency's state, and &lt;em&gt;always&lt;/em&gt; return a value you've determined. What you test is what the unit is supposed to &lt;em&gt;do&lt;/em&gt; with that value. This is why we mock dependencies.&lt;/p&gt;
&lt;p&gt;OK, what's the unit test for the controller? I admit, I was puzzled until I read Steve Smith's article, &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/testing"&gt;Test controller logic in ASP.NET Core | Microsoft Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I should ensure that the service's &lt;code&gt;SaveStory&lt;/code&gt; method was called. I don't need to test &lt;em&gt;that&lt;/em&gt; something was saved, only that it &lt;em&gt;should&lt;/em&gt; be. He's using Moq's &lt;code&gt;Validate&lt;/code&gt; feature for this. I can implement a similar feature in a self-created mock.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    // https://stackoverflow.com/a/11296961/1628707
    // This is one of those cases where it's simpler to inherit Collection&amp;lt;T&amp;gt;
    // and add a couple of needed methods.
    public class CalledMethods : Collection&amp;lt;CalledMethod&amp;gt;
    {

        public CalledMethod this[string name]
        {
            get { return this.SingleOrDefault(a =&amp;gt; a.Name == name); }
        }

        private CalledMethod AddAndReturn(string name)
        {
            
            if (this[name] == null) Add(new CalledMethod(name,0));
            return this[name];
        }

        /// &amp;lt;summary&amp;gt;
        /// Adds a &amp;lt;see cref=&amp;quot;CalledMethod&amp;quot;/&amp;gt; if necessary and increments its &amp;lt;see cref=&amp;quot;CalledMethod.Count&amp;quot;/&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
        public void Increment(string name)
        {
            var entry = this[name] ?? AddAndReturn(name);
            entry.Count++;
        }
    }
    
    public class CalledMethod
    {
        public string Name { get; set; }
        public int Count { get; set; }

        public CalledMethod() { }
        public CalledMethod(string name, int count = 0)
        {
            Name = name;
            Count = count;
        }
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling from the Mock class method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    public UserStory SaveStory(UserStory story)
    {
        CalledMethods.Increment(System.Reflection.MethodBase.GetCurrentMethod().Name);
        CheckException();
        return UserStory;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And using in the test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    // assume arrange and act before this, then
    _storyService.CalledMethods[&amp;quot;SaveStory&amp;quot;].Count.Should().Be(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="puzzle-2-the-service"&gt;Puzzle 2: The Service&lt;/h2&gt;
&lt;p&gt;We still haven't implemented the feature. In fact, arguably we shouldn't have written the controller or its test at all; the controller doesn't save the story, the service does.&lt;/p&gt;
&lt;p&gt;Regardless, let's write the test first this time:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public void SaveStory_sets_new_UserStory_Sequence_to_Max_plus_one()
{
    var service = new UserStoryService();
    var userStory = new UserStory()
    {
        //set needed fields. Sequence is null or 0.
        
    };
    userStory = service.SaveStory(userStory);
    
    userStory.Sequence.Should().Be(???);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah. We run into a question of how to setup the Max Sequence. But writing the test is helping us. We need to answer&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does the service depend on something else to get the MaxSequence?&lt;/li&gt;
&lt;li&gt;If so, mock it&lt;/li&gt;
&lt;li&gt;If not, &lt;em&gt;it will be a functional test&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's assume our service depends on a data service, and finish the unit test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Fact]
public void SaveStory_sets_new_UserStory_Sequence_to_Max_plus_one()
{
    var dataService = new MockDataService();
    dataService.MaxSequence = 15;    
    var service = new UserStoryService(dataService);
    var userStory = new UserStory()
    {
        //set needed fields. Sequence is null or 0.
        
    };
    userStory = service.SaveStory(userStory);
    
    userStory.Sequence.Should().Be(16);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For you to figure out: What if SaveStory were a void method?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="functional-testing-the-proof-of-the-pudding-is-in-the-tasting"&gt;Functional Testing: The Proof of the Pudding Is In the Tasting&lt;/h2&gt;
&lt;p&gt;At some point, some piece of code is actually persisting data. There's no way to unit test that. If your service depends on an ORM such as Entity Framework (EF), then you can mock EF. But if you want to test that that your concrete UnitOfWork/Repository/DbContext/Whatever works as expected, you have to use a real database and check the values. Another example: if you at some point write to file, you'll need to write functional tests for that, and verify that what was written is what you expected.&lt;/p&gt;
&lt;p&gt;Bonus: how might the functional tests look? Remember, these will be slower and likely run as part of a separate project, just like your integration tests.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class DataServiceTests {
    Db _db = new Db();
    public DataServiceTests()
    {
        //In xUnit.Net, the constructor is used to reset the environment
        //to a known state.
        //There could be a lot of actions to take, so this is simplistic.
        _db.Reset();
    }

    [Fact]
    public void GetMaxSequence_returns_expected_value()
    {
        var service = new DataService(_db);
        //Our known starting point for MaxSequence is 10.
        service.GetMaxSequence().Should().Be(10);
    }
    
    [Fact]
    public void IncrementMaxSequence_sets_expected_value()
    {
        var service = new DataService(_db);
        // _db is reset before every test, so MaxSequence is 10 again.
        service.IncrementMaxSequence(1);
        service.GetMaxSequence().Should().Be(11);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;TDD isn't nearly so much what to do, as how to think. Especially, I find it forces thinking about how to decouple code and make it testable. The tricky part, requiring practice, is seeing what are dependencies and what aren't. Knowing what your unit is responsible for.&lt;/p&gt;
&lt;p&gt;I think learning from the simplest cases is great, because it teaches the principles to apply.&lt;/p&gt;
</description>
      <pubDate>Thu, 12 Sep 2019 22:15:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/asp_net_core_controllers_-_exploring_how_to_test_a_simple_feature</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/asp_net_core_controllers_-_exploring_how_to_test_a_simple_feature</guid>
    </item>
    <item>
      <title>Remote Micro-Exclusions: Two Poor Daily Standup Practices</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/remote_micro-exclusions-_two_poor_daily_standup_practices/images/Symbolism-Leader-Group-Game-Figure-Exclusion-598036.jpg" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="remote-micro-exclusion"&gt;Remote (Micro) Exclusion&lt;/h2&gt;
&lt;p&gt;&amp;quot;Remote exclusion&amp;quot; happens when remote developers are treated as less equal than on-site developers. This usually isn't intentional, but is instead a result of group dynamics.&lt;/p&gt;
&lt;p&gt;Some behaviors, such as not including remote workers in decisions because it's &amp;quot;too much of a bother&amp;quot; to contact them, are obvious when pointed out. But there are other actions that seem innocuous, yet contribute to the problem. These are&amp;quot;remote micro-exclusions&amp;quot;&lt;/p&gt;
&lt;p&gt;Consider the daily standup meeting where the bulk of the team is on site, and a few are remote. Here are two practices that can unconsciously devalue the remote team.&lt;/p&gt;
&lt;h2 id="no-video"&gt;No Video&lt;/h2&gt;
&lt;p&gt;There are three basic ways to communicate with the remote team in a live meeting.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Audio Only&lt;/li&gt;
&lt;li&gt;One-Way Video&lt;/li&gt;
&lt;li&gt;Two-Way Video&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;The first two ways are a problem.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Audio Only&lt;/strong&gt;: Unless someone on the remote team is vociferous, they'll be ghosts, rarely seen nor heard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Way Video&lt;/strong&gt;: To my mind, this is worse than audio-only. The implication is, &amp;quot;they can see us, be we don't need to see them.&amp;quot; The on-site team only see their avatars, at best.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's critically missing without two-way video is the visual cues. How is the remote team reacting? What are they seeing at the main site? What is everyone communicating physically?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two-Way Video is a must because, &amp;quot;if words and body language disagree, one tends to believe the body language&amp;quot;&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; And in those cases, body language can be 55% of communication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="remote-team-last"&gt;Remote Team Last&lt;/h2&gt;
&lt;p&gt;If the remote team always goes last, it's likely they'll always have less time. Unless a daily standup is being run really strictly, there's going to be conversation about whatever each developer is working on. If there's no two-way video it's worse. The &amp;quot;main&amp;quot; team will tend to dominate the conversation because they can see each other. Consider that for a team of eight, a fifteen minute standup gives each person two minutes. That's honestly plenty of time to report what happened yesterday, what's being worked on today, what's blocking, getting &lt;em&gt;quick&lt;/em&gt; answers, and setting up &lt;em&gt;follow ups&lt;/em&gt; on issues that take too long for the meeting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, this is a standup management problem. &amp;quot;I'll email you to schedule a talk&amp;quot; should be said frequently. But the remote team is still devalued by going consistently last.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="solutions"&gt;Solutions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Everyone must be visible on video. Work as if &lt;em&gt;everyone&lt;/em&gt; is remote.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Start&lt;/em&gt; standups with the remote team for a week or two, to remind everyone they're equally important. Then, randomize the order people go in.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remote work can benefit many companies and employees. It takes effort, but is a worthwhile practice to learn.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://remote.co/qa-leading-remote-companies/what-elements-are-key-to-successful-working-relationships-with-remote-teams/"&gt;What are the keys to successful remote team relationships?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.buffer.com/remote-work-tools/"&gt;12 Essential Remote Work Tools We're Using at Buffer Every Day&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.rightattitudes.com/2008/10/04/7-38-55-rule-personal-communication/"&gt;Albert Mehrabian’s 7-38-55 Rule of Personal Communication&lt;/a&gt; It should be noted that these oft-quoted ratios have their limitations and critics.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Thu, 1 Aug 2019 20:00:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/remote_micro-exclusions-_two_poor_daily_standup_practices</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/remote_micro-exclusions-_two_poor_daily_standup_practices</guid>
    </item>
    <item>
      <title>Memstate: The Practical Argument for Big, In-Memory Data</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/memstate-_the_practical_argument_for_big_in-memory_data/images/header.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Today I listened to a fascinating episode of Jamie Taylor's &lt;a href="https://dotnetcore.show/"&gt;The .NET Core Podcast&lt;/a&gt;, featuring an &lt;a href="https://dotnetcore.show/episode-28-memstate-with-robert-friberg/"&gt;interview with developer Robert Friberg&lt;/a&gt;. Do listen to it.&lt;/p&gt;
&lt;p&gt;Friberg and his team have been working on &lt;a href="https://github.com/DevrexLabs/memstate"&gt;Memstate&lt;/a&gt;, an in-memory database. When I first started listening, I thought &amp;quot;this sounds like one of those interesting, technical edge-cases, but I'm not sure I see the point.&amp;quot; By the end, I not only understood, I wanted to start using it! But since I don't know how soon that will happen, here's the compelling meat.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Relational databases solve a problem that doesn't exist anymore. That problem is limited memory relative to dataset size.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Your OLTP data can probably all fit in RAM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, simplistically, is how Memstate looks compared to a relational database.&lt;/p&gt;
&lt;p&gt;In a relational database, the data is: Read into Memory &amp;gt; Changed in Memory &amp;gt; Saved to Transaction Log &amp;gt; Saved to Storage &amp;gt; (Potentially) Reread into Memory&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/memstate-_the_practical_argument_for_big_in-memory_data/images/rdb-flow.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;In a memory image, the data is: &lt;em&gt;Already&lt;/em&gt; in Memory &amp;gt; Changed in Memory &amp;gt; &lt;em&gt;Change&lt;/em&gt; is saved to Transaction log&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/memstate-_the_practical_argument_for_big_in-memory_data/images/memstate-flow.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;The idea of keeping all needed data in RAM has been around for awhile. Friberg recommends reading &lt;a href="https://www.martinfowler.com/bliki/MemoryImage.htmlhttps://www.martinfowler.com/bliki/MemoryImage.html"&gt;Martin Fowler's description&lt;/a&gt; of the pattern, and so do I. This tidbit helped me grasp how &lt;em&gt;common&lt;/em&gt; the concept is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key element to a memory image is using event sourcing.... A familiar example of a system that uses event sourcing is a version control system. Every change is captured as a commit, and you can rebuild the current state of the code base by replaying the commits into an empty directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is fantastically straightforward. Why persist &lt;em&gt;state&lt;/em&gt; on every write? Why not just persist the &lt;em&gt;change&lt;/em&gt;, and keep the state in memory? In the past, the answer was &amp;quot;We can't fit all the data into memory, so you have to read it each time.&amp;quot; But as Friberg points out, you can configure an Azure virtual machine instance with 1 &lt;em&gt;terabyte&lt;/em&gt; of RAM!&lt;/p&gt;
&lt;p&gt;Friberg is clear that this method, like any, shouldn't be applied to all use cases. He nicely points out that even if you kept, for (his) example, all of IKEA's inventory levels for all its warehouses in memory, you &lt;em&gt;wouldn't&lt;/em&gt; keep all the product descriptions and images. Consider what we already do today with blob assets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We don't (typically) store images in version control. We reference it externally.&lt;/li&gt;
&lt;li&gt;We keep images in cache because it's static.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(And, of course, it also doesn't mean you &lt;em&gt;couldn't&lt;/em&gt; keep that data in memory.)&lt;/p&gt;
&lt;p&gt;Imagine if your order entry system data was running fully in memory. Now, ask--not rhetorically--&lt;em&gt;could it?&lt;/em&gt; The answer will very likely be yes.&lt;/p&gt;
&lt;p&gt;What happens if you need to perform maintenance? Surely it would take forever to replay &lt;em&gt;all&lt;/em&gt; those millions of commands (transactions).&lt;/p&gt;
&lt;p&gt;Friberg gives an example where a very large dataset could be loaded back into memory in about ten minutes.&lt;/p&gt;
&lt;p&gt;Finally, while most of the podcast discussed big data, I wonder about small data. One of the persistence stores for Memstate is--you guessed it--a file. I think this would be a great solution for any app that needs a small database. The state would load fast, the app would run fast, and there wouldn't be any of the overhead of using a database engine.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Want to go a step further? If the store is a file, &lt;em&gt;and&lt;/em&gt; if the amount of data isn't huge, &lt;em&gt;and&lt;/em&gt; if absolutle top performance isn't necessary, then I'll bet the transaction information could be stored as plain text. And &lt;em&gt;this&lt;/em&gt; means your data and history are future-proof.&lt;/p&gt;
&lt;p&gt;And that's how I like my data.&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://memstate.io/"&gt;MEMSTATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DevrexLabs/memstate"&gt;DevrexLabs/memstate: In-memory event-sourced ACID-transactional distributed object graph engine for .NET Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnetcore.show/episode-28-memstate-with-robert-friberg/"&gt;The .NET Core Podcast Episode 28 - memstate with Robert Friberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.martinfowler.com/bliki/MemoryImage.html"&gt;MemoryImage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Not that, for instance, &lt;a href="https://sqlite.org/index.html"&gt;SQLite&lt;/a&gt; is big. I think it's just a .dll.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Fri, 28 Jun 2019 17:45:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/memstate-_the_practical_argument_for_big_in-memory_data</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/memstate-_the_practical_argument_for_big_in-memory_data</guid>
    </item>
    <item>
      <title>Grammar for Developers - Apostrophes: 3 Simple Rules, 3 Common Mistakes</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/grammar_for_developers_apostrophes_3_simple_rules_3_common_mistakes/images/grammar-for-developers-apostrophes.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's a truism that (many) developers are not good writers. And it's not just style or composition, it's grammar. This has always puzzled me, since if a programmer makes a grammar mistake (using a backtick instead of an apostrophe, for instance), the program won't run. Maybe the problem is that they don't pay attention to the red squigglies in Word.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Arguably the worst error I see is wrongly using an apostrophe when &amp;quot;its&amp;quot; is possessive. Here's a  sentence to illustrate. Every apostrophe is correct.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Harvey's car's in the shop to have its radiator fixed before it's blown to bits.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Expand the contractions and the differences between possessives and contractions are clear. &lt;code&gt;Harvey's car is in the shop to have its radiator fixed before it is blown to bits.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are three rules that, if followed, would take care of about 70% of the most grievous errors I see in blog posts, emails, business proposals, and technical documentation.&lt;/p&gt;
&lt;p&gt;I even made a fancy PDF.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/grammar_for_developers_apostrophes_3_simple_rules_3_common_mistakes/Grammar%20for%20Developers%20-%20Apostrophes.pdf"&gt;Grammar for Developers - Apostrophes&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="simple-rules"&gt;3 Simple Rules&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Never make a pronoun possessive using an apostrophe&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always make a noun possessive using an apostrophe&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Never use an apostrophe with a verb&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="common-mistakes"&gt;3 Common Mistakes&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Right:  Unit testing has &lt;span style="background-color: yellow;"&gt;its&lt;/span&gt; benefits.&lt;/strong&gt;&lt;br /&gt;
Wrong:  Unit testing has &lt;span style="background-color: yellow;"&gt;it's&lt;/span&gt; benefits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Right:  &lt;span style="background-color: yellow;"&gt;Carol's&lt;/span&gt; code is clean. Her &lt;span style="background-color: yellow;"&gt;code's&lt;/span&gt; style is precise.&lt;/strong&gt;&lt;br /&gt;
Wrong:  &lt;span style="background-color: yellow;"&gt;Carols&lt;/span&gt; code is clean. Her &lt;span style="background-color: yellow;"&gt;codes&lt;/span&gt; style is precise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Right:  He &lt;span style="background-color: yellow;"&gt;runs&lt;/span&gt; that backup every day.&lt;/strong&gt;&lt;br /&gt;
Wrong: He &lt;span style="background-color: yellow;"&gt;run's&lt;/span&gt; that backup every day.&lt;/p&gt;
&lt;h1 id="terms"&gt;Terms&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;noun&lt;/strong&gt; is a specific person, place, thing or idea:
Carol, France, house, radish, memory, Chipotle.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;pronoun&lt;/strong&gt; is a generic, non-specific person or thing.
These are the common pronouns: it, he, she, her, them, they.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;verb&lt;/strong&gt; is an action taken by the subject.
He &lt;em&gt;codes&lt;/em&gt;. She &lt;em&gt;tests&lt;/em&gt;. They &lt;em&gt;demonstrate&lt;/em&gt;.&lt;/p&gt;
</description>
      <pubDate>Thu, 20 Jun 2019 11:07:30 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/grammar_for_developers_apostrophes_3_simple_rules_3_common_mistakes</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/grammar_for_developers_apostrophes_3_simple_rules_3_common_mistakes</guid>
    </item>
    <item>
      <title>Weekly Sugar: 'Accelerate', the Best Book About DevOps</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/devops/accelerate_notes_and_quotes/accelerate-header.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;I run a Meetup called &lt;em&gt;&lt;a href="https://www.meetup.com/Coffee-Quiet-Code/"&gt;Coffee. Quiet. Code.&lt;/a&gt;&lt;/em&gt; I want to encourage developers to work together in the same casual space without having to discuss anything or even interact much. It could be seen as a far less rigid version of Mycroft Holmes' &lt;a href="https://en.wikipedia.org/wiki/Diogenes_Club"&gt;&amp;quot;Dionysus Club&amp;quot;&lt;/a&gt;, a way to enjoy shared community.&lt;/p&gt;
&lt;p&gt;My inspiration came from people, often strangers, reading together in libraries, and also the sweet memories of my whole family reading their separate books they received as holiday gifts. In that spirit, here's a book recommendation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM"&gt;Accelerate: The Science of Lean Software and DevOps&lt;/a&gt; is exactly what it claims to be: high-quality, peer-reviewed research answering the practical question &amp;quot;What's really working in software development across all industries and team sizes?&amp;quot; There are plenty of opinions out there on DevOps. This book deals in facts.&lt;/p&gt;
&lt;p&gt;I wrote an extensive book summary for a client, which you'll find on my web site.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/devops/accelerate_notes_and_quotes/"&gt;'Accelerate' Book Notes And Quotes | Software Meadows&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 18 Jun 2019 14:02:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/weekly_sugar-_accelerate__the_best_book_about_devops</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/weekly_sugar-_accelerate__the_best_book_about_devops</guid>
    </item>
  </channel>
</rss>