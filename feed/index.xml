<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Weekly Sugar: When (not) to Drink Coffe, a Preview</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/weekly_sugar-_when_(not)_to_drink_coffe__a_preview/images/coffee-clock.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;A few years ago I researched and posted about when--and when not--to drink coffee. I'm going to repost that article to &lt;a href="https://www.softwaremeadows.com"&gt;https://www.softwaremeadows.com&lt;/a&gt; in the next several days. Until then, then gist is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Science shows drinking coffee first thing in the morning negatively affects one’s circadian rhythm by inhibiting the production of cortisol, which the body uses to naturally wake us up. Instead, we should drink coffee between 9:30 and 11:30, and maybe also between 1:30 and 5:00, when cortisol levels are falling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(I drink my morning coffee at least one hour after waking up, which is also supported by the research)&lt;/p&gt;
</description>
      <pubDate>Sun, 26 May 2019 14:40:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/weekly_sugar-_when_(not)_to_drink_coffe__a_preview</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/weekly_sugar-_when_(not)_to_drink_coffe__a_preview</guid>
    </item>
    <item>
      <title>Flatt's Posts/Casts Review #002 - Real Problems, Strengths, Korean War, Smaller Problems, Good/Bad Shame</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/flatts_posts-casts_review_002_-_real_problems__strengths__korean_war/../images/reviews-logo.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Each week I'll try to post summaries, notes and quotes about articles I've read and podcasts I've listened to during the week. This helps me pay closer attention to the material, and may help you decide if you want to go to the source--which I hope you do!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#podcasts"&gt;Podcasts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#art-of-manliness-509-good-shame-bad-shame"&gt;Art of Manliness #509 - Good Shame; Bad Shame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developer-tea-20190522-make-your-problems-smaller"&gt;Developer Tea 20190522 - Make Your Problems Smaller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#art-of-manliness-510-the-greatest-battle-of-the-korean-war"&gt;Art of Manliness #510 - The Greatest Battle of the Korean War&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developer-tea-20190524-crafting-your-work-by-your-strengths"&gt;Developer Tea 20190524 - Crafting Your Work By Your Strengths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hanselminutes-685-solving-real-problems-with-software-and-the-human-utility-with-tiffani-ashley-bell"&gt;Hanselminutes #685 - Solving real problems with software and the Human Utility with Tiffani Ashley Bell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="podcasts"&gt;Podcasts&lt;/h1&gt;
&lt;h2 id="art-of-manliness-509-good-shame-bad-shame"&gt;Art of Manliness #509 - Good Shame; Bad Shame&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.artofmanliness.com/articles/shame/"&gt;https://www.artofmanliness.com/articles/shame/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-20 22:25&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer Field Value&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Good&amp;quot; shame promotes shared socially acceptable behavior, and has the possibility of redemption&lt;/li&gt;
&lt;li&gt;&amp;quot;Bad&amp;quot; shame is cruel and negates who the person is.&lt;/li&gt;
&lt;li&gt;Discover, recognize, and accept your own (and others') limitations&lt;/li&gt;
&lt;li&gt;Men and women have, according to science, actual differences. Learn which are real vs societal.&lt;/li&gt;
&lt;li&gt;About the evolution of masculine and feminine traits: &amp;quot;you can't shame that out of existence.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Interview with Joseph Burgo, PhD, author of &lt;em&gt;Shame&lt;/em&gt;. The author's thesis is that there is a spectrum of shame, and that certain types of shame can be valuable.&lt;/p&gt;
&lt;p&gt;Categories of Shame:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unrequited love&lt;/li&gt;
&lt;li&gt;Exclusion (from the group)&lt;/li&gt;
&lt;li&gt;Unwanted exposure (public embarrassment)&lt;/li&gt;
&lt;li&gt;Disappointed expectation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A potential value of shame is to &amp;quot;promote social values that are shared&amp;quot;.&lt;/p&gt;
&lt;p&gt;Brains have critical periods for formation, and if a child doesn't get the love, etc. that's needed, &amp;quot;you can't make up for it entirely in later life.&amp;quot; They can grow and compensate, but it's within the limits of their early experience.&lt;/p&gt;
&lt;p&gt;Burgo makes the case for a couple of socially uncomfortable ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Most people can't be whatever they want to be. They'll be restricted by limits.&lt;/li&gt;
&lt;li&gt;Men and women are truly genetically different, and trying to force men (in this case) to be the same as women leads to men rebelling and demonstrating even uglier, extreme &amp;quot;manly&amp;quot; behaviors.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Burgo says there's been a trend since the 60s to create a gender-neutral society, that &amp;quot;men and women should express the same basic positive traits...there is no difference.&amp;quot; Burgo doesn't believe that, and says the science doesn't support that view. About the evolution of masculine and feminine traits, &amp;quot;you can't shame that out of existence.&amp;quot; This is an important point, and I think it's the same science-based understanding of why homosexuality and transgender also must not be shamed.&lt;/p&gt;
&lt;p&gt;(However, I hate using a computer metaphor when it comes to biology. People aren't computers.)&lt;/p&gt;
&lt;p&gt;One way people deal with early core shame is to become narcissists.&lt;/p&gt;
&lt;p&gt;It's still hard for men to admit they need--and accept help. It's socially not considered manly. It's even worse in other countries (he cites India).&lt;/p&gt;
&lt;p&gt;&amp;quot;Positive&amp;quot; shaming must not be cruel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think it's better to be honest about the way our pasts ...can place limits on our future. It's better to take those limitations into account rather than pretending their are no limitations then failing and feeling even more shame.&lt;/p&gt;
&lt;p&gt;The sad science shows that children who grow up with parents who don't love them have brains--their brains are different.... Alan Shore shows brain scans of children who grow up in normal environments and those who grow up in really deficient ones, and [the children in deficient evironments] brains are smaller, they have fewer neural connections, they're just visibly different.&lt;/p&gt;
&lt;p&gt;The so-called &amp;quot;slacker&amp;quot; personality is organized around avoiding shame. It doesn't look that way, it looks like they don't have any ambition, but that's not really the issue.&lt;/p&gt;
&lt;p&gt;[Shaming] can be a good thing if it promotes more socially acceptable behavior. In order to do that, it has to hold out the possiblity of redemption. It has to be &amp;quot;you should feel ashamed of this, and your shaming experience is going to have this duration, and we expect you to make amends and then change your behavior.&amp;quot; That's the only way shame is ever effective.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.josephburgo.com/"&gt;Joseph Burgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/1250151309/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1250151309&amp;amp;linkCode=as2&amp;amp;tag=stucosuccess&amp;amp;linkId=FSXA3GZUT5SFDAZ4"&gt;Shame: Free Yourself, Find Joy, and Build True Self-Esteem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="developer-tea-20190522-make-your-problems-smaller"&gt;Developer Tea 20190522 - Make Your Problems Smaller&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://spec.fm/podcasts/developer-tea/298464"&gt;https://spec.fm/podcasts/developer-tea/298464&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-22 19:14&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer Field Value&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When facing any item of work, ask if it can be broken into simpler components.&lt;/li&gt;
&lt;li&gt;Then, elimate the parts that don't matter until finding what's essential.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When you have eliminated the impossible, whatever remains, however improbable, must be the truth. --Sherlock Holmes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br /&gt;
Reducing tasks into smaller tasks is well known in software, and in general productivity. Not as well known, I think, is applying this approach to solving problems.&lt;/p&gt;
&lt;p&gt;So, I'm seeing there's an obvious--yet overlooked--generalized pattern.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When facing any item of work, ask if it can be broken into simpler components.&lt;/p&gt;
&lt;p&gt;Then, elimate the parts that don't matter until finding what's essential.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In software, this principle applies to User Stories, architecture, methods, problems, debuggin, and tasks. In habit-forming (and breaking), examining the desired habit and finding the chain of triggers leading to that habit allows you to target the earliest trigger.&lt;/p&gt;
&lt;p&gt;I like his coding examples.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;During a debugging session where problem seems to keep moving around, eliminate all the code that &lt;em&gt;isn't&lt;/em&gt; part of a function or function call. This lets you see just what's calling what.&lt;/li&gt;
&lt;li&gt;For a syntax error: eliminate code by halves until error goes away.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've done number two. Number one is a very interesting idea.&lt;/p&gt;
&lt;p&gt;The principle is also stated in Sherlock Holmes' famous maxims.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you have eliminated the impossible, whatever remains, however improbable, must be the truth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this quote.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Having gathered these facts, Watson, I smoked several pipes over them, trying to separate those which were crucial from others which were merely incidental.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Often the problems that we're trying to solve are not actually singular problems. This is true both in our code and our relationships.&lt;/p&gt;
&lt;p&gt;The complexity of a given problem is first of all hard to define, but secondly it's often undertated. How many factors affecte that problem in the first place, and can you even go back and simulate the problem that occurred? Or maybe you have a difficult decision to make. How can you possibly understand all the factors related to that decision?&lt;/p&gt;
&lt;p&gt;When you look at every problem as it stands, in the context of the world, in the context of the universe, then of course it's prohibitively difficult to answer these questions.&lt;/p&gt;
&lt;p&gt;We can easily become crippled by our problems.&lt;/p&gt;
&lt;h2 id="art-of-manliness-510-the-greatest-battle-of-the-korean-war"&gt;Art of Manliness #510 - The Greatest Battle of the Korean War&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.artofmanliness.com/articles/chosin-reservoir-battle-korean-war/"&gt;https://www.artofmanliness.com/articles/chosin-reservoir-battle-korean-war/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-24 22:24&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Development Field Value&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listen to your &amp;quot;people in the field.&amp;quot; These can be direct reports, customers and users.&lt;/li&gt;
&lt;li&gt;Surround yourself with people who will respectfully disagree, when needed.&lt;/li&gt;
&lt;li&gt;Stay honestly humble. Find ways to keep your ego in check.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What often surpises me about AoM episodes is that I expect to be either bored or think &amp;quot;ugh, this is not my kind of subject.&amp;quot; Neither has ever true.&lt;/p&gt;
&lt;p&gt;Take this episode. I'm not big on war history, and it seems like a stereotypical thing to talk about on a &amp;quot;manliness&amp;quot; show. I keep forgetting that AoM questions stereotypes in favor of finding a better truth about what it means to be manly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br /&gt;
Hampton Sides wrote a book on and discusses the events surrounding the Battle of the Chosin Reservoir and the Marines who dubbed themselves the &amp;quot;Frozen Chosin.&amp;quot;&lt;/p&gt;
&lt;p&gt;This quote is terrific, so I'm putting it near the top. It's one of the biggest lessons from the conflict, in the author's view.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keep a channel of communication from the bottom up, not just from the top down.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After WWII, Korea was divided in half, the north going to the Soviet Union under Stalin, and the south to the US under Truman. Both were supposed to be temporary. There was supposed to be reunification and an election, but that didn't happen, and the result of each country's influence is clear.&lt;/p&gt;
&lt;p&gt;MacArthur's mistake, coming out of his hubris, ego, and willful ignorance, was to not stop at the 38th Parallel and instead push further in--under the pretense of making sure it wouldn't happen again--triggering China to get involved because the US would become so close to their border.&lt;/p&gt;
&lt;p&gt;The description of MacArthur...at this point in his career...is strikingly similar to Donald Trump.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. About MacArthur:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People didn't know how to handle his personality.&lt;/li&gt;
&lt;li&gt;McCarthyism had risen, and Truman/Democrats were being accused of being soft on Communism. (today it's being soft on immigration.)&lt;/li&gt;
&lt;li&gt;Refused to believe the intelligence reports that China had entered the conflict. Some of his lieutenants doctored the reports (the &amp;quot;yes men&amp;quot; problem, ensuring MacArthur heard what he wanted to hear.)&lt;/li&gt;
&lt;li&gt;Didn't listen to General Smith, his commander on the ground. (Trump famously says he knows more than his generals.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a fascinating segment giving credit to a Marine civil engineer asked to do seemingly impossible feats, like building an airfield on frozen ground, and building a bridge in just a few hours.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;About Douglas MacArthur:&lt;/p&gt;
&lt;p&gt;It was all about him. He loved he vertical pronoun. &amp;quot;I shall return.&amp;quot; The way he used the media, the way he had an entourage everywhere he went, the way he surrounded himself with &amp;quot;yes&amp;quot; men who just told him what he wanted to hear...he had a long, interesting and amazing career, but this was near the very end and I think it had all gone to his head. He just thought he could kick ass and take Korea, and it would be super easy, and didn't think the Chinese would intervene and even if they did it'd be so easy to...you know...and of course he wanted to use nuclear weapons against China when they did intervene, just blow up Beijing no problem. He had by this point become, I think, I very scary dude in the sense of having so much power in this one guy.&lt;/p&gt;
&lt;p&gt;MacArthur was not on the ground in Korea. He would fly over occasionally for a photo op.... It's said that he never slept a single night on Korean soil. He's the classic example of an absentee commander. He just was out of touch with reality, and that's where a lot of the problems lie.&lt;/p&gt;
&lt;p&gt;It's one the greatest military intelligence failures in our history, and ultimately it's MacArthur's fault.&lt;/p&gt;
&lt;p&gt;It happened because diplomacy failed,...because we didn't do the hard, messy work of diplomacy. We didn't have a relationship with the most populace nation on Earth. We refused to recognize Mao as the legitimate leader of China, we had no back channels of communication. He sent ample signals to us that he was going to intervene and we just kind of ignored those signals.&lt;/p&gt;
&lt;p&gt;I think of the legacy of this battle as being, exhibit A, what happens when diplomacy fails. And, the other legacy that I really look at here is just how important it is to listen to your field commanders.&lt;/p&gt;
&lt;p&gt;This whole thing could have been avoided if we had listened to what General Smith had to say.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hamptonsides.com/"&gt;Hampton Sides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Desperate-Ground-Marines-Reservoir-Greatest/dp/0385541155"&gt;On Desperate Ground: The Marines at The Reservoir, the Korean War's Greatest Battle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Oliver_P._Smith"&gt;Oliver P. Smith - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Douglas_MacArthur"&gt;Douglas MacArthur - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="developer-tea-20190524-crafting-your-work-by-your-strengths"&gt;Developer Tea 20190524 - Crafting Your Work By Your Strengths&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://spec.fm/podcasts/developer-tea/298944"&gt;https://spec.fm/podcasts/developer-tea/298944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-26 11:08&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Development Field Value&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map your skill/knowledge strengths/weaknesses to the job's required core/ancillary skills/knowledge.&lt;/li&gt;
&lt;li&gt;Improve your weaknesses that are in the job's core.&lt;/li&gt;
&lt;li&gt;Improve your strengths that are in the job's core.&lt;/li&gt;
&lt;li&gt;Don't &lt;a href="https://www.dictionary.com/browse/deprecate"&gt;deprecate&lt;/a&gt; yourself for weaknesses and mistakes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I always look forward to Jonathan's podcast, and rarely find myself critical, but I found this episode unclear and unfocused. I'd like to help clarify what I think Jonathan wanted to promote.&lt;/p&gt;
&lt;p&gt;As developers, workers, and people, we're faced with deciding whether to improve our weaknesses or our strengths, and which ones. We &lt;em&gt;need&lt;/em&gt; to do both. Focusing on only one or the other is unlikely to lead to success. There's science supporting that only repeating what you're good at doesn't lead to improvement. However, only working on what you're not good at leads to atrophy of your strengths.&lt;/p&gt;
&lt;p&gt;I'm a martial artist. If my left side kicks aren't as good as my right side kicks, then I need to work harder at my left ones. There's an implicit goal of parity. However, we sometimes forget (as students and teachers) that the purpose of that goal is improvement, not achievement. It's OK if my left side kicks are never as good as my right ones. It's also OK if I work hard to make my right kicks amazing.&lt;/p&gt;
&lt;p&gt;But--to continue the analogy--should I focus on being able to side kick to someone's head who is over six feet tall &lt;em&gt;and&lt;/em&gt; hold that kick in place? Some kata competition champions can do this. It's their strength. It's not mine. The short answer is &amp;quot;no,&amp;quot; because &lt;em&gt;this is important in the context of competition, but not in my interest which is daily health and self-defense.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With that context, let's go back to the podcast and pull the benefit from it. What's a way to help clarify which job skills we should improve?&lt;/p&gt;
&lt;p&gt;Create two lists. One is your skill/knowledge strengths and weaknesses. The other is the job's required core and ancillary skills/knowledge.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Skill/Knowledge Lists&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;( * &lt;em&gt;Starred items are ones I'm naturally good at.&lt;/em&gt;)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ME&lt;/th&gt;
&lt;th&gt;JOB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Strong&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Core&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tenacity*&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System Organization*&lt;/td&gt;
&lt;td&gt;Customer requirements gathering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Understanding Customers' Needs*&lt;/td&gt;
&lt;td&gt;REST-ful APIs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;Scalable architecture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WebAPI&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Weak&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Ancillary&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Self-confidence&lt;/td&gt;
&lt;td&gt;Employee management&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proven scalability experience&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To meet the job's needs, we should always work on the core skills. Give these lists, here's what I'd recommend the fictitious developer focus on improving:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C#, keep improving&lt;/li&gt;
&lt;li&gt;Customer needs, leverage your strength into becoming an expert&lt;/li&gt;
&lt;li&gt;WebApi, keep improving&lt;/li&gt;
&lt;li&gt;Scalable architecture, work hard at improving this weakness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And don't spend much time on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System organization, Tenacity, or Documentation, you're already good enough&lt;/li&gt;
&lt;li&gt;Personnel management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really think this is the essence of what Jonathan was trying to say, but--unusually--the message got lost on a first listen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's a link from the show notes for a free eBook: &lt;a href="https://resources.gitprime.com/books/20-patterns/?utm_source=podcast&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=podcast"&gt;GitPrime.com/20Patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point of this episode is to encourage focusing on strengths rather than weaknesses. (No, that's not quite right.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;If you focus on everything you're weak at, it will take a very large jump to go from being weak to strong.&amp;quot;&lt;/li&gt;
&lt;li&gt;Investing time in what your good at takes you from good to great.&lt;/li&gt;
&lt;li&gt;Investing time in what you're not good at takes you from poor to good, but probably not further.&lt;/li&gt;
&lt;li&gt;One skill may support another skill.&lt;/li&gt;
&lt;li&gt;Working on a weakness may &amp;quot;unlock&amp;quot; a strength.&lt;/li&gt;
&lt;li&gt;Understand the core vs ancillary skills needed for the job.&lt;/li&gt;
&lt;li&gt;Perform ancillary tasks acceptably, perform core tasks excellently.&lt;/li&gt;
&lt;li&gt;Map &lt;em&gt;your&lt;/em&gt; strengths to the required core skills. Is there a big mismatch? You either improve those skills, or consider a career change.&lt;/li&gt;
&lt;li&gt;Focusing on ancillary skills isn't as important as focusing on core skills.&lt;/li&gt;
&lt;li&gt;It's OK to delegate or collaborate on ancillary skills&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Job crafting: Look at the skill map, what you're already good at, and &amp;quot;wrap&amp;quot; your job around those skills.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Cutrell pronounces &amp;quot;&lt;a href="https://www.dictionary.com/browse/ancillary"&gt;ancillary&lt;/a&gt;&amp;quot; the British way.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;He's not saying &lt;em&gt;only&lt;/em&gt; focus on strengths. I'll call this great quote out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you take away the message that you should stop focusing on your weaknesses and only focus on your strengths, &lt;em&gt;it's very possible that you will lose your job&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another message in this episode is it's OK to fail, to learn, as well as not neglect your strengths.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you listen to a lot of podcasts...you may think there's a lot of room for improvement...that there's just this endless hill in front of you. And you may think you have to break yourself down to become the engineer that you want to become. And in many ways, this is true. We all have a lot to learn, and we all have shortcomings.... In today's episode...I want to help you focus on something a little bit different. Rather than looking at self-improvement as a long and arduous task where you are faced with your weaknesses every single day, I want to help you shift to a different point of focus.... If we focus only our shortcomings and weaknesses, we'll likely miss out on major opportunities.... An unintended effet of this show may be that you have taken the time and the energy to beat yourself up when you're not focusing, or to feel bad when you think you haven't broken things down, when you think you've made an assumption.&lt;/p&gt;
&lt;p&gt;All of these ideas presented on Developer Tea,.. business management/process books, books about software development--all of these things are not intended to fix all your broken parts. Instead, they are intended to be building blocks, foundational, to help push you up rather than break you down. This kind of different way of thinking about your skillset requires a fundamental shift in focus away from your weaknesses and toward your strengths.&lt;/p&gt;
&lt;p&gt;If you become incredibly good at your ancillary skills then you don't have time to invest in your core skills.&lt;/p&gt;
&lt;h2 id="hanselminutes-685-solving-real-problems-with-software-and-the-human-utility-with-tiffani-ashley-bell"&gt;Hanselminutes #685 - Solving real problems with software and the Human Utility with Tiffani Ashley Bell&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hanselminutes.com/685/solving-real-problems-with-software-and-the-human-utility-with-tiffani-ashley-bell"&gt;https://hanselminutes.com/685/solving-real-problems-with-software-and-the-human-utility-with-tiffani-ashley-bell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-26 13:20&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer Field Value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was an inspiring episode!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are opportunities to improve local government using fairly simple technologies that the employees won't be aware of, or afraid to take a risk on.&lt;/li&gt;
&lt;li&gt;Developers are paid pretty well, and thus privileged. We are in a position to improve the lives of the less fortunate.&lt;/li&gt;
&lt;li&gt;Most people don't set out to have problems. Sometimes &amp;quot;life happens.&amp;quot; They break an ankle, and suddenly can't pay their rent.&lt;/li&gt;
&lt;li&gt;A software-specific understanding of &amp;quot;life happens&amp;quot; is that we don't intend to write bugs, and we can have bad days. We shouldn't be terribly penalized even if our mistake crashes a system. We should be helped up, not beaten down.&lt;/li&gt;
&lt;li&gt;In any system, ensure it's not being taken disadvantage of through validation. (In the Detroit case, they extensively validated the claims)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Has found lots of her opportunities on Twitter (prior to the current political environment's negative unfluence on the platform).&lt;/p&gt;
&lt;p&gt;Read an article about how 100,000 people in Detroit were going to have to live without running water because their water was being shut down due to non-payment. &amp;quot;I thought it was bad...I thought it was really crappy.&amp;quot;&lt;/p&gt;
&lt;p&gt;Great example of using simple technology, putting up a quick and dirty website in a few hours, then letting people know it's available and seeing if they'll come. For the initial Detroit water project, she and her partner used Google Docs and Forms and some Bootstrap. Over the weekend, the started being contacted by people who wanted to help. They then made improvements to allow donorship.&lt;/p&gt;
&lt;p&gt;One thing that was critical was finding and publishing people's actual stories of why they were behind in payment (see quotes)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[Scott] When you start poking around in local government, with all due respect to all of our hard-working people in government, the solutions they have and the technologoy they have and the gaps can be filled in by pretty straightforward bits of workflow, not rocket science, we don't need machine learning to make it easier for someone to find out when to come to pay their parking ticket.&lt;/p&gt;
&lt;p&gt;You get these situations where cities have multi-million dollar contracts to really large corporations that make [for instance] databases, when they could really be using something a lot simpler in a lot of different places, because some salesperson came in, convinced a person who didn't know how to buy these things, or didn't know the he could go somewhere and perhaps download something and still get support.... They're used to these big enterprise companies coming in and offering that, and at great expense. But they don't realize it doesn't take all these heavy solutions to do simple things for citizens, and that lack of knowhow isn't there in a lot of situations.&lt;/p&gt;
&lt;p&gt;I think also...people don't want to get in trouble for the things that they buy. What's the old saying? &amp;quot;You never get fired for buying IBM.&amp;quot;&lt;/p&gt;
&lt;p&gt;[Scott] These are folks [Detroit who couldn't pay water bill] who are maybe on disability...one person was written up in National Geographic...who received a $672 monthly check, but her rent was $600, so she had $72 left at the end of the month, and slowly, slowly, slowly...got a $500 overdue water bill, so they came to her house and turned off her water.&lt;/p&gt;
&lt;p&gt;And this happened to tens of thousands of people in Detroit--who had 90 million dollars in bad debt--and shut offs were being called in for anyone who owed $150 or more, and it seems that for some people that's a crushingly huge amount of money, and for other people, like you said, it's a bad meal for four in the Bay.&lt;/p&gt;
&lt;p&gt;One of the stories I think about was a woman...she had three kids...who skimped on her heart medication, cut her pills in half...to pay the water bill each month.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/HumanUtility"&gt;https://twitter.com/HumanUtility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.detroitwaterproject.org"&gt;https://www.detroitwaterproject.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;With the exception that Trump appears to have had far fewer successes than he claims.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 26 May 2019 14:14:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/flatts_posts-casts_review_002_-_real_problems__strengths__korean_war</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/flatts_posts-casts_review_002_-_real_problems__strengths__korean_war</guid>
    </item>
    <item>
      <title>The 50-10 Time Box - Revising Pomodoro for Software Development</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development_repost/images/time-box.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;This is a slightly edited repost of an article I wrote last year. I think it's valuable enough to promote the technique again, along with the supporting science.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Many of us have trouble with three aspects of programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cost of interruptions&lt;/li&gt;
&lt;li&gt;Methods for staying on task&lt;/li&gt;
&lt;li&gt;The benefits of taking breaks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these has studies behind it (see References), as well as anecdotal information. The simple question I wanted to answer is:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What's an effective work-break cycle for programming?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The three most common cycles I know of are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pomodoro - 25 minutes work, 5 minutes break&lt;/li&gt;
&lt;li&gt;52/17 - 52 minutes work, 17 minutes break&lt;/li&gt;
&lt;li&gt;90/? - 90 minutes work, then a break&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="pomodoro"&gt;Pomodoro&lt;/h1&gt;
&lt;p&gt;The Pomodoro Technique is popular, and, besides the work-break cycle, has these suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plan the tasks&lt;/li&gt;
&lt;li&gt;Check off completed tasks&lt;/li&gt;
&lt;li&gt;Record interruptions so you can return to them outside the work interval&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is, Pomodoro, to my knowledge, hasn't been studied scientifically. When I used it for non-programming tasks, I could see the benefit. The more I tried using it for programming, the less effective I found it.&lt;/p&gt;
&lt;h1 id="the-task-recovery-lag"&gt;The Task Recovery Lag&lt;/h1&gt;
&lt;p&gt;Numerous studies show there's a recovery lag when resuming an interrupted task. For software developers, it takes about fifteen minutes to recover the previous context--to &amp;quot;get back to where I was.&amp;quot; The worst time to be interrupted is when there's the highest mental workload. (Like when I'm in the middle of debugging a method having spent twenty minutes understanding how it relates to five other modules.)&lt;/p&gt;
&lt;p&gt;I think it's a mistake, though, to think only in terms of interruptions. A programmer &lt;em&gt;always&lt;/em&gt; ramps up when starting (or restarting) a coding session. In other words, we should plan on the first fifteen minutes being devoted to recovering context.&lt;/p&gt;
&lt;h1 id="breaks"&gt;Breaks&lt;/h1&gt;
&lt;p&gt;I've worked for hours straight, and thought I was being productive. Maybe sometimes I was. But the research shows that regular breaks improve productivity, because the brain needs that time to recover from fatigue.&lt;/p&gt;
&lt;h1 id="the-friction"&gt;The Friction&lt;/h1&gt;
&lt;p&gt;So, where does that leave us regarding Pomodoro?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It takes a programmer at least fifteen minutes to &amp;quot;ramp up&amp;quot;&lt;/li&gt;
&lt;li&gt;A Pomodoro work period is twenty-five minutes&lt;/li&gt;
&lt;li&gt;That leaves &lt;em&gt;ten minutes or less of effective work time&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, no wonder Pomodoro wasn't working out!&lt;/p&gt;
&lt;p&gt;I have tried the 52/17 cycle. I found the seventeen minute break too long. I read an article where office workers tried it themselves, and it was pretty challenging. I suspect that the original study wasn't looking at programmers....&lt;/p&gt;
&lt;p&gt;There are benefits to Pomodoro. The task planning and completion help a lot with emotionally attaching to success, and with chunking down larger items.&lt;/p&gt;
&lt;h1 id="proposal-the-50-10-time-box"&gt;Proposal - The 50-10 Time Box&lt;/h1&gt;
&lt;p&gt;I've been trying this for over a year now, and it's working well for me. So, maybe it will work for you, too. Basically, use Pomodoro Technique but with a 50 minute work cycle followed by a ten minute break. This allows for the fifteen minute ramp up, then thirty-five minutes of solid, focused work. I've found that I'm usually ready for a break at the fifty minute mark.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Even if I wasn't &amp;quot;ready&amp;quot; for a break, when I took it I found I needed it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I use an online tool named &lt;a href="http://www.marinaratimer.com/"&gt;Marinara Timer&lt;/a&gt; to manage my time boxes. It has a Custom timer where I configured my cycles.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development_repost/images/2018-04-21%2009_04_45.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;What do I like about this approach?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It aligns on the hour, making it easy to understand.&lt;/li&gt;
&lt;li&gt;I get enough context recovery time.&lt;/li&gt;
&lt;li&gt;Four cycles gets me to lunch, the remaing four finish my day.&lt;/li&gt;
&lt;li&gt;A ten minute break is enough to take a walk, catch up on email, even have a short conversation. It's an effective coding break.&lt;/li&gt;
&lt;li&gt;That break has often helped me solve a thorny problem.&lt;/li&gt;
&lt;li&gt;Improves my task estimates.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A complete work session looks like this. I use a Markdown document to track my work sessions, distractions and notes, but paper and pen (or pencil!) would work as well or better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Plan my tasks.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;# Distractions

# Round 1
- [ ] Validation rules
- [ ] Unit tests

# Round 2
- [ ] Review code, make sure setting values correctly
- [ ] Improve queries based on understanding of rules

# Round 3
- [ ] Design workhorse feature

# Round 4
- [ ] Begin coding workhorse feature
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Start my timer.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development_repost/images/2018-04-21%2009_17_06.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Work deliberately, with intense focus. Record distractions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's important to not noodle around during the work time. Manage distractions! This is a hallmark of &lt;a href="https://hbr.org/2007/07/the-making-of-an-expert"&gt;deliberate practice&lt;/a&gt;, and an aspect of &lt;a href="http://whatmeditationreallyis.com/index.php/home-blog/item/470-how-to-meditate-distraction-in-meditation-doesnt-matter.html"&gt;meditation&lt;/a&gt; and mindfulness.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;# Distractions
- [ ] Email from Luis, not urgent but should get back to him soon.
- [ ] Birthday gift research for Joanie.

# Round 1
- [ ] Validation rules
- [ ] Unit tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. Check off tasks&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;# Distractions
- [ ] Email from Luis, not urgent but should get back to him soon.
- [ ] Birthday gift research for Joanie.

# Round 1
- [x] Validation rules
- [ ] Unit tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. When the work cycle ends (I'm currently enamoured of the Whoosh sound), take a break.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It can be hard to stop, but do it. And, I recommend walking away from the desk, and/or closing your work windows, so you don't get sucked back into the task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Repeat.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I was spurred to write this post because of &lt;a href="https://www.7pace.com/blog/time-blocking-for-developers-how-to-achieve-flow-stop-being-busy-start-being-productive"&gt;this article&lt;/a&gt;. The author, Tyler Hakes, gives several examples from his workday of how he reduces interruptions in his day, and it's worth reading.&lt;/p&gt;
&lt;p&gt;Below are a bunch of references I read both before and while creating this entry. They include links to the primary research papers that other articles refer to. I've called out some quotes that I found useful.&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;h2 id="articles"&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.7pace.com/blog/time-blocking-for-developers-how-to-achieve-flow-stop-being-busy-start-being-productive"&gt;Time Blocking for Developers: How to Achieve Flow, Stop Being “Busy”, &amp;amp; Start Being Productive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Programmer Interrupted](Programmer Interrupted) &amp;lt;= A key article by a researcher whose study is often cited&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fastcompany.com/944128/worker-interrupted-cost-task-switching"&gt;Worker, Interrupted: The Cost of Task Switching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lifehacker.com/how-long-it-takes-to-get-back-on-track-after-a-distract-1720708353"&gt;How Long It Takes to Get Back on Track After a Distraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daedtech.com/programmers-teach-non-geeks-the-true-cost-of-interruptions/"&gt;Programmers, Teach Non-Geeks The True Cost of Interruptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ironistic.com/the-cost-of-distractions-on-developers/"&gt;The Cost of Distractions on Developers!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/noodleeducation/2016/04/26/the-pomodoro-technique-and-3-more-research-backed-study-tips/#520044465027"&gt;The Pomodoro Technique And 3 More Research-Backed Study Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.themuse.com/advice/the-rule-of-52-and-17-its-random-but-it-ups-your-productivity"&gt;How the Most Productive People Schedule Their Day - The Rule of 52 and 17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.huffingtonpost.com/tony-schwartz/work-life-balance-the-90_b_578671.html"&gt;The 90-Minute Solution: How Building in Periods of Renewal Can Change Your Work and Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.huffingtonpost.com/2013/12/19/youve-been-taking-breaks-_n_4453448.html"&gt;ou’ve Been Taking Breaks All Wrong. Here’s How To Do It Right.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.huffingtonpost.com/kate-bartolotta/5-science-backed-ways-taking-a-break-boosts-our-productivity_b_8548292.html"&gt;5 Science-Backed Ways Taking a Break Boosts Our Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro Technique&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="papers"&gt;Papers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chrisparnin.me/pdf/parnin-icpc09.pdf"&gt;Resumption Strategies for Interrupted Programming Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When resuming an incomplete programming task, the developer must remember their previous working state and recover knowledge about the software. Details of working state might include recalling plans, intentions, and goals. Details of knowledge might include plan progress, component mechanisms, and domain representations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ics.uci.edu/%7Egmark/chi08-mark.pdf"&gt;The Cost of Interrupted Work: More Speed and Stress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Our data suggests that people compensate for interruptions by working faster, but this comes at a price: experiencing more stress, higher frustration, time pressure and effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://erichorvitz.com/CHI_2007_Iqbal_Horvitz.pdf"&gt;Disruption and Recovery of Computing Tasks:  Field Study, Analysis, and Directions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.researchgate.net/publication/220093595_Interrupts_Just_a_Minute_Never_Is"&gt;Just a minute never is&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;DeMarco reports that the recovery time after a phone call is at least 15 minutes.2 Even though we could not measure recovery time exactly, we believe his estimate to be valid. If more than 10 interrupts occur during a day, the time between the interrupts becomes too short to accomplish product development work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.dcc.uchile.cl/%7Errobbes/p/SANER15-fragmentation.pdf"&gt;An Empirical Study of Work Fragmentation in Software Evolution Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Work fragmentation as result of interruptions usually demands extra effort to recover and resume pending activities: a study of 24 information workers found that a worker needs on average 25 minutes to get back on an interrupted task [5]. Similarly, Iqbal and Horvitz [6] found that people experience disorientation and loss of context when multitasking. Czerwinsky et al. found that after experiencing work fragmentation people found it more difficult to perform interrupted tasks and took longer to complete them [7].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://interruptions.net/literature/Iqbal-CHI05-p1489-iqbal.pdf"&gt;Investigating the Effectiveness of Mental Workload as a Predictor of Opportune Moments for Interruption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 22 May 2019 23:08:12 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development_repost</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_50-10_time_box_revising_pomodoro_for_software_development_repost</guid>
    </item>
    <item>
      <title>Flatt's Posts/Casts Review #001 - Job Search, Burnout, Blazor, .NET Core Configuration, Personal Agency, Natural Movement, KonMari in Business</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/flatts_post-cast_reviews_001_-_job_search_burnout_blazor_net_core_configuration/../images/reviews-logo.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Each week I'll try to post summaries, notes and quotes about articles I've read and podcasts I've listened to during the week. This helps me pay closer attention to the material, and may help you decide if you want to go to the source--which I hope you do!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#articles"&gt;Articles&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#spark-joy-in-your-business-with-the-konmari-method"&gt;Spark Joy In Your Business With The KonMari Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asp.net-core-3.0-configuration-factsheet"&gt;ASP.NET Core 3.0 Configuration Factsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#podcasts"&gt;Podcasts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#art-of-manliness-507-how-to-increase-your-personal-agency"&gt;Art of Manliness #507 - How to Increase Your Personal Agency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#art-of-manliness-508-break-out-of-your-cage-and-stop-being-a-human-zoo-animal"&gt;Art of Manliness #508 - Break Out of Your Cage and Stop Being a Human Zoo Animal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developer-tea-20190515-3-principles-for-your-job-search"&gt;Developer Tea 20190515 - 3 Principles for Your Job Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developer-tea-20190517-3-red-flags-that-youre-heading-for-burnout"&gt;Developer Tea 20190517 - 3 Red Flags That You're Heading for Burnout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the.net-core-podcast-25-blazor-you-want-to-run.net-where"&gt;The .NET Core Podcast #25 - Blazor - You Want to Run .NET Where?!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="articles"&gt;Articles&lt;/h1&gt;
&lt;h2 id="spark-joy-in-your-business-with-the-konmari-method"&gt;Spark Joy In Your Business With The KonMari Method&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://heragenda.com/spark-joy-in-your-business-with-the-konmari-method"&gt;https://heragenda.com/spark-joy-in-your-business-with-the-konmari-method&lt;/a&gt;&lt;br /&gt;
Rieva Lesonsky&lt;/p&gt;
&lt;p&gt;2019-05-13 15:43&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br /&gt;
KonMari Six Methods&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be committed&lt;/li&gt;
&lt;li&gt;Imagine your ideal life before you start&lt;/li&gt;
&lt;li&gt;Tidy by category, not location&lt;/li&gt;
&lt;li&gt;Discard before you re-organize&lt;/li&gt;
&lt;li&gt;Do the easiest things first&lt;/li&gt;
&lt;li&gt;Keep what sparks joy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The author discusses applying the KonMari method to your business. She brings up circle good ideas, especially being more mindful and forward thinking.&lt;/p&gt;
&lt;p&gt;One thing she doesn't expand on is how to involve staff in applying the method. This seems important to me, so that staff have a strong stake in the outcome.&lt;/p&gt;
&lt;p&gt;Note that condo recommends completing an entire category rather than an area. this reminds me of software development where you complete a vertical slice of the feature set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of organizing what you already have, Kondo’s method focuses on getting rid of what you don’t like and don’t need so you’re left surrounded only by things you love and use.&lt;/p&gt;
&lt;p&gt;Steps to KonMari for Your Business
On her website, Kondo shares the six basic principles of the KonMari method. Here’s how to apply them to your business.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be committed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order for KonMari to work, you need to dedicate yourself to doing it wholeheartedly. Ideally, you’d complete the whole process over a weekend or series of days. For businesses, that may not be realistic—but you still need to commit to finishing what you start and working through each category completely before you stop. Otherwise, you’ll lose momentum. For example, set aside the weekend to focus on files and documents so you can get it all done in one fell swoop. If you’re getting your whole company involved, think of it as an offsite meeting and set aside time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Imagine your ideal life before you start.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before you start decluttering, take some time to think about what you want your business and life to look like when you’re done. What do you want to achieve by decluttering? Do you want your business to be more efficient, more successful, more enjoyable, more appealing for employees? Kondo’s method places great importance on being mindful, introspective and forward-looking. Thinking about why you’re embarking on this project before you start will help you focus when you begin decluttering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tidy by category, not location.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you think of decluttering your office, you might start with straightening your desk or cleaning out a file drawer. Instead, Marie Kondo wants you to declutter each category all at once. In the home, this means taking out all your clothing (from the closet, the dressers, the hall closet, the under-bed storage) and going through it all at once. For your business, it might mean going through all your equipment first, then all your paper documents, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Discard before you re-organize.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After you’ve cleared out your file cabinets or your computer, you might get inspired to set up a new organizational system right away. Don’t! Wait until your entire decluttering process is finished to organize what’s left.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do the easiest things first.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Start decluttering with a category that’s easy for you to let go of. For home decluttering, Kondo recommends doing clothes first and sentimental items last, since these are the hardest to let go of. Figure out what’s easiest for you to start with (such as paper documents) before moving onto more difficult areas such as business processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep what sparks joy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The KonMari decluttering method involves holding each item in your hands and asking yourself, “Does this spark joy?” Don’t overthink it: go with your first instinct. Of course, not everything in your office will spark joy (I’m looking at you, ream of printer paper). For such items, ask yourself whether it’s necessary to help you accomplish a task.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can use this method for a surface-level decluttering, such as cleaning out your emails, your file folders and your receipts. But you can also get much more from it if you use it on a deeper level. Ask yourself these questions:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What sparks joy in your business?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If there’s a certain product, service or focus in your business that brings you the most joy, maybe you should put more energy there.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What if there’s a whole element of your business that doesn’t spark joy?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you find out something on this level doesn’t spark joy, it’s time to have some serious conversations and do some soul-searching.&lt;/p&gt;
&lt;p&gt;Before you discard an item, Marie Kondo says, you need to thank it for its service to you. (Yes—even if you’re getting rid of an old stapler.) The process helps you “let go,” she says. But when you’re decluttering your business, I think you should also thank the things that you’re keeping. Take some time to feel your appreciation for all the elements that help your business thrive, from your employees to your suppliers to your customers.&lt;/p&gt;
&lt;h2 id="asp.net-core-3.0-configuration-factsheet"&gt;ASP.NET Core 3.0 Configuration Factsheet&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.red-gate.com/simple-talk/dotnet/net-development/asp-net-core-3-0-configuration-factsheet/"&gt;https://www.red-gate.com/simple-talk/dotnet/net-development/asp-net-core-3-0-configuration-factsheet/&lt;/a&gt;&lt;br /&gt;
Dino Esposito&lt;/p&gt;
&lt;p&gt;2019-05-13 15:47&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br /&gt;
.NET configuration is a special interest of mine, especially since I created a .NET Full configuration package: &lt;a href="https://www.nuget.org/packages/DeftConfig/"&gt;NuGet Gallery | DeftConfig 1.1.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've looked at .NET Core's configuration before, and, while impressively complete, it wasn't clear what the common scenarios were.&lt;/p&gt;
&lt;p&gt;This is a good overview of how configurations work both conceptually and with some implementation. But it doesn't show a &amp;quot;typical configuration&amp;quot; like I'd want to see.&lt;/p&gt;
&lt;p&gt;While configuration data is name-value pairs, the resuling configuration can be nested.&lt;/p&gt;
&lt;p&gt;The order of the ConfigurationBuilder pipeline determines which configurations win when there are duplicates. Last configuration wins.&lt;/p&gt;
&lt;p&gt;Files can be environment-specific, e.g. appsettings.development.json.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IOptions&lt;/code&gt; approach has no explicit benefit over using a POCO (see article for Esposito's reasoning).&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;IOptionsSnapshot&amp;lt;T&amp;gt;&lt;/code&gt; to re-get settings on each request. Use &lt;code&gt;IOptionsMonitor&amp;lt;T&amp;gt;&lt;/code&gt; to re-get settings if they change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you check out the Microsoft documentation, you might be frightened by the number of possible ways you can manage configuration data,...&lt;/p&gt;
&lt;p&gt;The configuration of an ASP.NET Core application is based on a list of name-value pairs collected at runtime from a variety of data sources—primarily, but not necessarily, one or more JSON files.&lt;/p&gt;
&lt;p&gt;All loaded values are composed (aggregated) into a single container.&lt;/p&gt;
&lt;p&gt;The root container is an object that implements the IConfigurationRoot interface.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-chsarp"&gt;public class Startup
{
    public IConfigurationRoot Configuration { get; }
    public Startup(IHostingEnvironment env)
    {
        var dom = new ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath)
            .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
            .Build();
 
        // Save the configuration DOM
        Configuration = dom;
 
        // Next tasks:
        //   - Load the config data into a POCO class
        //   - Share the POCO class with the rest of the app
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Three ways to return setting from this JSON)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
   &amp;quot;print&amp;quot; : {
       &amp;quot;pageFormat&amp;quot; : &amp;quot;A4&amp;quot;,
       &amp;quot;color&amp;quot;: &amp;quot;true&amp;quot;
   },
   &amp;quot;grid&amp;quot; : {
       &amp;quot;sorting&amp;quot; : &amp;quot;false&amp;quot;,
       &amp;quot;search&amp;quot; : &amp;quot;false&amp;quot;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var pageFormat = Configuration[&amp;quot;print:pageformat&amp;quot;];

var fmt = Configuration.GetValue&amp;lt;int&amp;gt;(&amp;quot;print:pageformat&amp;quot;);

var fmt = Configuration.GetSection(&amp;quot;print&amp;quot;)
                       .GetValue&amp;lt;int&amp;gt;(&amp;quot;pageformat&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In ASP.NET Core, instead, you can use the Bind method on the configuration root object.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var appSettings = new GlobalAppSettings();
Configuration.Bind(appSettings);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final step to conclude the first round of application settings in ASP.NET Core 3.0 is sharing the configuration POCO class with the rest of the application. In ASP.NET Core, the recommended approach is using the native Dependency Injection layer. All you need to do is adding the freshly created (and validated) instance of the GlobalAppSettings class as a singleton.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var appSettings = new GlobalAppSettings();
Configuration.Bind(appSettings);
services.AddSingleton(appSettings);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;IOptions&lt;/code&gt; approach:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// the code below belongs to the ConfigureServices method of the startup class.

services.AddOptions();
services.Configure&amp;lt;GlobalAppSettings&amp;gt;(Configuration);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public DemoController(
             IOptions&amp;lt;GlobalAppSettings&amp;gt; options)            
{
   Settings = options.Value;
   ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;IOptionsMonitor&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var dom = new ConfigurationBuilder()
        .SetBasePath(env.ContentRootPath)
        .AddJsonFile(&amp;quot;appsettings.json&amp;quot;, 
                         optional: true, 
                         reloadOnChange: true);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ideal approach is to learn the absolute minimum you need to know (which means how to load the configuration as an immutable singleton in a C# POCO class) and then look around in case more is required or would be good to have.&lt;/p&gt;
&lt;h1 id="podcasts"&gt;Podcasts&lt;/h1&gt;
&lt;h2 id="art-of-manliness-507-how-to-increase-your-personal-agency"&gt;Art of Manliness #507 - How to Increase Your Personal Agency&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.artofmanliness.com/articles/increase-your-personal-agency/"&gt;https://www.artofmanliness.com/articles/increase-your-personal-agency/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-14 16:15&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br /&gt;
Kids are growing up with &lt;em&gt;more&lt;/em&gt; structure, and if the encounter situations where the rules aren't obvious they flounder because they haven't learned to be self-reliant.&lt;/p&gt;
&lt;p&gt;Men are falling behind women in terms of adaptation and agency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the podcast: &amp;quot;Paul explains what he means by agency, and why learning how to get better at thinking, acting, and making choices for yourself can be the real key to feeling less stuck in life.&amp;quot;&lt;/p&gt;
&lt;p&gt;When our minds and bodies are in balance, our decision-making improves, and when our decision-making improves we then create a life that's more in line with matters to us.&lt;/p&gt;
&lt;p&gt;Separate your thinking and deliberation from your taking action, especially on important decisions.&lt;/p&gt;
&lt;p&gt;When you're saying yes to something, you're saying no to something else.&lt;/p&gt;
&lt;p&gt;The 7 Principles&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Behavioral&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control Stimuli
&lt;ul&gt;
&lt;li&gt;Put phone away. Don't let devices determine your attention.&lt;/li&gt;
&lt;li&gt;When you want to reach for device, get up an move instead to recharge.&lt;/li&gt;
&lt;li&gt;Monotask, don't multitask.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Associate Selectively
&lt;ul&gt;
&lt;li&gt;Mirror neurons help us pick and mimic those around us.&lt;/li&gt;
&lt;li&gt;People closest to us have enormous effect on our level of agency.&lt;/li&gt;
&lt;li&gt;Isolation is like kryptonite.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move (using your body, nutrition)
&lt;ul&gt;
&lt;li&gt;Movement increases brain activity.&lt;/li&gt;
&lt;li&gt;We're built to move, and we're too sedentary.&lt;/li&gt;
&lt;li&gt;Pay attention to body and be in top shape. Some men take better care of their cars than their bodies.&lt;/li&gt;
&lt;li&gt;Sleep deprivation reduces IQ.&lt;/li&gt;
&lt;li&gt;When sitting, we communicate &amp;quot;I'm stuck,&amp;quot; leading to learned helplessness.&lt;/li&gt;
&lt;li&gt;Get outside.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Cognitive&lt;/strong&gt;&lt;br /&gt;
4.  Position Yourself as a Learner
*   When we're well-informed, we make better decisions.
*   Identity your learning style [clf: Hopefully not the discredited visual/aural/etc].
*   More than 50% of jobs existing for kids born today won't exist when they become adults.
5.  Manage Your Emotions and Beliefs
*   Emotions are the strongest things happening in our heads.
*   Have your emotions, rather than your emotions having you.
*   Beliefs are better off when we question and update them over time.
*   Values tend to be bedrock things.
*   If we navigate the world with outdated beliefs we don't make better decisions for ourselves.
*   Understand how beliefs and emotions affect our thinking.
6.  Check Your Intuition (what does my gut tell me?)
*&lt;br /&gt;
7.  Deliberate, Then Act
*   Decision-Making
*   We don't get training in making decisions, despite making decisions effectively determing who we are.
*   Daniel Kahneman, Amos Tversky research on decision-making.
*   System 1 thinking: fast thinking&lt;br /&gt;
*   System 2 thinking: deliberate, rational, analytical&lt;br /&gt;
*   Acting:
*   Four large impediments: procrastination, impulsivity, obsession, perfectionism&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://powerofagency.com"&gt;Power of Agency Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.cfainstitute.org/investor/2018/06/08/daniel-kahneman-four-keys-to-better-decision-making/"&gt;Daniel Kahneman: Four Keys to Better Decision Making | CFA Institute Enterprising Investor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Power-Agency-Principles-Obstacles-Effective-ebook/dp/B07F1BV4BF/ref=sr_1_1?keywords=power+of+agency&amp;amp;qid=1557872244&amp;amp;s=gateway&amp;amp;sr=8-1"&gt;The Power of Agency: The 7 Principles to Conquer Obstacles, Make Effective Decisions, and Create a Life on Your Own Terms&lt;/a&gt; by Dr Paul Napper and Dr Rao Anthony&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="art-of-manliness-508-break-out-of-your-cage-and-stop-being-a-human-zoo-animal"&gt;Art of Manliness #508 - Break Out of Your Cage and Stop Being a Human Zoo Animal&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.artofmanliness.com/articles/podcast-508-break-out-of-your-cage-and-stop-being-a-human-zoo-animal/"&gt;https://www.artofmanliness.com/articles/podcast-508-break-out-of-your-cage-and-stop-being-a-human-zoo-animal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-15 20:49&lt;/p&gt;
&lt;p&gt;Interview with Erwan Le Corre, founder of MovNat physical fitness system and author of &lt;a href="https://www.amazon.com/Practice-Natural-Movement-Reclaim-Freedom-ebook/dp/B07M75GF7W/ref=sr_1_1?keywords=natural+movement&amp;amp;qid=1557957845&amp;amp;s=gateway&amp;amp;sr=8-1"&gt;The Practice of Natural Movement: Reclaim Power, Health, and Freedom&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br /&gt;
This is a quick summary of a long interview (1h 18m, ouch!). The reason I can do this quickly is I have a pretty good understanding of Le Corre's approach and source for his method.&lt;/p&gt;
&lt;p&gt;His Natural Movement means to practice the kinds of movements that are part of &lt;em&gt;homo sapien&lt;/em&gt;'s two to three hundred thousand-year-old heritage, specifically: walking, running, balancing, jumping, crawling, climbing, swimming, lifting, carrying, throwing, catching, and self-defense.&lt;/p&gt;
&lt;p&gt;These are almost exactly the same skills that made up George Hébert's &amp;quot;&lt;a href="https://en.wikipedia.org/wiki/Georges_H%C3%A9bert"&gt;la méthode naturelle&lt;/a&gt;&amp;quot;: walking, running, equilibrium (balancing), jumping, quadrupedal movement (crawling), climbing, swimming, lifting, throwing, and defending.&lt;/p&gt;
&lt;p&gt;There are only two skills added: carrying and catching, both of which make sense to me.&lt;/p&gt;
&lt;p&gt;Hébert was influenced by what came before him, and his method is a key inspiration for &lt;a href="https://en.wikipedia.org/wiki/Parkour"&gt;&lt;em&gt;parkour&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;MovNat seems to be a professional system, complete with certifications. While it's a business, it doesn't strike me as a sloppy scam. Listening to Le Corre, it's clear he's invested in helping people improve their health, and he has a solid athletic background.&lt;/p&gt;
&lt;p&gt;He makes a good point that athletics--especially movement responding to an unpredictable environment--improves cognition and problem-solving. Fencer Aldo Nadi said the same thing, that fencing made a person smarter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;br /&gt;
Not many quotes this time. But I like Le Corre's plain-speaking on some subjects that isn't rude or arrogant. For example, on reducing the amount of recess in schools--or making equipment &amp;quot;too safe&amp;quot;--because of liability, he says, &amp;quot;It's criminal. It's just going to kill the kids even more. It's going to kill their physiology to begin with...there are windows of physiological development and if you miss them it's hard to catch up.... What's needed [at a certain age] is not only proper nutrition, it's also proper movement.... I'm saying this with sadness.&amp;quot;&lt;/p&gt;
&lt;p&gt;(On doing natural movements &lt;em&gt;while&lt;/em&gt; you're in your normal day)&lt;br /&gt;
&amp;quot;You see, it does not take time off of your occupations because you can do it [natural movement] as you do what you need to do. It doesn't cost any money, it doesn't cost time. It costs very little energy, actually...but it's beneficial not only to your physiology but it's beneficial to your work.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.britannica.com/story/just-how-old-is-homo-sapiens"&gt;Just How Old Is Homo Sapiens? | Britannica.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.movnat.com/the-roots-of-methode-naturelle/"&gt;The Roots of &amp;quot;Methode Naturelle&amp;quot; - MovNat: Natural Movement Fitness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.movnat.com/"&gt;MovNat: Natural Movement Fitness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Erwan_Le_Corre"&gt;Erwan Le Corre - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="developer-tea-20190515-3-principles-for-your-job-search"&gt;Developer Tea 20190515 - 3 Principles for Your Job Search&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://spec.fm/podcasts/developer-tea/297042"&gt;https://spec.fm/podcasts/developer-tea/297042&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-15 22:48&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This episode was appropriate for me since I'm between jobs--&amp;quot;under employed,&amp;quot; as my mom says.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary of the 3 Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jobs are about relationships&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most jobs are found through previous, current, or new relationships.&lt;/li&gt;
&lt;li&gt;The hiring process is very human. The evaluators have the same biases you do. They can be affected by not having eaten breakfast that morning, for example.&lt;/li&gt;
&lt;li&gt;It's not a computer on the other end that's ultimately going to decide.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your job search is an evolving and continous process, not a discrete process with a single outcome&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine your values.&lt;/li&gt;
&lt;li&gt;Don't hold yourself to one particular title.&lt;/li&gt;
&lt;li&gt;Most of the time, the opportunity to be fulfilled in your job will come again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment-first thinking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Depending on your environment, you happiness in a job can vary greatly.&lt;/li&gt;
&lt;li&gt;Ask yourself questions about the environment just as much as about skills, title, compensation and people.
&lt;blockquote&gt;
&lt;p&gt;It's very possible to work with people that you admire and respect, but because the environment has been cultivated in a particular way you end up being miserable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Are my values tolerated/respected in this environment, or will I have to suspend my values?&lt;/li&gt;
&lt;li&gt;Are you safe? Will you grow?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The job market is, unfortunately, fairly inefficient. We haven't figured out how to align job candidates with their prospective perfect job.&lt;/p&gt;
&lt;p&gt;We may not know what we want, and the person posting the information...may not be describing the job well.&lt;/p&gt;
&lt;p&gt;If you stray away from these principles, [finding a job] is going to get harder.&lt;/p&gt;
&lt;p&gt;These are really principles of working, as well.&lt;/p&gt;
&lt;p&gt;People don't get jobs on their first shot, and you're probably not going to be an exception to that.&lt;/p&gt;
&lt;h2 id="developer-tea-20190517-3-red-flags-that-youre-heading-for-burnout"&gt;Developer Tea 20190517 - 3 Red Flags That You're Heading for Burnout&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://spec.fm/podcasts/developer-tea/297412"&gt;https://spec.fm/podcasts/developer-tea/297412&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-17 16:47&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Myths of Burnout&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It makes you a bad worker.&lt;/li&gt;
&lt;li&gt;You have to hate your company (or job, or manager, or coworker) to feel burned out.&lt;/li&gt;
&lt;li&gt;You have to be overworking to become burned out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Being burned out is a combination of factors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having a negative perspective on your work or workplace.&lt;/li&gt;
&lt;li&gt;Don't feel fulfilled.&lt;/li&gt;
&lt;li&gt;Exhaustion. But doesn't have to mean you're overworking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3 Red Flags&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Your motivation is almost entirely external.&lt;br /&gt;
For example, you're only motivated by the money, or threat of losing your job. You're more likely to game the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You find it incredible difficult to focus.&lt;br /&gt;
Have more and more trouble focusing. Procrastinating.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your work is becoming progressively worse.&lt;br /&gt;
Not ups and downs, but always going down. This triggers a negative loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solution? This episode doesn't go into depth, but notes that work needs to coexist with home in a balanced way. They need to enrich each other.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can feel that by becoming burnt out we've somehow done something wrong. That we've made the choice to feel burned out, or that everyone else has a longer fuse that us and we are somehow isolated in our feeling burned out.&lt;/p&gt;
&lt;p&gt;If you set your hours at forty hours and you're exhausted at thirty-five, no matter how hard you try to not be exhausted, perhaps in spite of you trying to not be exhausted, you're likely to become even &lt;em&gt;more&lt;/em&gt; exhausted.&lt;/p&gt;
&lt;p&gt;Nobody strives for burnout.&lt;/p&gt;
&lt;p&gt;Our internal motivation is a much stronger motivator than external motivator.&lt;/p&gt;
&lt;h2 id="the.net-core-podcast-25-blazor-you-want-to-run.net-where"&gt;The .NET Core Podcast #25 - Blazor - You Want to Run .NET Where?!&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dotnetcore.show/episode-25-blazor-you-want-to-run-net-where/"&gt;https://dotnetcore.show/episode-25-blazor-you-want-to-run-net-where/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019-05-19 18:40&lt;/p&gt;
&lt;p&gt;This is a short, fast--almost blazing(heh)--version of a talk[^0] Jamie gave to a user's group about the history of web applications leading up to Blazor: .NET running in the browser.&lt;/p&gt;
&lt;p&gt;Which, as James Taylor says frequently, is nuts. But it's working. I'll leave you to listen to the nuts and bolts, but here's the top level:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Blazor is a .NET web frameowrk which runs in the browser.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blazor relies on WebAssembly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WebAssembly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;quot;In summary, high level languages can be compiled down to WebAssembly and run in the browser at native speeds&amp;quot;&lt;a id="fnref:2" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blazor was created by Steve Sanderson.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blazor uses the Mono runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[^0]: &lt;a href="https://www.slideshare.net/JamieTaylor112/blazor-an-introduction"&gt;Blazor - An Introduction - Slides from Jamie's Presentation&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://chrissainty.com/what-is-blazor-and-why-is-it-so-exciting/"&gt;What is Blazor and why is it so exciting?&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Mon, 20 May 2019 14:49:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/flatts_post-cast_reviews_001_-_job_search_burnout_blazor_net_core_configuration</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/flatts_post-cast_reviews_001_-_job_search_burnout_blazor_net_core_configuration</guid>
    </item>
    <item>
      <title>Weekly Sugar: When is Music a Distraction?</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/weekly_sugar-_when_is_music_a_distraction_/images/fading-notes.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Developers often listen to music while programming. But, like teenagers who rock out when trying to do math homework, are we doing ourselves a favor?&lt;/p&gt;
&lt;p&gt;The research so far shows that listening to music during &lt;em&gt;repetitive work&lt;/em&gt; can boost productivity. Fine if we're creating lots of classes that follow a pattern.&lt;/p&gt;
&lt;p&gt;But what about &lt;em&gt;creative or demanding cognitive work&lt;/em&gt; such as intensive debugging, having to hold a dozen dependencies in mind at once for thirty minutes? Then, music can be a serious distraction. Often, the best solution at those moments is to turn off the music, or use ambient/white noise to mask office sounds.&lt;/p&gt;
&lt;p&gt;Developers spend lots of time in demanding mental activity. Find music that doesn't distract you, and be mindful if it is. Change your music to change your mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theatlantic.com/science/archive/2016/12/the-best-music-for-productivity-silence/509948/"&gt;The Best Music for Productivity? Silence - The Atlantic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sciencealert.com/the-best-music-to-listen-to-for-optimal-productivity-according-to-science"&gt;The Best Music to Listen to For Optimal Productivity, According to Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spoonuniversity.com/healthier/6-scientifically-proven-songs-to-improve-your-focus"&gt;6 Songs That Have Been Scientifically Proven to Improve Focus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 20 May 2019 10:23:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/weekly_sugar-_when_is_music_a_distraction_</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/weekly_sugar-_when_is_music_a_distraction_</guid>
    </item>
    <item>
      <title>"Yes or No?" -- A Classic and Effective Book For Decision-Making</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making/images/yes-or-no-logo.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;In 1991, when I was working for Waldenbooks, we received an advanced reading copy of Dr Spencer Johnson's &lt;a href="https://www.amazon.com/Yes-No-Guide-Better-Decisions/dp/0887306314/ref=sr_1_1?keywords=yes+or+no+johnson&amp;amp;qid=1558146718&amp;amp;s=gateway&amp;amp;sr=8-1"&gt;&amp;quot;Yes&amp;quot; or &amp;quot;No&amp;quot;: The Guide to Better Decisions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It became a treasured item for two reasons. One, I found it a terrifically practical decision-making method. Two, the advanced version was, in my opinion, &lt;em&gt;better&lt;/em&gt; than the published version. I'll explain the difference later, but first, about the book.&lt;/p&gt;
&lt;p&gt;Like others Dr Johnson authored or co-authored (&lt;em&gt;The One-Minute Manager&lt;/em&gt;, &lt;em&gt;Who Moved My Cheese?&lt;/em&gt;), the book is written in story/fable style. This was kind of the rage at the time, and in the wrong hands can be annoying. But in the case of &lt;em&gt;Yes or No&lt;/em&gt;, I never felt condescended to. It was clear that each page, each paragraph, was carefully thought out.&lt;/p&gt;
&lt;p&gt;The book is about a hundred pages long, with larger type, and will take you only about an hour to read. It could be one of the most valuable hours of your life.&lt;/p&gt;
&lt;p&gt;Here's a summary of the system, which literally fits on a credit-sized card. The questions are so clearly designed that they don't really need explanation--but read the book anyway!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a tentative decision&lt;/li&gt;
&lt;li&gt;Ask Three Practical Questions
&lt;ol&gt;
&lt;li&gt;Am I pursuing the real need?&lt;/li&gt;
&lt;li&gt;Am I informed of my options?&lt;/li&gt;
&lt;li&gt;Have I thought this through to a better result?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Ask Three Private Questions
&lt;ol&gt;
&lt;li&gt;Am I really telling myself the truth?&lt;/li&gt;
&lt;li&gt;Does this decision really feel right to me?&lt;/li&gt;
&lt;li&gt;Do my actions show I believe I deserve better?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If all six answers are Yes, proceed. If any answer is No, rethink the decision.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The first three questions are &amp;quot;head&amp;quot; questions. They gather and analyze information. The second three questions are &amp;quot;heart&amp;quot; questions. They make you check in with your conscience and look &lt;em&gt;backward from your future self&lt;/em&gt; as if the tentative decision had already been made.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first several times I applied the system it took awhile. But in time I started integrating the questions. I haven't gone strictly through the system in years, but I know I'm still influenced by it.&lt;/p&gt;
&lt;p&gt;Here are some of the lessons in the book.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My poor decisions are based on illusions I believe. My better decisions on realities I recognize.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I stop a poor decision to make a better decision&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I use my head to ask probing questions, and my heart to find better answers.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My decisions reveal my beliefs about my integrity, my intuition, and myself.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Once I see the truth, I make a better decision&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My feelings often forecast my results.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I get results I really believe I deserve.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We are each our own guide to better decisions, and we can help others discover this for themselves.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What change did Johnson make in the final version, and why don't I like it? Here's the exact statement printed in the front matter.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making/images/front-matter.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;While I understand the impetus to streamline, I really think breaking down the questions leads to better answers. It forces the person to think about &lt;em&gt;each one&lt;/em&gt;, adding time and care.&lt;/p&gt;
&lt;p&gt;The book has a handy wallet card, which I carried for years before it fell apart. Below is the original, followed by the published version. You can decide for yourself which you like!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh, and a final little story. My original copy of &lt;em&gt;Yes or No&lt;/em&gt; accidentally got wet, moldy, ucky. I finally let it go several months ago. Then, a week ago, I realized I wanted to reread the book and write a summary. My wife got me a copy through &lt;a href="http://www.paperbackswap.com/index.php"&gt;Paperback Swap&lt;/a&gt;. Imagine my surprise and great delight when what arrived in the mail was the advanced reading copy! That was a good decision.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making/images/yes-or-no-wallet-orig-1-sm.jpg" alt="" /&gt; &lt;img src="https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making/images/yes-or-no-wallet-orig-2-sm.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making/images/yes-or-no-wallet-pub-1.png" alt="" /&gt; &lt;img src="https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making/images/yes-or-no-wallet-pub-2.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 17 May 2019 22:24:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/yes_or_no_a_classic_and_effective_book_for_decision_making</guid>
    </item>
    <item>
      <title>"My" Git Aliases (with a nod to Smith and Jones)</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/my_git_aliases_with_a_nod_to_Smith_and_Jones/images/alias_smith_and_jones.jpg" alt="" /&gt;&lt;br /&gt;
&lt;sub&gt;(Pete Duel, we miss you.)&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;And by &amp;quot;my&amp;quot;, I mean mostly other people's. I've just renamed and/or tweaked them. Thank you, Phil Haack!&lt;/p&gt;
&lt;p&gt;Here's my GitHub dotfiles repo.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bladewolf55/dotfiles"&gt;https://github.com/bladewolf55/dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;br /&gt;
&lt;a href="https://haacked.com/archive/2019/02/14/including-git-aliases/"&gt;Include my Git Aliases | You’ve Been Haacked&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-config"&gt;[alias]
  # HISTORY AND STATE
  st = status -s
  # List all branches
  branches = branch -a
  # Displays last 10 commits by default, or the supplied number of commits
  hist = &amp;quot;!f() { git log -${1-10} --pretty=format:\&amp;quot;%C(auto) %h %ad | %d %s [%an]\&amp;quot; --graph --date=short; }; f&amp;quot;
  # All branches
  hista = &amp;quot;!f() { git log -${1-10} --pretty=format:\&amp;quot;%C(auto) %h %ad | %d %s [%an]\&amp;quot; --graph --date=short --all; }; f&amp;quot;
  # Generate zip of file differences between two commits. Second commit defaults to HEAD.
  diffpatch = &amp;quot;!f() { git archive --output=diffs.zip HEAD $(git diff --diff-filter=d --name-only $1 ${2-HEAD}); }; f&amp;quot;
  # Show renamed or added files
  diffshow =  &amp;quot;!f() { git diff $1 ${2-HEAD} --name-only --diff-filter=AR; }; f&amp;quot;
  
  # CURRENT CHANGE
  save = !git add -A &amp;amp;&amp;amp; git commit -m 'SAVEPOINT'
  undo = reset HEAD~1 --mixed
  # Hard reset to previous ref, but saves current state first
  restore = &amp;quot;!f(){ git add -A &amp;amp;&amp;amp; git commit -qm 'RESTORE SAVEPOINT'; git reset $1 --hard; }; f&amp;quot;

  # GROW, MARK, TWEAK
  co = checkout 
  cob = checkout -b 
  # Commits using supplied message, or opens editor if message omitted
  # cm = &amp;quot;!f() { git add -A; [ -z \&amp;quot;$1\&amp;quot; ] &amp;amp;&amp;amp; git commit || git commit -m \&amp;quot;$1\&amp;quot; ; }; f&amp;quot;
  # This version lets you continue after entering the first line of the message, and ends when double-quote is entered
  cm = !git add -A &amp;amp;&amp;amp; git commit -m 
  # Commit and amend, opens editor
  cma = !git add -A &amp;amp;&amp;amp; git commit --amend
  # Commit and open the interactive editor
  cmi = !git add -A &amp;amp;&amp;amp; git commit 
  # Rebase onto branch
  rb = rebase 
  rbi = rebase -i 
  rba = rebase --abort
  # Merge branch into, preserving branch history
  mb = merge --no-ff --log 
  mba = merge --abort
  # Delete branch
  delb = branch -d 
  # Tag branch with message = name
  tagb = tag -a -m &amp;quot;&amp;quot;

  # COLLABORATE
  sync = !git pull --rebase &amp;amp;&amp;amp; git push
  syncfork = !git checkout master &amp;amp;&amp;amp; git pull upstream/master &amp;amp;&amp;amp; git push origin/master
  # Open and browse the remote repository's URL
  browse = &amp;quot;!f(){ URL=$(git config remote.origin.url); open ${URL%.git}; }; f&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Fri, 17 May 2019 19:47:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/my_git_aliases_with_a_nod_to_Smith_and_Jones</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/my_git_aliases_with_a_nod_to_Smith_and_Jones</guid>
    </item>
    <item>
      <title>Proposal: Combine Agile and Craftsmanship Manifestos into "Agile Crafted Software Values"</title>
      <description>&lt;style&gt;
@import url('https://fonts.googleapis.com/css?family=IM+Fell+French+Canon|IM+Fell+French+Canon+SC');
&lt;/style&gt;
&lt;p&gt;Why not combine the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; and the &lt;a href="http://manifesto.softwarecraftsmanship.org/"&gt;Software Craftsmanship Manifeso&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Here's my suggestion, trying to remain faithful to the meaning, spirit, and brevity of the originals.&lt;/p&gt;
&lt;div style="border: solid 5px lightgray; padding:10px; border-radius:8px"&gt;
&lt;h2 style="font-family:'IM Fell French Canon SC', serif; border:none; font-size:200%;"&gt;Agile Crafted Software Values&lt;/h2&gt;
&lt;div style="font-family:'IM Fell French Canon',serif; font-size:20px; margin-top:20px;"&gt;
&lt;p&gt;&lt;strong&gt;An interacting community of professionals&lt;/strong&gt; over processes and tools&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Well-crafted, working software&lt;/strong&gt; over comprehensive documentation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Productive collaboration and partnerships&lt;/strong&gt; over contract negotiation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Responding to change by adding value&lt;/strong&gt; over following a plan&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size:85%;"&gt;That is, while there is value in the items on the right, we have found the items on the left to consistently yield greater benefits.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="motivation"&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Arguably, the most influential document for modern software engineering is the 2001 Agile Manifesto, laying out the values and principles of what it means to develop in an effective way. It's easy to forget--or even not ever read--these principles, instead believing that they're enforced by the various methodologies. Several original signatories have rightly complained about what's happened to their vision.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Agile has been taken over by corporations to make a buck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think it's important to remember two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Agile is not a method. Methods should &lt;em&gt;implement&lt;/em&gt; agile values and principles.&lt;/li&gt;
&lt;li&gt;Agile methods aren't for project management. They're for &lt;em&gt;software development&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, in 2009, Software Craftsmanship was proposed to reaffirm the central role of developers.&lt;/p&gt;
&lt;p&gt;These shouldn't exist separately. By combining them, I think value is added.&lt;/p&gt;
</description>
      <pubDate>Tue, 14 May 2019 13:50:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/proposal-_combine_agile_and_craftsmanship_manifestos_into_agile_crafted_software_values</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/proposal-_combine_agile_and_craftsmanship_manifestos_into_agile_crafted_software_values</guid>
    </item>
    <item>
      <title>Suggestion for Uncle Bob: Change "Software Craftsmanship" to "Crafted Software"</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/suggestion_for_uncle_bob-_change_software_craftsmanship_to_crafted_software/images/640px-Salzburg_-_Violin_repair_shop_-_2910.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Robert &amp;quot;Uncle Bob&amp;quot; Martin has struggled with gender neutrality regarding the term &amp;quot;crafstman.&amp;quot; It's a difficult problem--English has a lack of neuters--and it's good he's struggling because it means he's listening to the very real affect of terminology on women in the workplace.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2018/05/02/Craftsman-Craftswoman-Craftsperson.html"&gt;Craftsman, Craftswoman, Craftsperson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suggest flipping the syntax, so, not &amp;quot;software craftsmanship,&amp;quot; but &amp;quot;crafted software.&amp;quot; Likewise, we can eschew &amp;quot;craftsman&amp;quot; by using &amp;quot;crafter.&amp;quot;&lt;/p&gt;
&lt;p&gt;Thus:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Crafted Software&lt;/strong&gt; not Software Craftsmanship&lt;br /&gt;
&lt;strong&gt;Software Crafter&lt;/strong&gt; not Software Craftsman, Craftswoman, Craftsperson&lt;br /&gt;
&lt;strong&gt;Software Crafting&lt;/strong&gt; as in, &amp;quot;The discipline of software crafting&amp;quot; not &amp;quot;The discipline of software craftsmanship&amp;quot;&lt;br /&gt;
&lt;strong&gt;Craft&lt;/strong&gt; as in, &amp;quot;It's about craft&amp;quot; (or crafting) not &amp;quot;It's about craftsmanship&amp;quot;&lt;/p&gt;
&lt;p&gt;Using these terms has the added benefit of them being shorter, which I like. But maybe you're not into the whole brevity thing.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/suggestion_for_uncle_bob-_change_software_craftsmanship_to_crafted_software/images/the_dude.jpg" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 14 May 2019 12:29:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/suggestion_for_uncle_bob-_change_software_craftsmanship_to_crafted_software</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/suggestion_for_uncle_bob-_change_software_craftsmanship_to_crafted_software</guid>
    </item>
    <item>
      <title>My Mixed Relationship with TDD</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/my_mixed_relationship_with_tdd/images/tdd-created-by-nasa.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;OK, not completely &amp;quot;created by,&amp;quot; but &lt;a href="https://arialdomartini.wordpress.com/2012/07/20/you-wont-believe-how-old-tdd-is/"&gt;You won't believe how old TDD is&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;I have a mixed relationship with Test-Driven Development (TDD). It's a valuable method that I've enjoyed--when I've used it. What matters more to me than test-first is creating automated tests early rather than late.&lt;/p&gt;
&lt;p&gt;Despite my on-again, off-again history with TDD, I've written about it in tutorial form. This series also includes examples of mocking and dependency injection. What to mock is, I think, especially difficult to get right.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/catching-up-on-coding-tdd-part-1/"&gt;Catching Up On Coding - TDD Part 1 | Software Meadows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/catching-up-on-coding-tdd-part-2/"&gt;Catching Up On Coding - TDD Part 2 | Software Meadows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/catching-up-on-coding-tdd-part-3/"&gt;Catching Up On Coding - TDD Part 3 | Software Meadows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="history"&gt;History&lt;/h2&gt;
&lt;p&gt;In 2001, at the beginning of the third millenium, I first learned about some eXtreme Programming (XP) practices, among them TDD. I wanted to try this out, but ran into a snag: Visual Basic 6 didn't have a good unit testing framework. &lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; So, I wrote my own. I also wrote it to test &lt;em&gt;private&lt;/em&gt; methods, because that's where the action was, and I hadn't yet wrapped my head around why testing public methods was key to keeping tests separate from code.&lt;/p&gt;
&lt;p&gt;Even then, I got the TDDers thrill from seeing all green after running tests. However, my organization wasn't invested in TDD, so I set it aside. This was the story for the next couple of decades. The places I worked didn't care about more agile methods, and my efforts to introduce and use TDD didn't go far. Over time, I realized something else. My background in creative writing and music composition led me intuitively write code in a particular way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Draft the code, getting some things working quickly.&lt;/li&gt;
&lt;li&gt;Significantly rewrite as the better structure reveals itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TDD didn't fit into this way of coding new projects, because my code would often change a &lt;em&gt;lot&lt;/em&gt; as I settled on the most effective patterns. In business parlance, this is a &amp;quot;fail early, fail often&amp;quot; approach. Writing tests first at this stage worked against me because the methods I was testing were in flux. Heck, the whole approach was in flux. I could delete them at any moment. It took me a long time to reconcile how to integrate unit testing and TDD into my personal, fluid--and effective--style of coding.&lt;/p&gt;
&lt;p&gt;One developer I talked with said his team didn't practice &amp;quot;test first,&amp;quot; but instead &amp;quot;test eventually.&amp;quot; I stored this tidbit away, though something nagged at me. How often was &amp;quot;test eventually&amp;quot; turning into &amp;quot;test never?&amp;quot;&lt;/p&gt;
&lt;h2 id="database-testing"&gt;Database Testing&lt;/h2&gt;
&lt;p&gt;Another obstacle on my road to successful unit testing was how to deal with databases. This wasn't just my obstacle, of course. It hung up loads of developers. The Repository Pattern was known, but not well-understood or encouraged in the Microsoft world. Abstracting the database seemed--and often was--tedious, time-consuming, and prohibitively maintenance-heavy. What kind of software was I writing all the time? Yep, database-centric.&lt;/p&gt;
&lt;p&gt;Things didn't because easier with the adoption of Entity Framework (or Linq2Sql). When it came to testing, Microsoft's own documentation often recommended Repository Pattern, and sometimes Unit of Work.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This was frankly a mess. Why? Because EF was itself built using Repository (DbSet) and Unit of Work (DbContext) patterns.&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; So, developers were writing &lt;em&gt;an abstraction on top of an abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Again, I was hampered by a couple of things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a regular employee, I wasn't working in an agile environment.&lt;/li&gt;
&lt;li&gt;When a contractor, I was often constrained by client expectations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="today"&gt;Today&lt;/h2&gt;
&lt;p&gt;Over the years, I've returned to TDD several times and have come to some tentative conclusions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For me, on a greenfield project, test-first shouldn't be introduced immediately, but only after going through my drafting/iterating process to help clarify how &amp;quot;the code wants to be written&amp;quot; (I agree, a squishy, woo-woo statement.)&lt;/li&gt;
&lt;li&gt;After that, TDD is a big help, primarily because it forces tests to be written in parallel to coding &lt;em&gt;and&lt;/em&gt; forces useful abstractions and separation of concerns.&lt;/li&gt;
&lt;li&gt;Sometimes, though, TDD needs to be set aside while a coding solution is explored via a deep dive. Avoid &lt;em&gt;premature testing&lt;/em&gt;. In these cases, the developer's mind needs to &lt;em&gt;flow&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Testing reveals architecture problems&lt;/em&gt;. This is another top value. In order for code to be testable, it needs to be well-architected using dependency injection and coding to interfaces.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm insisting on unit tests in my code, and forcing myself to use TDD in my workflow. This will require reading about modern TDD, and being confronted with terrific articles such as &lt;a href="http://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html"&gt;TDD Harms Architecture&lt;/a&gt; by &amp;quot;Uncle Bob&amp;quot; Martin.&lt;/p&gt;
&lt;h2 id="other-thoughts"&gt;Other Thoughts&lt;/h2&gt;
&lt;h3 id="not-design"&gt;Not &amp;quot;Design&amp;quot;&lt;/h3&gt;
&lt;p&gt;TDD is &lt;em&gt;not&lt;/em&gt; design. Some people want the acronym to be Test Driven Design. But TDD isn't designing anything, except in the very loosest sense that programmers are always designing a method before coding it. We at least &lt;em&gt;imagine&lt;/em&gt; how it's going to work, and that's--again, loosely--design. Robert Martin says it emphatically:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The idea that the high level design and architecture of a system emerge from TDD is, frankly, absurd. Before you begin to code any software project, you need to have some architectural vision in place. TDD will not, and can not, provide this vision. That is not TDD’s role.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And goes on to say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, this does not mean that designs do not emerge from TDD – they do; just not at the highest levels. The designs that emerge from TDD are one or two steps above the code;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="favorite-framework"&gt;Favorite Framework&lt;/h3&gt;
&lt;p&gt;That's easy. &lt;a href="https://xunit.net/"&gt;xUnit.net&lt;/a&gt;. I've loved it since its early days. Now, I've often used MSTest because it's A) built-in, and/or B) it's what the development shop was already using. But I prefer xUnit.net and its features such as Theories.&lt;/p&gt;
&lt;p&gt;Using one of the &amp;quot;Should&amp;quot;&lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; libraries makes unit testing even more readable.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap-Up&lt;/h2&gt;
&lt;p&gt;Testing is hard. Unit testing is hard. But early, automated testing builds confidence in the system, and TDD provides a valuable feedback loop that stacks nicely on other methods such as continuous integration.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This isn't quite true. There was a framework, but my misunderstanding of why only public methods should be tested interfered with me using it.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Such as this untestable craziness: &lt;a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application"&gt;Implementing the Repository and Unit of Work Patterns in an ASP.NET MVC Application (9 of 10) | Microsoft Docs&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;But not until EF 4.1, and mocking wasn't easy-ish until 6.0.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="https://github.com/shouldly/shouldly"&gt;shouldly&lt;/a&gt; and &lt;a href="https://fluentassertions.com/"&gt;Fluent Assertions&lt;/a&gt;&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 30 Apr 2019 09:24:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/my_mixed_relationship_with_tdd</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/my_mixed_relationship_with_tdd</guid>
    </item>
  </channel>
</rss>