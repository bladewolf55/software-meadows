<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Meditation on The Mythical Man Month: Who Failed on the Tower of Babel Project?</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;&lt;br /&gt;
I'm not a biblical scholar. This post treads on sensitive ground regarding matters of theology. My intention isn't to critique faith, but instead is the same as Brooks's: interpret the account of the Tower of Babel through the lens of project and corporate management. I hope I've navigated the line between serious and tongue-in-cheek successfully.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In his seminal 1975 book &lt;a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959"&gt;&lt;em&gt;The Mythical Man Month&lt;/em&gt;&lt;/a&gt;, author and engineer Frederick P. Brooks starts chapter 7, &amp;quot;Why Did the Tower of Babel Fail?&amp;quot; with the relevant Biblical text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now the whole earth used only one language, with few words. On the occasion of a migration from the east, men discovered a plain in the land of Shinar, and settled there. Then they said to one another, &amp;quot;Come, let us make bricks, burning them well.&amp;quot; So they used bricks for stone, and bitumen for mortar. Then they said, &amp;quot;Come, let us build ourselves a city with a tower whose top shall reach the heavens (thus making a name for ourselves), so that we may not be scattered all over the earth.&amp;quot; Then the Lord came down to look at the city and tower which human beings had built. The Lord said, &amp;quot;They are just one people, and they all have the same language. If this is what they can do as a beginning, then nothing that they resolve to do will be impossible for them. Come, let us go down, and there make such a babble of their language that they will not understand one another's speech.&amp;quot; Thus the Lord dispersed them from there all over the earth, so that they had to stop building the city.&lt;/p&gt;
&lt;p&gt;GENESIS 11:1-8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an aside, it's fascinating that after a solid search I don't find this translation anywhere else but in Brooks's book. It seems unlikely he played fast and loose with the Bible, so where did his translation come from?&lt;/p&gt;
&lt;p&gt;But to the point. Brooks makes the case that the Tower project failed, and that its failure was due to lack of communication and organization by the development team.&lt;/p&gt;
&lt;p&gt;Is this supported by the text?&lt;/p&gt;
&lt;p&gt;The first question to answer is whether the project was completed. Initially, reading &amp;quot;Then the Lord came down to look at the city and tower which human beings had built,&amp;quot; it seems they &lt;em&gt;did&lt;/em&gt; complete the city and tower. The puzzle is in the comment, &amp;quot;If this is what they can do as a beginning,&amp;quot; which implies the work is merely started. But if it's merely started, how is there even a tower?&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.biblestudytools.com/genesis/11.html"&gt;New International Version&lt;/a&gt; translates this subtly--but crucially--differently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But the LORD came down to see the city and the tower the people were &lt;em&gt;building&lt;/em&gt;. [Emphasis mine]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, many other translations use the past tense, &amp;quot;built.&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer seems to be in the following statements that the Lord confused the language, scattered the people, and they &amp;quot;had to stop building the city.&amp;quot; It appears clear work was unfinished and the past tense &amp;quot;built&amp;quot; should be read as &amp;quot;built so far&amp;quot; rather than &amp;quot;completed.&amp;quot;&lt;/p&gt;
&lt;p&gt;Is an uncompleted project a failure? Not necessarily. Sometimes projects are abandoned because priorities change. We need to understand, why wasn't this project completed?&lt;/p&gt;
&lt;p&gt;So, let's examine the project as a corporate development effort as Brooks did, but without--in my opinion--his bias.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The developers had a clear goal and motivation.&lt;/li&gt;
&lt;li&gt;They began with great success, communicating very well and accomplishing quality work.&lt;/li&gt;
&lt;li&gt;The CEO checked up on them and felt threatened by their success.&lt;/li&gt;
&lt;li&gt;He didn't directly cancel the project. He broke up the teams. Not only that, he &lt;em&gt;created&lt;/em&gt; barriers to communication.&lt;/li&gt;
&lt;li&gt;At that point, the developers gave up on the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me call the first point out again: the Tower of Babel was not failing. The development team was &lt;em&gt;succeeding&lt;/em&gt;. The evidence points to the CEO as being the source of the failure, not the developers.&lt;/p&gt;
&lt;p&gt;Before making that case, one question is &lt;em&gt;why&lt;/em&gt; did the CEO react that way? Why did he feel threatened? The usual reason given for the Lord's actions is the people's hubris.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; They--from the Lord's viewpoint--are trying to achieve godliness, and the Lord and his host (the C-level execs, if you will) don't take kindly to that. They don't want the people making &amp;quot;a name for themselves.&amp;quot; Maybe they see the roots of a competitive company growing within their own organization!&lt;/p&gt;
&lt;p&gt;From the people's point of view, their goal is the opposite. They want to stay together, &lt;em&gt;not&lt;/em&gt; be broken up, and see their project as the means to accomplish that goal. If making a name for themselves is against company policy, they don't seem to know it.&lt;/p&gt;
&lt;p&gt;Brooks's purpose in the chapter is showing that poor communication and organization cause major project problems. I agree, and so I believe does lots of research. Where I disagree with Brooks in his metaphor is who's responsible. This isn't a trivial point; it's a problem I've routinely seen in the dozens of companies I've worked for.&lt;/p&gt;
&lt;p&gt;So now we come to the crux: &lt;em&gt;What were the communication and organization problems?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think there are a few important answers. Framing it in software development terms,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The development department didn't communicate their intentions well enough to the CEO.&lt;/li&gt;
&lt;li&gt;The CEO was ignorant of what was going on in the company.&lt;/li&gt;
&lt;li&gt;The CEO didn't have a clear mission for the organization.&lt;/li&gt;
&lt;li&gt;The CEO valued punishment over learning.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If it seems like I'm laying most of the blame for the failed Tower at executive management's feet, I am. The CEO, in this organization, has developed a reputation for being omniscient. It was reasonable for the development department to believe he knew their plans. After all, they stated them out in the open, and such a big project could hardly be missed even in the planning stages.&lt;/p&gt;
&lt;p&gt;Still, they could have made sure. After all, the CEO also has a reputation as a bit of a hot head. Maybe the CIO assumed too much or didn't talk the the CEO directly. A few emails and phone calls might have helped. Something like, &amp;quot;We've settled into our new offices. We're working really well together and want that to continue. We're thinking of showing what we can do by building this beautiful social network application called &amp;quot;City and Tower.&amp;quot; Is that in line with your goals?&amp;quot;&lt;/p&gt;
&lt;p&gt;The fact that they missed the mark on such a major project tells me the CEO didn't establish a clear vision. His development department was &lt;em&gt;literally&lt;/em&gt; wandering. They shouldn't have been blamed for making the best of their situation.&lt;/p&gt;
&lt;p&gt;What's worse is the CEO's reaction when he finds out about the project. He doesn't ask, &amp;quot;How could I have done better?&amp;quot; In fact, he doesn't confirm or consider their motivation. He &lt;em&gt;assumes&lt;/em&gt; bad intent on the team's part. There's no conversation. &lt;em&gt;No communication&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Even worse, he doesn't see the opportunity in the developers' excellent work. He responds in an Industrial Age, J.P. Morgan command-and-coerce style. &amp;quot;I'm the boss, you're threatening my power and position, I demand loyalty, so I'm firing you.&amp;quot;&lt;/p&gt;
&lt;p&gt;The developers showed the hallmarks of drive: &lt;em&gt;autonomy, mastery, and purpose&lt;/em&gt;.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Their initiative should have been rewarded and redirected. What would have been good advice to the CEO?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask yourself: &amp;quot;How did I not know about this project?&amp;quot;&lt;/li&gt;
&lt;li&gt;Ask the team: &amp;quot;What's your motivation? How does this project help the organization?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;Did my actions or lack of direction affect their decision?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;I feel threatened. Is the threat real?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;Did they do the wrong thing well? If so, can I harness that in service to the organization?&amp;quot;&lt;/li&gt;
&lt;li&gt;Act: &amp;quot;I apologize for my part in not communicating well. Let's improve that. You all started something amazing, but I think it's not in line with our objectives. Let's see if our objectives need to be adjusted, but if not let's bring your team to bear on our shared mission.&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I agree the Tower project failed because of poor communication and organization. But the primary failure was at the top management level. What the CEO communicated most successfully was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;I won't be clear in what I want.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I don't know what's going on.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I'll punish you if I think you're against me.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I'm never to blame.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are characteristic of what Ron Westrum defines as a pathological culture, which is worse than a bureaucratic one.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pathological&lt;/th&gt;
&lt;th&gt;Bureaucratic&lt;/th&gt;
&lt;th&gt;Generative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Power oriented&lt;/td&gt;
&lt;td&gt;Rule oriented&lt;/td&gt;
&lt;td&gt;Performance oriented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Low cooperation&lt;/td&gt;
&lt;td&gt;Modest cooperation&lt;/td&gt;
&lt;td&gt;High cooperation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Messengers &amp;quot;shot&amp;quot;&lt;/td&gt;
&lt;td&gt;Messengers neglected&lt;/td&gt;
&lt;td&gt;Messengers trained&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsibilities shirked&lt;/td&gt;
&lt;td&gt;Narrow responsibilities&lt;/td&gt;
&lt;td&gt;Risks are shared&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bridging discouraged&lt;/td&gt;
&lt;td&gt;Bridging tolerated&lt;/td&gt;
&lt;td&gt;Bridging encouraged&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Failure leads to scapegoating&lt;/td&gt;
&lt;td&gt;Failure leads to justice&lt;/td&gt;
&lt;td&gt;Failure leads to inquiry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Novelty crushed&lt;/td&gt;
&lt;td&gt;Novelty leads to problems&lt;/td&gt;
&lt;td&gt;Novelty implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While there were mistakes on both sides, the clans of Noah's sons really deserved better, especially after all they'd gone through.&lt;/p&gt;
&lt;p&gt;Imagine what wonderful products and services that team could have built in a generative organizational culture!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.biblestudytools.com/"&gt;The Bible - Read and Study Free Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates-ebook/dp/B004P1JDJO"&gt;Drive&lt;/a&gt; by Daniel Pink&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Measure-What-Matters-Google-Foundation-ebook/dp/B078FZ9SYB"&gt;Measure What Matters&lt;/a&gt; by John Doerr&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say-ebook/dp/B07L2KL5XV"&gt;Leadership Is Language&lt;/a&gt; by David Marquet&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Crucial-Conversations-Tools-Talking-Stakes-ebook/dp/B093Y3N433"&gt;Crucial Conversations&lt;/a&gt; by Grenny, Patterson, et al&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture"&gt;Westrum Organizational Culture Taxonomy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I think it's pretty well established the reason for the myth of Babel exists at all is early people were trying to figure out &amp;quot;why do we have multiple languages?&amp;quot; Linguistics wasn't a thing, yet, and understanding the evolution of language is super hard anyway, so it was easier--and reasonable--to basically say &amp;quot;God did it.&amp;quot; I just wish they hadn't tacked on &amp;quot;and it's our fault.&amp;quot;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;From &lt;em&gt;Drive&lt;/em&gt; by Daniel Pink, see Resources.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 13:58:08 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 6 - Revisiting Unit Testing</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="someone-elses-solution-to-unit-testing.net-maui-projects"&gt;(Someone Else's) Solution to Unit Testing .NET MAUI Projects&lt;/h2&gt;
&lt;p&gt;In part 2, I discussed how .NET MAUI didn't support unit testing, and that you could separate out the namespaces into their own projects. And that's still true and useful. But for many projects that's overkill. In my opinion, it's especially egregious for unit testing the View Models, which I'd prefer stay with the UI project.&lt;/p&gt;
&lt;p&gt;In his video &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=C9vIDLQwc7M"&gt;Unit Testing .NET MAUI Apps with xUnit&lt;/a&gt;, Gerald Versluis demonstrates how to modify the project to allow direct unit testing. It's pretty simple, I must say, and for fun I'll take the solution from part 5 and &lt;em&gt;collapse&lt;/em&gt; it back into a single project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to just see the answer, scroll down to &lt;em&gt;The Secret Sauce&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ideally, as long as I keep the namespaces the same, everything should work the same and pass perfectly with very little effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="creating-the-namespace-folder-structure"&gt;Creating the namespace folder structure&lt;/h2&gt;
&lt;p&gt;Right now, we have separate projects for our domain-driven design.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-12-59-46.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Let's recreate those namespaces in the &lt;code&gt;Maui.Progression&lt;/code&gt; project. Create folders like so.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-09-57.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now copy the  files and folders from the projects into the new folders.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-12-14.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Add this NuGet package to the &lt;code&gt;Maui.Progression&lt;/code&gt; project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.Toolkit.Mvvm&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If we had other dependencies, they'd need to be added as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the 'Maui.Progression.UnitTests' project, add a project reference to &lt;code&gt;Maui.Progression&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-14-45-18.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now delete these projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maui.Progression.Domain&lt;/li&gt;
&lt;li&gt;Maui.Progression.DomainServices&lt;/li&gt;
&lt;li&gt;Maui.Progression.ViewModels&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Their references will automatically be removed from the unit test project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can try to simply rebuild the solution. But I had to close and reopen Visual Studio, then clean/rebuild. The build will fail, which is expected.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-28-05.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="the-secret-sauce"&gt;The Secret Sauce&lt;/h2&gt;
&lt;p&gt;As discussed in part 2, the reason I couldn't just unit test the .NET MAUI project is because it needs to include a framework of &lt;code&gt;net6.0&lt;/code&gt;. The other reason I didn't know about, that Versluis explains, is if I add the &lt;code&gt;net6.0&lt;/code&gt; framework it needs to build as a DLL, not an Exe. This removes the &amp;quot;Main method required&amp;quot; error.&lt;/p&gt;
&lt;p&gt;Here's how to do that.&lt;/p&gt;
&lt;p&gt;Edit your &lt;code&gt;Maui.Progression.csproj&lt;/code&gt; file, either by selecting it or right-click the project name and choosing &amp;quot;Edit Project File&amp;quot;.&lt;/p&gt;
&lt;p&gt;Modify the &lt;code&gt;TargetFrameworks&lt;/code&gt; line to include &lt;code&gt;net6.0&lt;/code&gt;. I put it first.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;TargetFrameworks&amp;gt;net6.0;net6.0-android;net6.0-ios;net6.0-maccatalyst&amp;lt;/TargetFrameworks&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's the kicker. Modify the OutputType to &lt;em&gt;conditionally&lt;/em&gt; generate an Exe for everything except the &lt;code&gt;net6.0&lt;/code&gt; framework. DLL is the default when Exe isn't selected.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;OutputType Condition=&amp;quot;'$(TargetFramework)' != 'net6.0'&amp;quot;&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clean and Rebuild the solution. You many need to close/reopen Visual Studio.&lt;/p&gt;
&lt;p&gt;The solution &lt;em&gt;still&lt;/em&gt; won't build, because the &lt;code&gt;MainPage.xaml&lt;/code&gt; is attempting to reference anx external assembly.&lt;/p&gt;
&lt;p&gt;Open that file and change the namespace attributes to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clean and Rebuild is now successful!&lt;/p&gt;
&lt;p&gt;Run the tests and they pass, like magic.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-51-35.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="proscons"&gt;Pros/Cons&lt;/h2&gt;
&lt;p&gt;One advantage to keeping all the code in one project is it's a little quicker to navigate.&lt;/p&gt;
&lt;p&gt;One disadvantage is there's a tendency toward tighter coupling and worse testing design.&lt;/p&gt;
&lt;p&gt;But another, subtler disadvantage is build time. If there are no changes to the UI, and only changes to the dependency projects, the build is substantially faster. This matters when doing test-driven development because we want to keep our feedback loop fast.&lt;/p&gt;
&lt;p&gt;You need to decide what balance matters to you.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We saw how to enable unit testing against a .NET MAUI project directly by building it as a DLL against the &lt;code&gt;net6.0&lt;/code&gt; framework target. There are still challenges in unit testing where the code includes things like &lt;code&gt;SemanticReader&lt;/code&gt; calls; I'm hoping to tackle that soon.&lt;/p&gt;
&lt;p&gt;Next Up: Build (and maybe deployment), I hope.&lt;/p&gt;
</description>
      <pubDate>Tue, 19 Jul 2022 12:50:14 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 5 - Restyling From Scratch</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-problem-do-styles-solve"&gt;What Problem Do Styles Solve?&lt;/h2&gt;
&lt;p&gt;Fundamentally, styles let you declare in one place how something will look no matter where it appears. A style differs (in my mind) from a format.&lt;/p&gt;
&lt;p&gt;Let's consider a button. Here's one with a default format.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-10-27-30.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's grey, square, and uses the host's default sans serif typeface positioned top left. Now let's format the button.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, you're right, some people will say &amp;quot;style&amp;quot; the button. That's OK, I'm drawing a distinction to clarify what styles are. If you prefer, you can think of them later as &amp;quot;named styles.&amp;quot; I'll be using the word more casually later on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-10-34-19.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now the button background is blue with rounded corners, the text color is peach with a Bauhaus typeface and centered.&lt;/p&gt;
&lt;p&gt;In a larger application, I want to apply the same &lt;em&gt;format&lt;/em&gt; to each button automatically instead of manually on each one. That way, if I want to change the background to green I can do it in one place. I do that by creating a style.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is an application of the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don't Repeat Yourself (DRY)&lt;/a&gt; principle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-10-48-50.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Styles seem simple, but they get tricky pretty quickly when you want to do things like change a button's style depending on whether it's a Save or Delete (maybe the delete button should be bright red, but otherwise the same as other buttons).&lt;/p&gt;
&lt;p&gt;Taken together, styles are part of the application's UI/UX design.&lt;/p&gt;
&lt;h2 id="starting-our-styles-over"&gt;Starting Our Styles Over&lt;/h2&gt;
&lt;p&gt;Here's what our app looks like right now.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-11-02-06.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Let's get rid of all our styles. We'll create new ones later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code&gt;Maui.Progression&lt;/code&gt; project &lt;code&gt;Resources/Styles&lt;/code&gt; folder, delete these two files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Colors.xslt&lt;/li&gt;
&lt;li&gt;Styles.xslt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;code&gt;Resources/Fonts&lt;/code&gt;, delete both OpenSans .ttf files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;App.xaml&lt;/code&gt; and delete the Application.Resources node, leaving you with this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Application xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
            xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
            xmlns:local=&amp;quot;clr-namespace:Maui.Progression&amp;quot;
            x:Class=&amp;quot;Maui.Progression.App&amp;quot;&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;MauiProgram.cs&lt;/code&gt; and delete these lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;.ConfigureFonts(fonts =&amp;gt;
{
    fonts.AddFont(&amp;quot;OpenSans-Regular.ttf&amp;quot;, &amp;quot;OpenSansRegular&amp;quot;);
    fonts.AddFont(&amp;quot;OpenSans-Semibold.ttf&amp;quot;, &amp;quot;OpenSansSemibold&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;leaving this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static MauiApp CreateMauiApp()
{
	var builder = MauiApp.CreateBuilder();
	builder
		.UseMauiApp&amp;lt;App&amp;gt;();

	builder.Services.AddSingleton&amp;lt;INumberMapper&amp;gt;(new NumberMapper());
	builder.Services.AddSingleton&amp;lt;Counter&amp;gt;();
	builder.Services.AddSingleton&amp;lt;MainPage&amp;gt;();

    return builder.Build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit &lt;code&gt;Maui.Progression.csproj&lt;/code&gt; and comment out the MauiFont Include line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;		&amp;lt;!-- Custom Fonts --&amp;gt;
		&amp;lt;!--&amp;lt;MauiFont Include=&amp;quot;Resources\Fonts\*&amp;quot; /&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and replace with this code. It removes all inline styling.
&lt;blockquote&gt;
&lt;p&gt;SemanticProperties can be included in styles, but I'm not doing it in this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
            xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
            x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
            xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
            x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
            &amp;gt;
    &amp;lt;ScrollView&amp;gt;
        &amp;lt;VerticalStackLayout &amp;gt;
            &amp;lt;Image
                Source=&amp;quot;dotnet_bot.png&amp;quot;
                SemanticProperties.Description=&amp;quot;Cute dot net bot waving hi to you!&amp;quot; /&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Hello, World!&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; /&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
                SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; /&amp;gt;
            &amp;lt;Button
                Text=&amp;quot;{Binding CountText}&amp;quot;
                SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
                Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; /&amp;gt;
        &amp;lt;/VerticalStackLayout&amp;gt;
    &amp;lt;/ScrollView&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Weirdness&lt;/strong&gt;&lt;br /&gt;
I found the app still runs even if the font files are deleted &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;.ConfigureFonts&lt;/code&gt; method is still in place. Maybe that's intentional, but I'd have expected a compile error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run the app. It looks pretty horrific, but still works.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-11-36-51.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="what-are-our-elements"&gt;What Are Our Elements?&lt;/h2&gt;
&lt;p&gt;We're going to style our app, but &lt;em&gt;what&lt;/em&gt; can we style? Just like on the web, a page is made up of elements in a layout.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-12-42-27.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;All of these elements can be styled. That is, they all have a Style property that can be set to a named style. Setting the element's properties overrides the style.&lt;/p&gt;
&lt;p&gt;We can think of our layout as a set of containers. Styles are &lt;em&gt;inherited&lt;/em&gt;, meaning inner elements (usually) get the same formatting as the outer elements unless overridden.&lt;/p&gt;
&lt;p&gt;We're going to progressively style our app's elements, and then add a button with some overrides.&lt;/p&gt;
&lt;h2 id="the-hard-way"&gt;The Hard Way&lt;/h2&gt;
&lt;p&gt;But first, let's format each element separately, starting with the content page. Add a BackgroundColor to &lt;code&gt;MainPage.xaml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
             BackgroundColor=&amp;quot;AliceBlue&amp;quot;
             &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, this changes the background to a pale blue.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-13-01-45.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Note a couple of things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The button background is white. That's because it's not transparent like the labels.&lt;/li&gt;
&lt;li&gt;The title background is still white. Why is that?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our app is using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/fundamentals/shell/"&gt;Shell App&lt;/a&gt; method for laying out the overall content, which includes the title element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of App Shell as the overall container for your app that all pages inherit from.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open &lt;code&gt;AppShell.xaml&lt;/code&gt; and format the Shell.BackgroundColor and Shell.TitleColor.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Shell
    x:Class=&amp;quot;Maui.Progression.AppShell&amp;quot;
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
    xmlns:local=&amp;quot;clr-namespace:Maui.Progression.Views&amp;quot;
    Shell.FlyoutBehavior=&amp;quot;Disabled&amp;quot; 
    Shell.BackgroundColor=&amp;quot;MediumPurple&amp;quot;
    Shell.TitleColor=&amp;quot;GhostWhite&amp;quot;
    &amp;gt;
    &amp;lt;ShellContent
        Title=&amp;quot;Home&amp;quot;
        ContentTemplate=&amp;quot;{DataTemplate local:MainPage}&amp;quot;
        Route=&amp;quot;MainPage&amp;quot; /&amp;gt;
&amp;lt;/Shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note this is also where the default page Title is set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, these same properties &lt;em&gt;can&lt;/em&gt; be set in a view's ContentPage element. So, each page could have a different title color. Whimsy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's the result. (No one ever said I'm good with colors.)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-13-11-31.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Back to &lt;code&gt;MainPage.xaml&lt;/code&gt; and well finish our manual formatting.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
             BackgroundColor=&amp;quot;AliceBlue&amp;quot;
             &amp;gt;
    &amp;lt;ScrollView&amp;gt;
        &amp;lt;VerticalStackLayout&amp;gt;
            &amp;lt;Image
                Source=&amp;quot;dotnet_bot.png&amp;quot;
                SemanticProperties.Description=&amp;quot;Cute dot net bot waving hi to you!&amp;quot; 
                WidthRequest=&amp;quot;50&amp;quot;
                HorizontalOptions=&amp;quot;Start&amp;quot;
                Margin=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Hello, World!&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
                FontSize=&amp;quot;Header&amp;quot; 
                TextColor=&amp;quot;Purple&amp;quot; 
                FontFamily=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
                SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
                FontSize=&amp;quot;15&amp;quot;
                HorizontalTextAlignment=&amp;quot;Center&amp;quot;
                Margin=&amp;quot;0,0,10,10&amp;quot; 
                FontFamily=&amp;quot;AbrilFatface&amp;quot; /&amp;gt;
            &amp;lt;Button
                Text=&amp;quot;{Binding CountText}&amp;quot;
                SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
                Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; 
                HorizontalOptions=&amp;quot;End&amp;quot; 
                Margin=&amp;quot;0,0,10,0&amp;quot;
                BackgroundColor=&amp;quot;#b0dce1&amp;quot; 
                FontFamily=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/VerticalStackLayout&amp;gt;
    &amp;lt;/ScrollView&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the app to get this admittedly ugly user experience, but one that demonstrates some features.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-14-23-40.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Our changes are working except for the font. That's because we need to explicitly load that font resource.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="https://fonts.google.com/specimen/Abril+Fatface?query=fatface"&gt;Abril Fatface&lt;/a&gt; font from Google. (Or use some other font file of your choice.)&lt;/li&gt;
&lt;li&gt;Unpack and copy the files into the &lt;code&gt;Resources\Fonts&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Maui.Progression.csproj&lt;/code&gt;, uncomment this line to include any font files in the Fonts folder in the app build.
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;MauiFont Include=&amp;quot;Resources\Fonts\*&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;MauiProgram.cs&lt;/code&gt; add this code to register the font file and give it a friendly name.
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder
    .UseMauiApp&amp;lt;App&amp;gt;()
    .ConfigureFonts(fonts =&amp;gt;
    {
        fonts.AddFont(&amp;quot;AbrilFatface-Regular.ttf&amp;quot;, &amp;quot;AbrilFatface&amp;quot;);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Restart the app to see the change.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-15-18-25.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="page-level-styles-ending-with-inheritance"&gt;Page-Level Styles (Ending With Inheritance)&lt;/h2&gt;
&lt;p&gt;We can format at the lowest level: individual elements. Let's create some styles at the page level.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;MainPage.xaml&lt;/code&gt;, add a ContentPage.Resources node with the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage.Resources&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;page&amp;quot; TargetType=&amp;quot;ContentPage&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot; /&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace the ContentPage &lt;code&gt;BackgroundColor=&amp;quot;AliceBlue&amp;quot;&lt;/code&gt; property with a Style property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
==&amp;gt;          Style=&amp;quot;{StaticResource page}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try running the app. Here we run into an irritating error.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-15-11-15.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Maybe I'm missing something, but it appears we can't define a ContentPage style for the content page we're in. Harrumph!&lt;/p&gt;
&lt;p&gt;Undo both changes above. We &lt;em&gt;can&lt;/em&gt; create ContentPage styles, but we'll do it later when we move our styles to the application.&lt;/p&gt;
&lt;p&gt;For now, add this &lt;code&gt;ContentPage.Resources&lt;/code&gt; block instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;    &amp;lt;ContentPage.Resources&amp;gt;
        &amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style TargetType=&amp;quot;Button&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
    &amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In each label and the button, delete the &lt;code&gt;FontFamily=&amp;quot;AbrilFatface&amp;quot;&lt;/code&gt; attribute, then rerun the app, which should look the same as before. All we've done is create a couple of styles that say &amp;quot;If you display a label or a button, use the AbrilFatface font.&amp;quot; You can prove it works by changing the FontFamily name to something else such as &amp;quot;Consolas&amp;quot; (on Windows).&lt;/p&gt;
&lt;p&gt;These are &lt;em&gt;implicit&lt;/em&gt; styles. They're applied to elements that match the TargetType exactly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br /&gt;
But not to elements derived from the TargetType unless ApplyToDerivedTypes = True. See Microsoft's documentation (linked in Resources) for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's convert these to &lt;em&gt;explicit&lt;/em&gt; styles. We do that by setting the &lt;code&gt;x:Key&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage.Resources&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;baseLabel&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    
    &amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we've given our styles keys, we need to explicitly use them by using the Style attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Label 
    Text=&amp;quot;Hello, World!&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
    FontSize=&amp;quot;Header&amp;quot; 
    TextColor=&amp;quot;Purple&amp;quot; 
    Style=&amp;quot;{StaticResource baseLabel}&amp;quot;
    /&amp;gt;
&amp;lt;Label 
    Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
    SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
    FontSize=&amp;quot;15&amp;quot;
    HorizontalTextAlignment=&amp;quot;Center&amp;quot;
    Margin=&amp;quot;0,0,10,10&amp;quot; 
    Style=&amp;quot;{StaticResource baseLabel}&amp;quot;
        /&amp;gt;
&amp;lt;Button
    Text=&amp;quot;{Binding CountText}&amp;quot;
    SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
    Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; 
    HorizontalOptions=&amp;quot;End&amp;quot; 
    Margin=&amp;quot;0,0,10,0&amp;quot;
    BackgroundColor=&amp;quot;#b0dce1&amp;quot; 
    Style=&amp;quot;{StaticResource baseButton}&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let's build on this by defining two label styles that &lt;em&gt;inherit&lt;/em&gt; from &lt;code&gt;baseLabel&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Per Microsoft, &amp;quot;An implicit style can be derived from an explicit style, but an explicit style can't be derived from an implicit style.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style x:Key=&amp;quot;baseLabel&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style x:Key=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; BasedOn=&amp;quot;{StaticResource baseLabel}&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style x:Key=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot; BasedOn=&amp;quot;{StaticResource baseLabel}&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The formatting can be removed from the labels.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Label 
    Text=&amp;quot;Hello, World!&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
    Style=&amp;quot;{StaticResource header}&amp;quot;
    /&amp;gt;
&amp;lt;Label 
    Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
    SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
    Style=&amp;quot;{StaticResource greeting}&amp;quot;
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's assume our &lt;code&gt;baseButton&lt;/code&gt; is going to use all the formatting, not just the font.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;End&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,0&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;#b0dce1&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which lets us simplify the button element.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Button
    Text=&amp;quot;{Binding CountText}&amp;quot;
    SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
    Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; 
    Style=&amp;quot;{StaticResource baseButton}&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And do the same thing with the image. Why? I've found it's generally a good practice to keep all your styling together, even what seems like one-offs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;&lt;br /&gt;
What this helps with is &lt;em&gt;separation of concerns&lt;/em&gt;. We're separating out the styling (how elements look) from the semantics (what elements mean), letting us encapsulate our code and improve maintainability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style x:Key=&amp;quot;pageImage&amp;quot; TargetType=&amp;quot;Image&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Source&amp;quot; Value=&amp;quot;dotnet_bot.png&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;WidthRequest&amp;quot; Value=&amp;quot;50&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;Start&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Image
    Source=&amp;quot;dotnet_bot.png&amp;quot;
    SemanticProperties.Description=&amp;quot;Cute dot net bot waving hi to you!&amp;quot; 
    Style=&amp;quot;{StaticResource pageImage}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inheritance is nice and all, and tempting, but let's redo our styles to use what's often more powerful: composition through classes.&lt;/p&gt;
&lt;h2 id="styling-with-classes"&gt;Styling With Class(es)&lt;/h2&gt;
&lt;p&gt;One issue we ran into above is, in order to define named styles for our labels, we needed to inherit from a named base style.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br /&gt;
That's not the way it works in Cascading Style Sheets (CSS), where you can define styles for all label tags, then named styles that override those styles (using either an id or class identifier).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we use inheritance, we're stuck with whatever styles we defined in the base style. We can &lt;em&gt;override&lt;/em&gt; those styles, but not &lt;em&gt;remove&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;If we use classes, we can define characteristics or behaviors that we're styling for, define small, discreet sets of styles, and combine them. For example, maybe all labels have a blue background (&amp;quot;normal&amp;quot;), some get a bold font (&amp;quot;strong&amp;quot;), others get a large font size (&amp;quot;big&amp;quot;). Using classes, we could style a label as &amp;quot;normal strong&amp;quot;, &amp;quot;normal big&amp;quot;, or &amp;quot;normal strong big&amp;quot;.&lt;/p&gt;
&lt;p&gt;In our case, we're going to replace our inherited label styles with class-based styles, just to prove it works.&lt;/p&gt;
&lt;p&gt;Remove/replace the &lt;code&gt;x:Key&lt;/code&gt; attributes as shown.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style Class=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; &amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style Class=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the label elements to use the StyleClass attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Label 
    Text=&amp;quot;Hello, World!&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
    StyleClass=&amp;quot;header&amp;quot;
    /&amp;gt;
&amp;lt;Label 
    Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
    SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
    StyleClass=&amp;quot;greeting&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart the app and it should look the same as before.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
There's a downside to using classes. You can't interactively change style values while the app is running, because the changes aren't supported by Hot Reload. This is unfortunate, because using classes is really valuable and the friction might make developers shy away from them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="movin-on-up-using-global-styles"&gt;Movin' On Up! Using Global Styles&lt;/h2&gt;
&lt;p&gt;The next level up for styles is the Application. Here you define styles used throughout your pages. It's where you should expect most of your styles to live.&lt;/p&gt;
&lt;p&gt;Cut the entire &lt;code&gt;ContentPage.Resources&lt;/code&gt; node from &lt;code&gt;MainPage.xaml&lt;/code&gt; and paste it into &lt;code&gt;App.xaml&lt;/code&gt; inside the &lt;code&gt;Application&lt;/code&gt; node. Then rename it to &amp;quot;Application.Resources&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Application xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Maui.Progression&amp;quot;
             x:Class=&amp;quot;Maui.Progression.App&amp;quot;&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;Style x:Key=&amp;quot;pageImage&amp;quot; TargetType=&amp;quot;Image&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Source&amp;quot; Value=&amp;quot;dotnet_bot.png&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;WidthRequest&amp;quot; Value=&amp;quot;50&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;Start&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style Class=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; &amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style Class=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;End&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,0&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;#b0dce1&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's . . . it. The app runs the same as before.&lt;/p&gt;
&lt;p&gt;Let's deal with something from earlier, though. Remember our content page background color? We can create a style for content pages here. Add the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;ContentPage&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back in &lt;code&gt;MainPage.xaml&lt;/code&gt;, delete the ContentPage BackgroundColor attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
-&amp;gt; DELETE    BackgroundColor=&amp;quot;AliceBlue&amp;quot;
             &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rerun the app and you should still see a blue background.&lt;/p&gt;
&lt;p&gt;But you don't! Why not? Because our pages are derived from ContentPage, which isn't obvious. The solution?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;ContentPage&amp;quot; ApplyToDerivedTypes=&amp;quot;True&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot; /&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the background shows as expected.&lt;/p&gt;
&lt;h2 id="take-your-styles-outside-young-man"&gt;Take Your Styles Outside, Young Man&lt;/h2&gt;
&lt;p&gt;If you've worked with web sites, you know that separate style files is a big deal. And, as noted above, it's a good practice. So let's come full circle and pull our styles out into their own file.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a file named &lt;code&gt;Styles.xaml&lt;/code&gt; to the &lt;code&gt;Resources/Styles&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Cut the &lt;code&gt;Application.Resources&lt;/code&gt; node from &lt;code&gt;App.xaml&lt;/code&gt; and paste it into &lt;code&gt;Styles.xaml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rename &lt;code&gt;Application.Resources&lt;/code&gt; to &lt;code&gt;ResourceDictionary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the top of the file like so.
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;?xaml-comp compile=&amp;quot;true&amp;quot; ?&amp;gt;
&amp;lt;ResourceDictionary 
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the complete file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;?xaml-comp compile=&amp;quot;true&amp;quot; ?&amp;gt;
&amp;lt;ResourceDictionary 
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;&amp;gt;
    &amp;lt;Style TargetType=&amp;quot;ContentPage&amp;quot; ApplyToDerivedTypes=&amp;quot;True&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;pageImage&amp;quot; TargetType=&amp;quot;Image&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Source&amp;quot; Value=&amp;quot;dotnet_bot.png&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;WidthRequest&amp;quot; Value=&amp;quot;50&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;Start&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style Class=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; &amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style Class=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;End&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,0&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;#b0dce1&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/ResourceDictionary&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back in &lt;code&gt;App.xaml&lt;/code&gt;, we're going to merge our styles file. If we had more than one file (likely), we'd merge them all this way.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Application xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Maui.Progression&amp;quot;
             x:Class=&amp;quot;Maui.Progression.App&amp;quot;&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;ResourceDictionary Source=&amp;quot;Resources/Styles/Styles.xaml&amp;quot;/&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rerun the app and, as before, it has our styles.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We covered a lot, but XAML styles are a much deeper subject and I won't say I've explored its fathoms. Be sure to check out the links below.&lt;/p&gt;
&lt;p&gt;Next up: Build (and maybe deployment)!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/user-interface/styles/xaml"&gt;Style apps using XAML - .NET MAUI | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/user-interface/fonts"&gt;Fonts in .NET MAUI - .NET MAUI | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries"&gt;Resource dictionaries - .NET MAUI | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 11 Jul 2022 19:11:18 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 4 - Putting the View in Its Place</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="moving-the-view"&gt;Moving the View&lt;/h2&gt;
&lt;p&gt;Compared to the &lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;last part&lt;/a&gt;, this one's really short.&lt;/p&gt;
&lt;p&gt;Our app has one view, MainPage, sitting in the root of the project. Like the rest of this series, that's fine for a small app with just a few views. But let's keep our app tidy and pretend it's going to have a dozen views.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which might be an awful lot for a mobile app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the &lt;code&gt;Maui.Progression&lt;/code&gt; project, add a folder named &amp;quot;Views&amp;quot; and move the MainPage files (&lt;code&gt;MainPage.xaml&lt;/code&gt; and &lt;code&gt;MainPage.xaml.cs&lt;/code&gt;) into it. When prompted to adjust namespaces, choose Yes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/2022-07-04-19-07-19.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Trickery, trickery, trickery&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;Neither&lt;/em&gt; of our files' namespaces got updated.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; and update the namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.ViewModels;

namespace Maui.Progression.Views;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and update the page's x:Class namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to edit &lt;code&gt;MauiProgram.cs&lt;/code&gt; to add &lt;code&gt;Maui.Progression.Views&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.DomainServices;
using Maui.Progression.DomainServices.Interfaces;
using Maui.Progression.ViewModels;
using Maui.Progression.Views;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;And&lt;/em&gt; the &lt;code&gt;AppShell.xaml&lt;/code&gt; &amp;quot;local&amp;quot; namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Shell
    x:Class=&amp;quot;Maui.Progression.AppShell&amp;quot;
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
    xmlns:local=&amp;quot;clr-namespace:Maui.Progression.Views&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the program and the tests. Et voila! it works.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;I know, I know. &amp;quot;Jeez, that was easy, what was the point?&amp;quot;&lt;/p&gt;
&lt;p&gt;The point is that we now have a well-organized application, which increases maintainability. We're following a View-Model-ViewModel pattern, and our Views, View Models, and Models are corralled into their metaphorical pens. We also saw just how pervasive and important the namespaces are, and that--unlike some other refactoring--Visual Studio doesn't (today) catch everything.&lt;/p&gt;
&lt;p&gt;Next Up: Styles!&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;From The Far Side by Gary Larson&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/farside-trickery.jpg" alt="" /&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Mon, 4 Jul 2022 19:00:47 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 3 - Adding the Model, More Testing, and DDD</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-role-of-the-model-in-mvvm"&gt;The Role of the Model in MVVM&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Ugaya40, CC BY-SA 3.0 &lt;a href="https://creativecommons.org/licenses/by-sa/3.0"&gt;https://creativecommons.org/licenses/by-sa/3.0&lt;/a&gt;, via Wikimedia Commons&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The purpose of the Model in MVVM is the same as in MVC. It's a class that either models a part of the domain (the way the business sees itself) or the data. In enterprise applications practicing Domain-Driven Design, a service usually populates the Domain Model from Data Models (abstractions of the various data sources).&lt;/p&gt;
&lt;p&gt;Here's a more accurate diagram of a complex system.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/ddd-diagram.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;We probably won't go deep into the data portion&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, but getting the Model from a service is pretty common. Along the way, we'll write unit tests.&lt;/p&gt;
&lt;h2 id="the-feature"&gt;The Feature&lt;/h2&gt;
&lt;p&gt;We'll implement a simple feature: display the word for the number of button taps up to ten. To do that, we'll get a map of numbers to words from our service.&lt;/p&gt;
&lt;h2 id="the-architecture"&gt;The Architecture&lt;/h2&gt;
&lt;p&gt;Here's the namespace/folder layout we'll end up with. I'm following a general DDD/Onion Architecture.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Solution
|_Maui.Progression
|_Maui.Progression.Domain
  |_Models
    |-NumberMap.cs
    |-NumberMapItem.cs
|_Maui.Progression.DomainServices
  |_Interfaces
    |-INumberMapper.cs
  |_NumberMapper.cs
|_Maui.Progression.UnitTests
  |-Counter_Should.cs
  |-NumberMap_Should.cs
  |-NumberMapperService_Should.cs
|_Maui.Progression.ViewModels
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-domain-models"&gt;The Domain Models&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Add two new .NET Class Library projects, one named &lt;code&gt;Maui.Progression.Domain&lt;/code&gt;, the other named &lt;code&gt;Maui.Progression.DomainServices&lt;/code&gt;.
&lt;blockquote&gt;
&lt;p&gt;These are plain class libraries, not specific to .NET MAUI.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;Models&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Delete &lt;code&gt;Class1.cs&lt;/code&gt;, add &lt;code&gt;NumberMapItem.cs&lt;/code&gt; to Models with this code.
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Maui.Progression.Domain.Models;

public class NumberMapItem
{
    public int Number { get; set; }
    public string Word { get; set; } = string.Empty;

}    
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, we'll create a domain model for the collection of number map items, so let's create a test. In &lt;code&gt;Maui.Progression.UnitTests&lt;/code&gt;,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a project dependency to &lt;code&gt;Maui.Progression.Domain&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add a class named &lt;code&gt;NumberMap_Should.cs&lt;/code&gt; with this code.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.Domain;

namespace Maui.Progression.UnitTests;

public class NumberMap_Should
{
    [Fact]
    public void Return_words_for_numbers()
    {
        // arrange
        var map = new NumberMap();

        // act
        map.Map = new List&amp;lt;NumberMapItem&amp;gt;()
        {
            new NumberMapItem() { Number = 0, Word = &amp;quot;zero&amp;quot;},
            new NumberMapItem() { Number = 1, Word = &amp;quot;one&amp;quot;},
            new NumberMapItem() { Number = 2, Word = &amp;quot;two&amp;quot;},
            new NumberMapItem() { Number = 3, Word = &amp;quot;three&amp;quot;},
            new NumberMapItem() { Number = 4, Word = &amp;quot;four&amp;quot;},
            new NumberMapItem() { Number = 5, Word = &amp;quot;five&amp;quot;},
            new NumberMapItem() { Number = 6, Word = &amp;quot;six&amp;quot;},
            new NumberMapItem() { Number = 7, Word = &amp;quot;seven&amp;quot;},
            new NumberMapItem() { Number = 8, Word = &amp;quot;eight&amp;quot;},
            new NumberMapItem() { Number = 9, Word = &amp;quot;nine&amp;quot;},
            new NumberMapItem() { Number = 10, Word =&amp;quot;ten&amp;quot;}
        };

        // assert
        Assert.Equal(&amp;quot;zero&amp;quot;, map.ToWord(0));
        Assert.Equal(&amp;quot;one&amp;quot;,  map.ToWord(1));
        Assert.Equal(&amp;quot;two&amp;quot;,  map.ToWord(2));
        Assert.Equal(&amp;quot;three&amp;quot;,map.ToWord(3));
        Assert.Equal(&amp;quot;four&amp;quot;, map.ToWord(4));
        Assert.Equal(&amp;quot;five&amp;quot;, map.ToWord(5));
        Assert.Equal(&amp;quot;six&amp;quot;,  map.ToWord(6));
        Assert.Equal(&amp;quot;seven&amp;quot;,map.ToWord(7));
        Assert.Equal(&amp;quot;eight&amp;quot;,map.ToWord(8));
        Assert.Equal(&amp;quot;nine&amp;quot;, map.ToWord(9));
        Assert.Equal(&amp;quot;ten&amp;quot;,  map.ToWord(10));
    }

    [Fact]
    public void Return_null_if_number_not_found()
    {
        // arrange
        var map = new NumberMap();

        // act
        // assert
        Assert.Empty(map.Map);
        Assert.Null(map.ToWord(0));

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's contrived, I know, but we have two tests, one to make sure we return words for numbers, the other for what happens if a number doesn't have a word.&lt;/p&gt;
&lt;p&gt;Now add the class &lt;code&gt;NumberMap.cs&lt;/code&gt; to the Models folder with this code to pass the tests.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Maui.Progression.Domain.Models
{
    public class NumberMap
    {
        public List&amp;lt;NumberMapItem&amp;gt; Map { get; set; } = new();

        public string? ToWord(int number) =&amp;gt; Map.SingleOrDefault(a =&amp;gt; a.Number.Equals(number))?.Word;

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-domain-service"&gt;The Domain Service&lt;/h2&gt;
&lt;p&gt;Our domain service will return the domain model. Again, this is all overkill in reality, but it demonstrates the techniques.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the unit tests project, add a project reference to the DomainServices project.&lt;/li&gt;
&lt;li&gt;Add a unit test class named &lt;code&gt;NumberMapperService_Should.cs&lt;/code&gt; with this code.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.DomainServices;

namespace Maui.Progression.UnitTests;

public class NumberMapperService_Should
{
    readonly NumberMapper numberMapper;

    // This would normally be an injectable data service
    // such as Entity Framework. We'd use an in-memory database
    // to mock our data access.
    readonly string numberData = @&amp;quot;[
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:1, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;one&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:3, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;three&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:5, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;five&amp;quot;&amp;quot;}
]&amp;quot;;

    public NumberMapperService_Should()
    {        
        numberMapper = new NumberMapper(numberData);
    }

    [Fact]
    public void Return_a_populated_NumberMap()
    {
        // arrange
        // act
        var result = numberMapper.GetNumberMap();

        // assert
        Assert.NotEmpty(result.Map);
        Assert.Equal(3, result.Map.Count);
        Assert.Equal(&amp;quot;one&amp;quot;, result.ToWord(1));
        Assert.Equal(&amp;quot;three&amp;quot;, result.ToWord(3));
        Assert.Equal(&amp;quot;five&amp;quot;, result.ToWord(5));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code declares the service and injects our own test data instead of letting it get data from an external source.&lt;/p&gt;
&lt;p&gt;Add an &lt;code&gt;Interfaces&lt;/code&gt; folder and an interface to DomainServices named &lt;code&gt;INumberMapper.cs&lt;/code&gt; with this code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.Domain.Models;

namespace Maui.Progression.DomainServices.Interfaces;

public interface INumberMapper
{
    NumberMap GetNumberMap();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll use this interface later to test our ViewModel.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The principles here are A) program to the interface, and B) dependency injection. By injecting an interface, we can mock the behavior later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Add a class named &lt;code&gt;NumberMapper.cs&lt;/code&gt; to DomainServices.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.Domain.Models;
using Maui.Progression.DomainServices.Interfaces;
using System.Text.Json;

namespace Maui.Progression.DomainServices
{
    public class NumberMapper : INumberMapper
    {
        string numberData = @&amp;quot;[
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:1, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;one&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:2, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;two&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:3, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;three&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:4, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;four&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:5, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;five&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:6, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;six&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:7, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;seven&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:8, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;eight&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:9, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;nine&amp;quot;&amp;quot;},
{&amp;quot;&amp;quot;number&amp;quot;&amp;quot;:10, &amp;quot;&amp;quot;word&amp;quot;&amp;quot;:&amp;quot;&amp;quot;ten&amp;quot;&amp;quot;}
]&amp;quot;;

        public NumberMapper(string numberData = &amp;quot;&amp;quot;)
        {
            // Normally numberData would be an injectable data service
            // like Entity Framework.
            // Here we're letting the unit test inject test data. If empty,
            // assume the data service returned values 1-10.
            if (!String.IsNullOrEmpty(numberData))
                this.numberData = numberData;
        }
        public NumberMap GetNumberMap()
        {
            // Get our data and map it to our domain model list of map items.
            var options = new System.Text.Json.JsonSerializerOptions();
            options.PropertyNameCaseInsensitive = true;
            var items = JsonSerializer.Deserialize&amp;lt;List&amp;lt;NumberMapItem&amp;gt;&amp;gt;(numberData, options);
            // Populate the NumberMap domain model
            var map = new NumberMap() { Map = items ?? new List&amp;lt;NumberMapItem&amp;gt;() };
            // Return the domain model
            return map; ;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The class looks busy, but that's because of simulating getting JSON data from a database or external service. The method under test, &lt;code&gt;GetNumberMap&lt;/code&gt;, is really pretty simple and follows a common pattern.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get external data.&lt;/li&gt;
&lt;li&gt;Map the data to our domain model.&lt;/li&gt;
&lt;li&gt;Return the model.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The test should pass! Note that we're &lt;em&gt;injecting&lt;/em&gt; our test data, which is why we can assert that there are three items. When we use call the service from our ViewModel, it'll default to returning ten items.&lt;/p&gt;
&lt;h2 id="updating-the-viewmodel-to-use-the-service"&gt;Updating the ViewModel to Use the Service&lt;/h2&gt;
&lt;p&gt;Let's update our ViewModel &lt;code&gt;Counter_Should&lt;/code&gt; tests to use the service. To do this, we need to mock the service, and let's start making our assertions easier to construct and read. In the Unit Tests project install two NuGet packages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSubstitute&lt;/li&gt;
&lt;li&gt;FluentAssertions&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Of course, you can use your preferred mocking library such as Moq, and your preferred assertion library such as Shouldly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to do some prep before our test so that our solution builds with our dependency injection.&lt;/p&gt;
&lt;p&gt;In ViewModels, open the &lt;code&gt;Counter&lt;/code&gt; view model and update these top several lines. This will &lt;em&gt;not&lt;/em&gt; pass the test!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.DomainServices;
using Maui.Progression.DomainServices.Interfaces;
using Microsoft.Toolkit.Mvvm.ComponentModel;
using Microsoft.Toolkit.Mvvm.Input;

namespace Maui.Progression.ViewModels;

public partial class Counter : ObservableObject
{
    readonly INumberMapper numberMapperService;

    [ObservableProperty]
    [AlsoNotifyChangeFor(nameof(CountText))]
    int count;

    public Counter(INumberMapper numberMapperService) =&amp;gt; this.numberMapperService = numberMapperService ?? new NumberMapper();

. . .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the app, open &lt;code&gt;Mainpage.xaml.cs&lt;/code&gt; and change to this. Notice we're now injecting the Counter view model.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.ViewModels;

namespace Maui.Progression;

public partial class MainPage : ContentPage
{
	public MainPage(Counter viewModel)
	{
		InitializeComponent();
		BindingContext = viewModel;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open &lt;code&gt;MauiProgram.cs&lt;/code&gt; and change to this. We're configuring the application's dependency injection service, telling it &amp;quot;If a parameter is of this type, then automatically create or use an existing instance so I don't have to code it myself.&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.DomainServices.Interfaces;
using Maui.Progression.ViewModels;

namespace Maui.Progression;

public static class MauiProgram
{
	public static MauiApp CreateMauiApp()
	{
		var builder = MauiApp.CreateBuilder();
		builder
			.UseMauiApp&amp;lt;App&amp;gt;()			
			.ConfigureFonts(fonts =&amp;gt;
			{
				fonts.AddFont(&amp;quot;OpenSans-Regular.ttf&amp;quot;, &amp;quot;OpenSansRegular&amp;quot;);
				fonts.AddFont(&amp;quot;OpenSans-Semibold.ttf&amp;quot;, &amp;quot;OpenSansSemibold&amp;quot;);
			});

		builder.Services.AddSingleton&amp;lt;INumberMapper&amp;gt;(new NumberMapper());
		builder.Services.AddSingleton&amp;lt;Counter&amp;gt;();
		builder.Services.AddSingleton&amp;lt;MainPage&amp;gt;();

        return builder.Build();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can update the &lt;code&gt;Counter_Should&lt;/code&gt; test class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.ViewModels;
using FluentAssertions;
using NSubstitute;
using Maui.Progression.DomainServices.Interfaces;
using Maui.Progression.Domain.Models;

namespace Maui.Progression.UnitTests;

public class Counter_Should
{
    readonly INumberMapper numberMapperService;
    Counter? counter;

    public Counter_Should()
    {
        // Mock the service interface. We want to control the domain model it returns.
        numberMapperService = Substitute.For&amp;lt;INumberMapper&amp;gt;();
    }

    [Fact]
    public void Increment_counter_by_one_using_command()
    {
        // arrange
        int expectedNumber = 1;
        string expectedWord = &amp;quot;one&amp;quot;;
        NumberMap map = new()
        {
            Map = new List&amp;lt;NumberMapItem&amp;gt;()
            {
                new NumberMapItem() { Number = expectedNumber, Word = expectedWord }
            }
        };
        numberMapperService.GetNumberMap().Returns(map);

        // Inject the service into the view model
        counter = new Counter(numberMapperService);

        // verify the starting count
        counter.Count.Should().Be(0, &amp;quot;starting count should have been zero.&amp;quot;);

        // act
        counter.IncreaseCounterCommand.Execute(null);

        // assert
        counter.Count.Should().Be(expectedNumber);
        counter.CountText.Should().Contain(expectedWord);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's going on here?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Declare our service interface and Counter view model&lt;/li&gt;
&lt;li&gt;Mock the service. We don't want it calling the outside world. We want to control its behavior.&lt;/li&gt;
&lt;li&gt;Inject our mocked service into the view model&lt;/li&gt;
&lt;li&gt;Test that the view model increments by 1, and the text contains &amp;quot;one&amp;quot;.&lt;/li&gt;
&lt;li&gt;Part of the test includes explicitly setting what NumberMap object the service will return before instantiating the view model.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Confession&lt;/strong&gt;&lt;br /&gt;
Right about here I had to close Visual Studio, delete all the solution bin and obj folders, reopen Visual Studio and rebuild the solution. I kept getting a &amp;quot;Cannot resolve Assembly&amp;quot; warning in ViewModels/bin/Debug. When I rebuilt, it revealed errors that weren't being listed before. But this won't happen to you, of course!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point, you should be able to build the solution and run the test, which will fail. But not the way I expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System.IO.FileNotFoundException : Could not load file or assembly 'Microsoft.Maui.Essentials,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, heck. How is the solution building but not running for the test? It's because of this line in &lt;code&gt;Counter.cs&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;SemanticScreenReader.Announce(text);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our test doesn't have a .NET MAUI platform context, so it can't run the SemanticScreenReader. The purpose of this is accessibility. We don't want to lose that, but Microsoft hasn't made it easy on us.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Confession&lt;/strong&gt;&lt;br /&gt;
Ugh, so I hate to do this, but for this tutorial the &amp;quot;solution&amp;quot; is to comment out the &lt;code&gt;SemanticScreenReader.Announce&lt;/code&gt; statement. It looks like the way to get this working is mocking the application context. I'll try that in a later post so I can give it my full attention.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// SemanticScreenReader.Announce(text);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the above commented out, the test should run and fail.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Expected counter.CountText &amp;quot;Clicked 1 time&amp;quot; to contain &amp;quot;one&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the &lt;code&gt;Counter.cs&lt;/code&gt; class like so to get the test to pass.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.Domain.Models;
using Maui.Progression.DomainServices;
using Maui.Progression.DomainServices.Interfaces;
using Microsoft.Toolkit.Mvvm.ComponentModel;
using Microsoft.Toolkit.Mvvm.Input;

namespace Maui.Progression.ViewModels;

public partial class Counter : ObservableObject
{
    readonly INumberMapper numberMapperService;
    readonly NumberMap map = new();

    [ObservableProperty]
    [AlsoNotifyChangeFor(nameof(CountText))]
    int count;

    public Counter(INumberMapper numberMapper) { 
        this.numberMapperService = numberMapper ?? new NumberMapper();
        map = numberMapperService.GetNumberMap();
    }

    public string CountText
    {
        get
        {
            string text = &amp;quot;Click me&amp;quot;;
            if (count &amp;gt; 0)
            {
                var word = map.ToWord(count) ?? &amp;quot;Unknown&amp;quot;;
                text = $&amp;quot;Clicked {word} &amp;quot; + (count == 1 ? &amp;quot;time&amp;quot; : &amp;quot;times&amp;quot;);
            }
            // SemanticScreenReader.Announce(text);
            return text;
        }
    }

    [ICommand]
    void IncreaseCounter()
    {
        Count++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="run-the-app"&gt;Run the App&lt;/h2&gt;
&lt;p&gt;Of course, run the app, 'cause passing unit tests doesn't guarantee success, it just improves the odds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Confession&lt;/strong&gt;&lt;br /&gt;
Mine didn't run right the first time. I forgot to pass the options to the JSON deserializer. Which led me to improving the test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/2022-07-02-16-21-20.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Properly adding a domain model involved quite a bit of work. Hopefully it's also clear that the increase in code resulted in a significant increase in testability.&lt;/p&gt;
&lt;p&gt;Next up: Refactoring the View!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;Jeffrey Palermo codified the Onion Architecture many years ago. I use it. I think you should, too.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeffreypalermo.com/2013/08/onion-architecture-part-4-after-four-years/"&gt;Onion Architecture: Part 4 – After Four Years | Programming with Palermo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Steve Smith is an excellent developer. So is Julie Lerman. They're so good that even though I haven't watched this course, I'm sure it's tops.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pluralsight.com/courses/fundamentals-domain-driven-design"&gt;Domain-Driven Design Fundamentals | Pluralsight&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And I'll bet this YouTube presentation is a great intro.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tdiOqW4ZYu4"&gt;Clean Architecture with ASP.NET Core with Steve Smith | Hampton Roads .NET Users Group - YouTube&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Or we might!&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sat, 2 Jul 2022 16:45:08 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd</guid>
    </item>
    <item>
      <title>The Worst Interview Question</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_worst_interview_question/van-tay-media-TFFn3BYLc5s-unsplash.jpg" alt="" /&gt;&lt;br /&gt;
&lt;sup&gt;Photo by Van Tey Media, Free to use under the Unsplash License&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I know this is kind of click-bait; there are many interview questions that could rise to the level of &amp;quot;worst.&amp;quot; But this one really irks me. The worst interview question comes at the very beginning and is excruciatingly common.&lt;/p&gt;
&lt;p&gt;&amp;quot;Tell me about yourself.&amp;quot;&lt;/p&gt;
&lt;p&gt;Now, purists will complain that this isn't even a question, that it's a command. I'd argue it's a question in the form of a statement. But that's trivial. It's not what bugs me. When I'm asked this, I usually respond with some polite variation of&lt;/p&gt;
&lt;p&gt;&amp;quot;You have my résumé. What do you want to know?&amp;quot;&lt;/p&gt;
&lt;p&gt;Do you see? Why ask that first, broad, unfocused question? From the interviewer's point of view, I think many would say, &amp;quot;It shows me how you present yourself.&amp;quot;&lt;/p&gt;
&lt;p&gt;No, it doesn't. Not accurately.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_worst_interview_question/laurenz-kleinheider-OsC8HauR0e0-unsplash.jpg" alt="" /&gt;&lt;br /&gt;
&lt;sup&gt;Photo by Laurence Kleinheider, Free to use under the Unsplash License&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;What it tells me as a candidate is you didn't do your research. You at best glanced at my résumé, and now you want me to summarize a document I've already spent hours over years honing. But it's worse than that. Because if I start telling you about my job experience, I'm &lt;em&gt;assuming&lt;/em&gt; that's what you want to know. I'm not even telling you what's important to me (even though you might think otherwise). I'm telling you what I'm &lt;em&gt;guessing&lt;/em&gt; is important to you.&lt;/p&gt;
&lt;p&gt;Don't play games. Don't be lazy. Prepare for the interview.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Most companies' first interview is a screening. So, what's the barrier to being considered for stage two? Ask those questions. &amp;quot;Our software improves animal research efficiency. Do you have ethical concerns about animal testing?&amp;quot;&lt;/li&gt;
&lt;li&gt;Tell the candidate more about the specific role, or about the company. Provide context for the questions you're going to ask. &amp;quot;We're invested in pair programming. Not everyone likes that, which we understand. What do you think about pair programming?&amp;quot;&lt;/li&gt;
&lt;li&gt;Ask questions based on their résumé. &amp;quot;I see you did some finance work, which is also part of our business. What did you specifically do on that team?&amp;quot;&lt;/li&gt;
&lt;li&gt;Certainly ask open-ended questions, but still keep them relevant. &amp;quot;What do you enjoy doing outside of the job?&amp;quot; matters if the company or team cares about home-job balance.&lt;/li&gt;
&lt;li&gt;Have a conversation. This is harder than &amp;quot;First we ask you questions for 25 minutes. Then you get 5 minutes to ask us questions.&amp;quot; But, look, it's an interview, not an interrogation. Assume the interviewing goes both ways. In fact, &lt;em&gt;invite&lt;/em&gt; that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;quot;Tell me about yourself&amp;quot; isn't friendly or useful. It makes the candidate uncomfortable, trying to please, and off-balances them out of the gate. Or, they practice a standard, formal answer that only tells you they can memorize a pitch.&lt;/p&gt;
&lt;p&gt;Your interviews reflect your company's values. Want better matching employees? Ask thoughtful questions that matter.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_worst_interview_question/cody-engel-E8jI4iSq0tQ-unsplash.jpg" alt="" /&gt;&lt;br /&gt;
&lt;sup&gt;Photo by Cody Engel, Free to use under the Unsplash License&lt;/sup&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 30 Jun 2022 17:43:05 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_worst_interview_question</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_worst_interview_question</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 2 - (The Problem With) Basic Unit Testing</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="net-mauis-testing-problem"&gt;.NET MAUI's testing problem&lt;/h2&gt;
&lt;p&gt;At the time of this writing, .NET MAUI apps don't support unit testing. At least, not in any way I could find. And I tried, I really tried, to fool .NET by playing with target frameworks and conditionally including a Program Main method, and other goofy stuff, but to no avail.&lt;/p&gt;
&lt;p&gt;So, that's the bad news, a real bummer, and in my opinion a terrible oversight on the .NET MAUI team's part. There's no talk of unit testing, no guidance, no explanation.&lt;/p&gt;
&lt;p&gt;Here's the good news: you can unit test .NET MAUI class libraries. Examples can be found at the &lt;a href="https://github.com/CommunityToolkit/Maui/tree/main/src/CommunityToolkit.Maui.UnitTests"&gt;Community Toolkit repository&lt;/a&gt; (thank you, open source!).&lt;/p&gt;
&lt;p&gt;This means we need to separate anything we want to unit test into a library. That's not ideal, especially for smaller projects, but we'll make do. I have confidence Microsoft is working on a better way.&lt;/p&gt;
&lt;h2 id="add-the-viewmodels-library"&gt;Add the ViewModels library&lt;/h2&gt;
&lt;p&gt;To keep things organized, let's add a ViewModels library. Later, we'll add a Models library.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You could also have a single library for testable code, broken into namespaces. I would do that here, but, frankly, I wasn't sure what to name it! Plus, separate libraries reenforces our separation of concerns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Solution &amp;gt; Add &amp;gt; New Project &amp;gt; .NET MAUI Class Library named &amp;quot;Maui.Progression.ViewModels&amp;quot;.&lt;/li&gt;
&lt;li&gt;Install the Microsoft.Toolkit.Mvvm package, and uninstall that package from the app project.&lt;/li&gt;
&lt;li&gt;Delete the &lt;code&gt;Class1.cs&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Copy or move the &lt;code&gt;Counter.cs&lt;/code&gt; file to the root of the ViewModels library.&lt;/li&gt;
&lt;li&gt;In the app project, delete the ViewModels folder.&lt;/li&gt;
&lt;li&gt;In the app project, add the ViewModels project as a project reference.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;MainPage.xaml&lt;/code&gt; viewmodels namespace.
&lt;pre&gt;&lt;code class="language-xml"&gt;xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;At this point you may need to do a Solution Clean and Rebuild, or even close Visual Studio, delete the bin/obj folders, and restart then build.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, I got this warning:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Warning	WMC1006	Cannot resolve Assembly or Windows Metadata file 'C:\Users\charl\source\repos\dotnet-maui-progression\src\Maui.Progression.02\Maui.Progression.ViewModels\bin\Debug\net6.0-windows10.0.19041.0\Maui.Progression.ViewModels.dll'	Maui.Progression	C:\Users\charl\source\repos\dotnet-maui-progression\src\Maui.Progression.02\Maui.Progression\Maui.Progression.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Running the app should behave as before.&lt;/p&gt;
&lt;h2 id="add-the-testing-project"&gt;Add the testing project&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;My preferred unit testing stack is &lt;a href="https://xunit.net/"&gt;xUnit&lt;/a&gt;, &lt;a href="https://fluentassertions.com/"&gt;FluentAssertions&lt;/a&gt;, and &lt;a href="https://nsubstitute.github.io/"&gt;NSubstitute&lt;/a&gt;. I'm keeping this tutorial simple by using vanilla xUnit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Solution &amp;gt; Add &amp;gt; New Project &amp;gt; xUnit Test Project named &amp;quot;Maui.Progression.UnitTests&amp;quot;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Maui.Progression.ViewModels&lt;/code&gt; as a project reference.&lt;/li&gt;
&lt;li&gt;Rename &lt;code&gt;UnitTest1.cs&lt;/code&gt; to &lt;code&gt;Counter_Should.cs&lt;/code&gt;
&lt;blockquote&gt;
&lt;p&gt;This is just my preferred naming convention.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;Counter_Should.cs&lt;/code&gt; with this code.
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.ViewModels;

namespace Maui.Progression.UnitTests;

public class Counter_Should
{
    [Fact]
    public void Increment_counter_by_one_using_command()
    {
        // arrange
        int expected = 1;
        var vm = new Counter();

        // verify the starting count
        Assert.True(vm.Count == 0, &amp;quot;Starting count should have been zero.&amp;quot;);

        // act
        vm.IncreaseCounterCommand.Execute(null);

        // assert
        Assert.Equal(expected, vm.Count);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Run the test, which should pass.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing/2022-06-23-12-46-27.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;As a final check, rerun the app.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We've separated out our View Model into a testable library, and written a simple passing test. We haven't written any kind of UI test, but that's OK for now. In a future part, I hope to try out the &lt;a href="https://appcenter.ms/"&gt;Visual Studio App Center&lt;/a&gt;, which appears purpose-built for multi-platform UI testing.&lt;/p&gt;
&lt;p&gt;Next up: adding a Model!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description/"&gt;Unit Testing Is Part Of A Developer's Job Description | Software Meadows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Tue, 28 Jun 2022 13:15:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 1 - Adding the View Model</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-problem.net-maui-solves"&gt;The Problem .NET MAUI Solves&lt;/h2&gt;
&lt;p&gt;Cross-platform development is hard, usually requiring maintaining a project per platform. Any feature must be added to each code base. .NET MAUI uses a single project with the majority of the UI code using XAML, and the business code in C#. This code is then transpiled to the native platforms. The result is less maintenance, fewer errors, and reduced knowledge needed to build cross-platform applications.&lt;/p&gt;
&lt;h2 id="brief-getting-started-the-default-app"&gt;(Brief) Getting Started: The Default App&lt;/h2&gt;
&lt;p&gt;These instructions assume running in Windows 10/11. You can follow the instructions below, which are brief and aren't intended as a beginner's guide. Or, better yet, use &lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/get-started/first-app?pivots=devices-android"&gt;Microsoft's official documents&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="the-project"&gt;The Project&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install and open Visual Studio 2022 Preview&lt;/li&gt;
&lt;li&gt;Create a new project
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-07-55-35.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Filter for C# MAUI, or search for &amp;quot;.NET MAUI App&amp;quot;
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-07-58-25.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Create a .NET MAUI App using the defaults. Change the name to match mine if you want.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-android-emulator"&gt;The Android Emulator&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
You'll need to &lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/android/emulator/hardware-acceleration"&gt;enable either Hyper-V or HAXM&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br /&gt;
I had trouble with Hyper-V the first time I tried .NET MAUI on my laptop even though it's supported, and had to use HAXM for a while. The problem went away when I did a clean install of Windows 11. Presumably, that would have been true in Windows 10.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Choose Debug Target &amp;gt; Android Emulator
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-08-07-30.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Click to start the emulator. The Android Device Manager starts. Answer Yes to allow changes.&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;can&lt;/em&gt; accept the default Pixel 5 Android 12.0 (Level 31). However, I recommend canceling at this point and manually creating a Pixel 5 Android 12.1 (Level 32) or later. There are some behavior differences worth seeing, specifically in how the splash screen is treated.
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-08-15-46.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-08-16-17.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;You don't need to explicitly start the emulator. Running the app will do that. So . . .&lt;/li&gt;
&lt;li&gt;Run the app!&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-08-17-43.png" alt="" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This should start the emulator, then install and run the default app. On my machine, this takes a couple of minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-08-22-10.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Clicking the button increases a counter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;br /&gt;
As of 2022-06-20, using Android 12.1 as configured above, clicking the button doesn't display the number of clicks. I'm not sure what in the style sheets is preventing this, but you can work around it this way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Resources &amp;gt; Styles &amp;gt; Styles.xslt&lt;/li&gt;
&lt;li&gt;Add &amp;quot;MinimumWidthRequest&amp;quot;. This forces a wide button.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;Button&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;MinimumWidthRequest&amp;quot; Value=&amp;quot;200&amp;quot; /&amp;gt;
    &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;{AppThemeBinding Light={StaticResource White}, Dark={StaticResource Primary}}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id="mvvm-basics"&gt;MVVM Basics&lt;/h2&gt;
&lt;p&gt;Great, we have a working app! And the .NET MAUI team have included lots of boilerplate to understand. But one thing not included is implementing the &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"&gt;Model-View-ViewModel &amp;quot;MVVM&amp;quot;&lt;/a&gt; pattern.&lt;/p&gt;
&lt;p&gt;We need to separate our code to improve maintenance and testing (more on testing in a later post!). One pattern for doing this is MVVM. Similar to Model-View-Controller (MVC), MVVM says,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Model contains our raw domain information and business behaviors, which may come from various data sources. (See &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design"&gt;Domain-Driven Design&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;The View Model typically retrieves the Model via a service. The View Model then prepares the information for display.&lt;/li&gt;
&lt;li&gt;The View displays whatever's in the View Model.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;em&gt;separation of concerns&lt;/em&gt; here is that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The View doesn't know how the View Model gets its information.&lt;/li&gt;
&lt;li&gt;The View Model doesn't know how the Model gets its information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This allows us to make changes to the View, View Model, and Model mostly independently. We strive for &lt;em&gt;loose coupling&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An important aspect of MVVM is how to bind the View to the View Model. The user interacts with the View, for example clicking a button to increment a counter. This updates the data stored in the View Model (and possibly gets passed to the Model).&lt;/p&gt;
&lt;p&gt;However, we can also update the values programmatically directly in the View Model, and we want those values to display in the View. This is two-way binding.&lt;/p&gt;
&lt;h2 id="creating-the-view-model"&gt;Creating the View Model&lt;/h2&gt;
&lt;p&gt;Right now, when we click the app's button it runs code in the &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; class. If this looks familiar to some of you&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, it's because it's the same code-behind approach used in ASP.NET WebForms.&lt;/p&gt;
&lt;p&gt;It works, but is too tightly coupled. Let's pull that simple functionality into a View Model.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the NuGet package &lt;code&gt;Microsoft.Toolkit.Mvvm&lt;/code&gt;.
&lt;blockquote&gt;
&lt;p&gt;This is the same package as &lt;code&gt;CommunityToolkit.Mvvm&lt;/code&gt;. Only the namespace differs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Add a folder named &lt;code&gt;ViewModels&lt;/code&gt;, and a file named &lt;code&gt;Counter.cs&lt;/code&gt;.
&lt;blockquote&gt;
&lt;p&gt;Some developers append their view models with &amp;quot;VM&amp;quot; or &amp;quot;ViewModel&amp;quot;. That's fine, but I don't, 'cause that's what namespaces are for!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Add the following code
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.Toolkit.Mvvm.ComponentModel;
using Microsoft.Toolkit.Mvvm.Input;

namespace Maui.Progression.ViewModels;

public partial class Counter : ObservableObject
{
    [ObservableProperty]
    [AlsoNotifyChangeFor(nameof(CountText))]
    int count;

    public string CountText
    {
        get
        {
            string text = &amp;quot;Click me&amp;quot;;
            if (count &amp;gt; 0)
            {
                text = $&amp;quot;Clicked {count} &amp;quot; + (count == 1 ? &amp;quot;time&amp;quot; : &amp;quot;times&amp;quot;);
            }            
            SemanticScreenReader.Announce(text);
            return text;
        }
    }

    [ICommand]
    void IncreaseCounter()
    {
        Count++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;Microsoft.Toolkit.Mvvm&lt;/code&gt; package includes code generators to create all of the two-way binding code using the attributes. Here we've&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created an observable property named &lt;code&gt;Count&lt;/code&gt; (the generator capitalizes the property name for us based on the backing field)&lt;/li&gt;
&lt;li&gt;Created a read-only property named CountText. This is what we'll display.&lt;/li&gt;
&lt;li&gt;Told the framework &amp;quot;when you notify of a change in Count, also notify there was a change in CountText.&amp;quot;&lt;/li&gt;
&lt;li&gt;Created a bindable command named IncreaseCounter to do the work.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must be a partial class&lt;/li&gt;
&lt;li&gt;Must inherit from ObservableObject&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Count&lt;/code&gt; property must be incremented, not the backing field.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's modify the MainPage view. Change the declarations.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression._01.MainPage&amp;quot;
             xmlns:ViewModels=&amp;quot;clr-namespace:Maui.Progression._01.ViewModels&amp;quot;
             x:DataType=&amp;quot;ViewModels:Counter&amp;quot;
             &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code allows Intellisense to work. It doesn't &lt;em&gt;perform&lt;/em&gt; the binding. That's done in the code-behind as shown later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adds the ViewModels namespace&lt;/li&gt;
&lt;li&gt;Declares the view is of type Counter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Change the button code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;            &amp;lt;Button
                Text=&amp;quot;{Binding CountText}&amp;quot;
                SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
                Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot;
                HorizontalOptions=&amp;quot;Center&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Binds the button text to our CountText property&lt;/li&gt;
&lt;li&gt;Binds the button click to the IncreaseCounter command.
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; The toolkit code generator automatically appends &amp;quot;Command&amp;quot; to methods decorated with &lt;code&gt;ICommand&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, in the &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; code-behind, replace with this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression._01.ViewModels;

namespace Maui.Progression._01;

public partial class MainPage : ContentPage
{
	public MainPage()
	{
		InitializeComponent();
		BindingContext = new Counter();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what &lt;em&gt;actually&lt;/em&gt; binds the View to the View Model.&lt;/p&gt;
&lt;p&gt;Running the code should behave as before.&lt;/p&gt;
&lt;h2 id="tricks"&gt;Tricks&lt;/h2&gt;
&lt;p&gt;Building for multiple platforms takes awhile. If you're willing to develop mostly for Windows, and check progress on Android/iOS/Mac occasionally, you can comment out the mobile targets.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;!--&amp;lt;TargetFrameworks&amp;gt;net6.0-android;net6.0-ios;net6.0-maccatalyst&amp;lt;/TargetFrameworks&amp;gt;--&amp;gt;
    &amp;lt;TargetFrameworks Condition=&amp;quot;$([MSBuild]::IsOSPlatform('windows'))&amp;quot;&amp;gt;$(TargetFrameworks);net6.0-windows10.0.19041.0&amp;lt;/TargetFrameworks&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If you get a message &amp;quot;The namespace already contains a definition for 'Counter',&amp;quot; double check you defined Counter as a partial class. You may then have to close Visual Studio, delete the project's bin and obj folders, restart Visual Studio, and build the project.&lt;/p&gt;
&lt;p&gt;Sometimes I've seen the MVVM Toolkit generators/code get &amp;quot;stuck,&amp;quot; probably due to some files being cached. Even if I comment out most of the class code, the error doesn't go away until I restart Visual Studio.&lt;/p&gt;
&lt;p&gt;In some cases, I've cleaned up the VS generated documents. (But I don't know if this matters.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open %LocalAppData%\Temp\VSGeneratedDocuments&lt;/li&gt;
&lt;li&gt;Delete all the folders&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AND, if you're told you can't delete files because they're locked!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
This is probably the most useful troubleshooting step I've found. When you close Visual Studio, it does &lt;em&gt;not&lt;/em&gt; close &lt;code&gt;adb.exe&lt;/code&gt;, which is used by the Android emulator. I'm betting this will be corrected in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Close Visual Studio&lt;/li&gt;
&lt;li&gt;Close any open Android Emulator and the Android Device Manager&lt;/li&gt;
&lt;li&gt;Open Task Manager (Ctrl+Shift+Esc)&lt;/li&gt;
&lt;li&gt;Open the Details tab&lt;/li&gt;
&lt;li&gt;End the adb.exe process&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/2022-06-20-12-29-33.png" alt="" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AND IF THAT DOESN'T WORK!!!&lt;/p&gt;
&lt;p&gt;Restart and try clearing those files again. And delete the project's obj/bin again. Sheesh!&lt;/p&gt;
&lt;p&gt;If you get this error&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Argument 1: cannot convert from 'System.ComponentModel.PropertyChangedEventArgs' to 'int'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;double check your View Model class is inheriting from ObservableObject, &lt;em&gt;not&lt;/em&gt; BindableObject.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We've actually done quite a bit here to implement the MVVM pattern.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Created a View Model with bindable properties and commands&lt;/li&gt;
&lt;li&gt;Updated the View to use the View Model&lt;/li&gt;
&lt;li&gt;Bound the two together&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next up: &lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;unit testing&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/domain-driven_design_-_opinionated_layers_graphic/"&gt;Domain-Driven Design - An Opinionated Layers Graphic | Software Meadows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The ancient ones&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 28 Jun 2022 13:00:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model</guid>
    </item>
    <item>
      <title>How to Hide Markdown Breadcrumbs in VS Code</title>
      <description>&lt;p&gt;Here's a quick one. If you're using &lt;a href="https://code.visualstudio.com/docs/introvideos/basics"&gt;Visual Studio Code&lt;/a&gt; as your Markdown editor and work with larger documents, such as a daily journal, VS Code's default behavior of showing breadcrumbs might be a performance drag.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/how_to_hide_markdown_breadcrumbs_in_vs_code/2022-04-06-15-59-57.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;To turn off header-level breadcrumbs when working with &lt;strong&gt;just&lt;/strong&gt; Markdown files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;View &amp;gt; Command Palette &amp;gt;  the JSON User settings &amp;gt; Preferences: Open Settings (JSON)&lt;/li&gt;
&lt;li&gt;Add this setting
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;[markdown]&amp;quot;: {
    &amp;quot;breadcrumbs.showStrings&amp;quot;: false
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/how_to_hide_markdown_breadcrumbs_in_vs_code/2022-04-06-16-00-39.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;If you want to disable breadcrumbs for all languages, use this setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;breadcrumbs.enabled&amp;quot;: false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy writing!&lt;/p&gt;
</description>
      <pubDate>Wed, 6 Apr 2022 15:52:05 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/how_to_hide_markdown_breadcrumbs_in_vs_code</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/how_to_hide_markdown_breadcrumbs_in_vs_code</guid>
    </item>
    <item>
      <title>Home-Job Balance: How I "End" My Job Day</title>
      <description>&lt;h2 id="previously-on-home-job-balance"&gt;Previously on &lt;em&gt;Home-Job Balance&lt;/em&gt; . . .&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="https://www.softwaremeadows.com/posts/home-job-balance/"&gt;previous post&lt;/a&gt;, I submitted that a big step toward improving work/life balance is to replace that phrase with &amp;quot;home-job balance.&amp;quot; Doing so corrects several problems with the current phrase, and brings our attention where it often belongs: &lt;strong&gt;home&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I'm going to answer the questions I asked in that post and give some tips on how I &amp;quot;close up shop&amp;quot; for the day, which I can do &lt;em&gt;at any time&lt;/em&gt; during the day.&lt;/p&gt;
&lt;h2 id="when-am-i-at-home-vs-at-the-job"&gt;When am I at home vs at the job?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Job&lt;/strong&gt;&lt;br /&gt;
It's startlingly easier for me to identify when and where I'm on the job than at home.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When I'm performing tasks specifically for my company or my company's client (I work for a &lt;a href="https://clearmeasure.com/"&gt;consulting company&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;When I'm reading company and client messages (Slack, email).&lt;/li&gt;
&lt;li&gt;When I'm getting company/client notifications (meetings, messages, tasks).&lt;/li&gt;
&lt;li&gt;At my computer with certain folders and applications open, such as client code repositories, Visual Studio, Azure DevOps.&lt;/li&gt;
&lt;li&gt;Reading subject articles to complete my tasks.&lt;/li&gt;
&lt;li&gt;Reading general articles/books for my career. This includes reading blog posts like the one I'm writing!&lt;/li&gt;
&lt;li&gt;I feel on the job if I'm talking about my job to family and friends with my attention on solving job problems, not just describing what I do.&lt;/li&gt;
&lt;li&gt;Likewise, I'm on the job if I'm &lt;em&gt;dwelling&lt;/em&gt; on my job when I don't have to be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Home&lt;/strong&gt;&lt;br /&gt;
It'd be a mistake to decide I feel at home when I'm not doing my job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Being home can't be &amp;quot;the absense of job.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some ways I feel at home.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working on house projects, especially when they're nice to do instead of &amp;quot;must do.&amp;quot; I had to clean the garage door rails because the door kept (and, sigh, keeps) sticking. I crafted and installed a little shelf across the kitchen window for my wife's herbs. I felt at home with both, and enjoyed the second more.&lt;/li&gt;
&lt;li&gt;Being in the living room with my wife and dog. It often doesn't matter what I'm doing. They're close and they matter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above involve being physically at home. But home doesn't have to be a place. A house isn't always a home. Some other ways I feel at home are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading a book. The less it's related to my career, the more at home I feel. Fiction brings me home because I grew up entering the worlds of imagination.&lt;/li&gt;
&lt;li&gt;Watching TV or movies. Like books, these take me out of my job and into other lives. Note that I do these on my computer.&lt;/li&gt;
&lt;li&gt;Walking my neighborhood. I'm lucky to live somewhere I enjoy.&lt;/li&gt;
&lt;li&gt;Exercising, especially either being instructed or leading a class.&lt;/li&gt;
&lt;li&gt;Having earnest and playful conversations with family and friends.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="keeping-my-job-separate-when-it-uses-the-same-place-and-tools"&gt;Keeping my job separate when it uses the same place and tools&lt;/h2&gt;
&lt;p&gt;I do my job in my home office at my laptop. I also do home stuff in my home office on the same laptop. It's not productive for me to maintain two different laptops. Here's what I do to cue myself &amp;quot;this is the job, Dude.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Different browsers and/or profiles&lt;/strong&gt;&lt;br /&gt;
I use Brave for my home browsing and Edge for my work browsing.&lt;/p&gt;
&lt;p&gt;In Edge, I have two job profiles: my company and my client. To make switching between those two easier, I loaded my company profile and pinned that instance to my Windows task bar. Then I loaded my client profile and pinned that instance.&lt;/p&gt;
&lt;p&gt;The result is it's faster and easier for me to open Edge with the needed bookmarks and security context in place.&lt;/p&gt;
&lt;p&gt;Notice I put Home first?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/home-job_balance__how_i__end__my_job_day/2022-01-22-07-18-21.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clearly separate job folders&lt;/strong&gt;&lt;br /&gt;
I have a high-level job folder, and no personal projects go in that. Recently, I made another change I love. I have separate high-level Git repository folders for my job and personal projects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\source &amp;lt;= ONLY client repos
|_project 1
|_project 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\users\charl\source\repos &amp;lt;= ONLY personal repos
|_project 1
|_project 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;UPDATE 20220126: Reader Avesh Jain sent me the following nice suggestion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One tip I'd like to mention is using virtual desktops. I keep a virtual desktop for personal apps and browsers, and one for each client/project. I pin common applications so they appear on all virtual desktops (e.g., OneNote).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="leaving-the-job-for-the-day"&gt;Leaving the job for the day&lt;/h2&gt;
&lt;p&gt;I have a loose ritual I can do at any time to signal to myself &amp;quot;I'm done with my job for the day&amp;quot; or &amp;quot;done for now.&amp;quot;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close job-specific browsers&lt;/strong&gt;&lt;br /&gt;
I close my job Edge browsers. But what if I have a couple dozen browser tabs open for a job project? I use a cool extension like &lt;a href="https://qlearly.com/"&gt;Qlearly&lt;/a&gt; to save them all, and can reopen when I'm on the job again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close job-specific apps&lt;/strong&gt;&lt;br /&gt;
Some apps I only use for my job, for example Slack. Slack &amp;quot;closes&amp;quot; to the notification area. I right-click that icon and Quit the app. Bam, Slack, you no longer control me!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close File Explorer showing job folders&lt;/strong&gt;&lt;br /&gt;
Not minimize. Close. I add friction to looking at my job's work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Confession: I actually use the terrific &lt;a href="http://www.freecommander.com/"&gt;FreeCommander XE&lt;/a&gt; paid version to manage my files. My job folder tabs are in the left pane. I close those tabs, or close the app, or at least minimize it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close any windows showing job-related documents&lt;/strong&gt;&lt;br /&gt;
For me, this can be: Visual Studio, VS Code, Word, Excel, Balsamiq, LINQPad . . . you get the point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I &lt;em&gt;know&lt;/em&gt;. In your mind you're thinking, &amp;quot;But I just need to open them all again and pick up where I left off. It's so much &lt;em&gt;easier&lt;/em&gt; to leave them open.&amp;quot;&lt;/p&gt;
&lt;p&gt;That's true. It's easier. That's the point. You're making it &lt;strong&gt;easy to stay on the job&lt;/strong&gt;. Instead, make it easy to be at home.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Say, &amp;quot;I'm going home&amp;quot;&lt;/strong&gt;&lt;br /&gt;
This sounds silly. It isn't, and it takes one second. Try it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close my laptop lid&lt;/strong&gt;&lt;br /&gt;
If I've had a really tough day.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Walk away from my computer&lt;/strong&gt;&lt;br /&gt;
I was surprised how much difference it makes to physically go to another room where my computer isn't. I'll go back to it later &lt;em&gt;on my own terms&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do something that makes me feel at home&lt;/strong&gt;&lt;br /&gt;
You know, from that list I made.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe I'll open my computer again fifteen minutes later to shop for new bed sheets. Fine. &lt;em&gt;I've given myself the end-of-job cue and a break I deserve right now.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="final-thoughts-notifications"&gt;Final Thoughts: Notifications&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What and who are you putting first all the time? Have you made yourself &amp;quot;always available&amp;quot;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By default, lots of computer and phone apps have their notification turned on. Schedule yourself some self-care time to learn your app settings, have a heart-to-heart with yourself, and turn off whatever you can.&lt;/p&gt;
&lt;p&gt;For example: Slack/Teams/Discord users, ask yourself, &amp;quot;Which channels are &lt;em&gt;urgent&lt;/em&gt;, if any?&amp;quot; I hope for you the initial answer isn't &amp;quot;all of them&amp;quot;! I set up Slack so I only get notified on a couple of channels and if I get a direct mention. When I quit Slack on my computer, I know I'll still get emergency notifications on my phone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you're on the job, put it first. &lt;strong&gt;When you're at home, put it first.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Sat, 22 Jan 2022 07:00:46 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/home-job_balance__how_i__end__my_job_day</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/home-job_balance__how_i__end__my_job_day</guid>
    </item>
  </channel>
</rss>