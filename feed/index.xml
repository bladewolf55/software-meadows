<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Scrum in Azure DevOps - A simpler (custom) process</title>
      <description>&lt;p&gt;The default Azure DevOps Scrum process is good, but I think it adds some unnecessary complication. Below I'll walk through inheriting from and modifying that process. I'm building on the work in my  post &lt;a href="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/"&gt;A Simple Intro to Scrum in Azure DevOps&lt;/a&gt;, so you should start there if you need to.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lots of what's below is my opinion, so take it for what it's worth. But don't discount it, that's mean.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="a-new-process"&gt;A New Process&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open Azure DevOps and open the Organization Settings &amp;gt; Boards &amp;gt; Process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Scrum &amp;gt; Create inherited process, and name it SimpleScrum
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc01.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc02.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the SimpleScrum process. Under Work item types, we already have an essential set of types. Let's start by creating a work item type named Story instead of Product Backlog Item (PBI).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No, you can't rename an inherited process work item type. I hate this, and so do you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the PBI work item type &amp;gt; States, and hide the Committed state.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc05.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the original tab, choose New work item type and name it Story&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc03.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Layout, add and update the fields to look like this. In one case, you're renaming Description to Value (orange), in others you're using an existing field (green), and in still others it's a new field (red).&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc04.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under States, add a new state named Active in the In Progress category, and remove Committed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can only remove an inherited state that's been hidden.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc18.png" alt="" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Rules, create the following rule.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: Assign Active&lt;/li&gt;
&lt;li&gt;When: A work item stage changes to . . . Active&lt;/li&gt;
&lt;li&gt;Then: Use the current user to set the value of . . . Assigned To&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc19.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return to the Work Item Types and disable Product Backlog Item&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Only disable PBI if you are &lt;em&gt;not&lt;/em&gt; going to apply the new process to an existing project. If you are, leave PBI enabled so that you can change existing work items from PBI to Story.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Bug and make these changes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide System Info, Acceptance Criteria, Priority, and Activity.&lt;/li&gt;
&lt;li&gt;Optional: I hide the Build fields&lt;/li&gt;
&lt;li&gt;Add More Info, Developer Notes, Testing Notes, Reported By, and Blocked
&lt;blockquote&gt;
&lt;p&gt;Any fields added to Story will be in the &amp;quot;Use existing field&amp;quot; dropdown.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc06.png" alt="" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Treat Bugs as a defects reported by production users. Why? Because it makes it much easier to track Bug fix cycle time. See below for tracking defects during development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under States, add Active to In Progress, hide Approved and Committed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Rules, create the same Assign Active rule as in Story&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pre-release-vs-post-release-defectsbugs"&gt;Pre-Release vs Post-Release Defects/Bugs&lt;/h2&gt;
&lt;p&gt;If your shop includes quality assurance, user-acceptance testing, or other non-unit testing, you should track your defects separately from Bugs. If those roles are in your team, then I like communicating those defects at the same level as Tasks. If they're outside the team, then I recommend tracking them at the same level as Bugs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new work item type named PreRelease Defect with the same fields, states, and rule as Bug. Hide Description. Choose an icon you like.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc07.png" alt="" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, the work items are ready!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc08.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="backlog-levels"&gt;Backlog Levels&lt;/h2&gt;
&lt;p&gt;These changes make your new work item type availabe in the New item dropdowns on boards and backlogs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open SimpleSrum &amp;gt; Backlog levels&lt;/li&gt;
&lt;li&gt;Edit Backlog items and add Story and PreRelease Defect. Set Default work item type to Story&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc15.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="use-the-process"&gt;Use the Process&lt;/h2&gt;
&lt;p&gt;You can create a new Project using the SimpleScrum process, but you can also apply the process to an existing project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;br /&gt;
Applying a process does come with risks if there are non-matching fields. Be sure you read the documentation!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm going to apply the process to Baskets-R-Us (from Part 1 of the series) so you see what's involved and why starting with a new projec might be better.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open All Process and click the Scurm Team Projects link&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc09.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;For BRUW, select Change Process and choose SimpleScrum&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc10.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc11.png" alt="" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix-up-the-work-items"&gt;Fix up the work items&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the BRUW project &amp;gt; Queries &amp;gt; New Query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return all work items&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc14.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Column Options and add State and Reason. Sort by Work Item Type and State&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select all Product Backlog Items, right-click &amp;gt; Change Type, select Story.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Commmitted items, right-click &amp;gt; Edit, change State to Active&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Approved items, right-click &amp;gt; Edit, change State to New&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save items&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may have other changes to make to your work items.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix-up-the-story-board"&gt;Fix up the Story Board&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Story Board customizations are at the Team level&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Open the BRUW project &amp;gt; Boards. I was greeted with this message:
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc12.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Fine, I'll Correct this now. It's the board's column settings that need changing, which is what I want to do anyway!&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc13.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You can't delete any columns that have stories in them until you move the stories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Keep all existing columns. Rename Ready for QA to Ready for Test, QA to Test. Map each column's state to Active for now. Save.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc16.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Clear all filters. Move stories out of Approved, Ready for Dev and Ready for Release&lt;/li&gt;
&lt;li&gt;Remove columns Approved,  Ready for Dev and Ready for Release.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open the board's Settings &amp;gt; Styles, add a styling rule
&lt;ul&gt;
&lt;li&gt;Name: Blocked&lt;/li&gt;
&lt;li&gt;Card color: Red&lt;/li&gt;
&lt;li&gt;Rule criteria: Blocked = Yes&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc20.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If a Story's Blocked field is set to Yes, the card will show red.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc17.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="fix-up-the-task-board"&gt;Fix up the Task Board&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Task Board customizations are at the Team level&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Open the Task Board (Sprints) Settings&lt;/li&gt;
&lt;li&gt;In Fields &amp;gt; Story, add a field to always show Parent. This lets you see a story's Feature if it has one.&lt;/li&gt;
&lt;li&gt;Add a Styles rule for Blocked as done above&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-about-work-item-templates"&gt;What about work item templates?&lt;/h2&gt;
&lt;p&gt;Azure DevOps supports templates, and I wish they were useful. Maybe they will be for you, but what I want is to assign a default template to a work item for my team. For example, have a Bug template with starter info in Repro Steps that's automatically applied on any new Bug.&lt;/p&gt;
&lt;p&gt;Until that happens, I'll leave you with Microsoft's documentation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/backlogs/work-item-template?view=azure-devops&amp;amp;tabs=browser"&gt;Use work item templates to update stories &amp;amp; more - Azure Boards | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;This post sets up a good, basic process. In the next post, we'll put it to work.&lt;/p&gt;
</description>
      <pubDate>Mon, 17 May 2021 16:00:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process</guid>
    </item>
    <item>
      <title>Git commit/checkout is a snapshot, not a delta</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ERROR!&lt;/strong&gt;&lt;br /&gt;
What I say below about how Git commits work, and the recommended pre-PR flow, is correct. However, what I say about pull requests is &lt;em&gt;not&lt;/em&gt; correct. In the example below, Sabrina's PR would end up with Jasmine's change because a PR merges into master.&lt;/p&gt;
&lt;p&gt;My own confusion came from a client situation where a branch was deployed to production, instead of being merged into master first. I didn't spot that detail right away in the pipeline's history.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For many of us with past source control experience (Subversion, Team Foundation Version Control, Visual Source Safe), there's a subtlety to a Git commit that can trip us up when it comes to build/deployment pipelines. We mistakenly think the pipeline will &amp;quot;get latest.&amp;quot;&lt;/p&gt;
&lt;p&gt;A Git commit is a snapshot of the entire source tree of the developer's workspace. It's &lt;em&gt;not&lt;/em&gt; a record of only that commit's changes. This is why it's critical, before submitting a branch pull request or a commit to mainline (depending on your workflow) that you pull the remote repository's latest code into your local repository.&lt;/p&gt;
&lt;p&gt;Imagine two developers, Jasmine and Sabrina. They're going to work on a repo with two files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|_princess.txt
|_witch.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At 1pm, they both clone the remote, so both their local repositories exactly match. I'm showing the SHA hashes below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa111  &amp;lt;== this is the commit number
|_princess.txt  bbbb111
|_witch.txt     cccc111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's be really clear. Git doesn't know about the files. It knows about the hashes it uses to name its copies of the files. So Git's commit tree is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aaaa111
|_bbbb111
|_cccc111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They each create a separate branch. At 1:30pm, Jasmine changes her file, commits, and creates a pull request. Her commit tree is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa222
|_princess.txt  bbbb222
|_witch.txt     cccc111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the PR is approved and commit aaaa222 is deployed, &lt;em&gt;those files&lt;/em&gt; are deployed.&lt;/p&gt;
&lt;p&gt;At 2:00pm, Sabrina changes her file, commits, and creates a PR. Her commit tree is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa333
|_princess.txt  bbbb111
|_witch.txt     cccc222
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the important part: &lt;strong&gt;Sabrina didn't pull from the remote, so her commit tree doesn't include Jasmine's changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the PR is approved and commit aaaa333 is deployed, Git does &lt;em&gt;not&lt;/em&gt; get the latest princess.txt nor should it. Git checks out the named commit tree, and that commit has the earlier princess.txt.&lt;/p&gt;
&lt;p&gt;What Sabrina needed to do before the PR is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout main
git pull --rebase
git checkout myfeature
git rebase main
git push
# OR git push --force &amp;lt;== if the branch was previously pushed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If she does this, her commit tree for the PR will be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa444
|_princess.txt  bbbb222
|_witch.txt     cccc222
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the PR will deploy the latest files because that's what's in commit aaaa444.&lt;/p&gt;
</description>
      <pubDate>Fri, 14 May 2021 16:03:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/git_commit_checkout_is_a_snapshot__not_a_delta</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/git_commit_checkout_is_a_snapshot__not_a_delta</guid>
    </item>
    <item>
      <title>What do you mean by automated tests and continuous integration?</title>
      <description>&lt;p&gt;I had a client ask me this posts's title question recently. It's a good one. In this case, the person asking develops internal Python software, but that's not his primary job so he wasn't familiar with the deep world of enterprise-level development.&lt;/p&gt;
&lt;p&gt;How do we explain this to a newcomer? Here's my answer, rooted in Azure DevOps. Perfect? No. Useful? I hope so!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Automated Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Any tests that don't require human interaction. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests (testing discrete code elements such as a single function)&lt;/li&gt;
&lt;li&gt;Integration tests (testing that modules all communicate with each other, external sites, back-end databases, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automated testing is essential, not optional. When practiced well, developers routinely have more test code than app code. Unit testing improves architecture by encouraging loose coupling. It also dramatically improves confidence when making changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Integration and Continuous Deployment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Typically, when there's team development, the &amp;quot;main&amp;quot; version of the source code is kept on a remote server. In our case, that's the Azure DevOps Git repositories.&lt;/p&gt;
&lt;p&gt;That main branch is what's been deployed to production users, and must &lt;em&gt;always&lt;/em&gt; be working. So, how do we ensure that our changes don't break the main branch? That is, how do we safely &lt;em&gt;integrate&lt;/em&gt; our code to what's already there?&lt;/p&gt;
&lt;p&gt;The two parts to the answer are branching and building.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Develop new features in a short-lived branch (short-lived branches exist no more than a day or two)&lt;/li&gt;
&lt;li&gt;Pull the main branch code to your local workspace&lt;/li&gt;
&lt;li&gt;Rebase your feature code onto the main, so it's as if you &lt;em&gt;just made your changes.&lt;/em&gt; You've integrated locally.&lt;/li&gt;
&lt;li&gt;Rebuild the application locally and run all tests.&lt;/li&gt;
&lt;li&gt;Push your feature branch to the remote Git server and create a pull request, saying &amp;quot;Hey, I want this branch merged into main!&amp;quot;&lt;/li&gt;
&lt;li&gt;Someone approves the PR, integrating into main.&lt;/li&gt;
&lt;li&gt;The main branch &lt;em&gt;automatically&lt;/em&gt; builds and tests the code &lt;em&gt;from scratch&lt;/em&gt;. &lt;strong&gt;This is key. It's as if a new developer is working on a new computer.&lt;/strong&gt; We build/test the code once, then deploy it to different environments. What could go wrong?
&lt;ol&gt;
&lt;li&gt;The code doesn't build.&lt;/li&gt;
&lt;li&gt;The tests fail&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If anything goes wrong, we're notified and the bad code doesn't get released to users.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It can be counter-intuitive, but the safest development method is to push changes frequently. Why?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fewer changes are easier to fix&lt;/li&gt;
&lt;li&gt;Rolling back a PR with only a few changes isn't a big deal&lt;/li&gt;
&lt;li&gt;Integrating multiple times per day means the latest changes are working&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When there is high automated test coverage and frequent integration, there can be enough confidence in the system to enable &lt;em&gt;continuous deployment&lt;/em&gt;. That's where the code is automatically released to users as long as all environments build and test successfully. If there's a problem in a release deployment, it's easy to either roll that back or, better, rapidly fix the issue since there will have been a small number of changes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/what_do_you_mean_by_automated_tests_and_continuous_integration_/images/sc01.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 13 May 2021 13:33:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/what_do_you_mean_by_automated_tests_and_continuous_integration_</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/what_do_you_mean_by_automated_tests_and_continuous_integration_</guid>
    </item>
    <item>
      <title>A Simple Intro to Scrum in Azure DevOps</title>
      <description>&lt;p&gt;Azure DevOps is a flexible--yet opinionated--application to use for Scrum. It's got a large number of settings, and sometimes how things are named is confusing. This is a &amp;quot;get up and running&amp;quot; guide that includes the basics of the Scrum framework and a daily flow for your team.&lt;/p&gt;
&lt;p&gt;What's included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrum basics&lt;/li&gt;
&lt;li&gt;A &amp;quot;Day in the Life&amp;quot; of your dev team&lt;/li&gt;
&lt;li&gt;My recommended configurations of the default Scrum Process Template&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting an Azure DevOps free account (I assume you've done this)&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Deep reporting&lt;/li&gt;
&lt;li&gt;My preferred really simple process template. That's a future post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;!-- Start Document Outline --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#contents"&gt;Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scrum-basics"&gt;Scrum Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-a-new-project"&gt;Configure a New Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-in-the-life---capture-epics-features-and-stories"&gt;Day in the Life - Capture Epics, Features, and Stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-in-the-life---plan-the-sprint"&gt;Day in the Life - Plan the Sprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#time-out-what-makes-a-good-user-story-and-what-is-effort"&gt;Time Out! What Makes a Good User Story? And What is Effort?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#work-item-descriptions-stories"&gt;Work Item Descriptions (Stories)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#effort"&gt;Effort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-the-story-board"&gt;Configuring the Story Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#time-out-there-sure-are-a-lot-of-states"&gt;Time Out! There Sure Are a Lot of &amp;quot;States&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-in-the-life---daily-standup"&gt;Day in the Life - Daily Standup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#your-custom-stuff"&gt;Your Custom Stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-story-board"&gt;The Story Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-task-board"&gt;The Task Board&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#day-in-the-life---the-review-and-retrospective"&gt;Day in the Life - The Review and Retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources-and-footnotes"&gt;Resources and Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- End Document Outline --&gt;
&lt;h2 id="scrum-basics"&gt;Scrum Basics&lt;/h2&gt;
&lt;p&gt;Scrum is not a methodology. It's an Agile framework that methodologies are based on. Scrum mostly describes &lt;em&gt;what&lt;/em&gt; you should have but not &lt;em&gt;how&lt;/em&gt; you should do it.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This will come as a surprise to most readers, since &amp;quot;Scrum means boards and points and velocity and charts&amp;quot; is what the consultants sell. The truth is, those are applications of Scrum that have proven successful over the years, and I'll be including some of them below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Scrum is Agile, but Agile isn't Scrum. Agile is a set of four values and twelve principles&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; established by a bunch of software developers in 2001. If a framework or methdology supports those values and principles, it's Agile. Other such methodologies incude Kanban, Lean, eXtreme Programming, and Crystal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The core flow of Scrum is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Capture all potential work in an ordered&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Product Backlog.&lt;/li&gt;
&lt;li&gt;Define regular iteration periods of work called Sprints.&lt;/li&gt;
&lt;li&gt;Define a valuable Sprint Goal and pull work into a Sprint Backlog that will meet that goal.&lt;/li&gt;
&lt;li&gt;Complete the items in the Sprint Backlog during the Sprint, meeting daily for fifteen minutes to review progress.&lt;/li&gt;
&lt;li&gt;Review the Sprint results with stakeholders.&lt;/li&gt;
&lt;li&gt;Reflect inside the team on how the process can be improved, and add those improvements to the Product Backlog.&lt;/li&gt;
&lt;li&gt;Repeat, maintaining a sustainable pace&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;A Sprint is a contract to complete the Sprint Goal. The team commits to achieving the goal, and the customer commits to not adding work during the Sprint that inhibits the goal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Scrum team has three roles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product Owner, who represents the customer's interests and is responsible for &lt;em&gt;which&lt;/em&gt; work will get done next.&lt;/li&gt;
&lt;li&gt;Developers, who decide &lt;em&gt;how&lt;/em&gt; the work will get done.&lt;/li&gt;
&lt;li&gt;Scrum Master, who guides the team to successfully use Scrum.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no Project Manager in a Scrum team. The team works together as peers using their skills to best effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tight Feedback Loops&lt;/strong&gt;&lt;br /&gt;
Scrum--and Agile in general--prefers rapid, regular feedback to allow early self-correction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="configure-a-new-project"&gt;Configure a New Project&lt;/h2&gt;
&lt;p&gt;Open your Azure DevOps site and select your organization (which should already be configured).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose &lt;code&gt;+ New Project&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enter a Project name, Visibility = Private, and open the Advanced settings.
&lt;ol&gt;
&lt;li&gt;Version control = Git&lt;/li&gt;
&lt;li&gt;Work item process = Scrum.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The differences between the &amp;quot;Agile&amp;quot; and &amp;quot;Scrum&amp;quot; processes is primarily terminology.&lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; A Scrum Product Backlog Item (PBI) is an Agile User Story. A Scrum Impediment is an Agile Issue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Click Create.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc01.png" alt="" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Our project has one team. Configuring multiple teams is outside this guide's scope. A large enough project could have many teams, each with its own iterations and board configurations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Configure Iterations&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Project Settings (the gear icon at bottom of the left sidebar menu).&lt;/li&gt;
&lt;li&gt;Select Boards &amp;gt; Project configuration.&lt;/li&gt;
&lt;li&gt;Delete all of the sample iterations (named &amp;quot;Sprint 1&amp;quot; etc) leaving just the top-level iteration.&lt;/li&gt;
&lt;li&gt;Add one New Child named &amp;quot;Product Backlog&amp;quot; with no dates. Select this item.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc02.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configure the Team&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Project Settings (the gear icon at bottom of the left sidebar menu).&lt;/li&gt;
&lt;li&gt;Select Boards &amp;gt; Team configuration.&lt;/li&gt;
&lt;li&gt;In the General tab
&lt;ul&gt;
&lt;li&gt;Check Epics, Features, and Backlog items.&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Bugs are managed with requirements&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the Iterations tab.
&lt;ul&gt;
&lt;li&gt;Set Default iteration to &amp;quot;Product Backlog&amp;quot;.&lt;/li&gt;
&lt;li&gt;Set Backlog Iteration to &amp;quot;Product Backlog&amp;quot;.&lt;/li&gt;
&lt;li&gt;(We'll create sprints in a later step.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Opinion&lt;/strong&gt;&lt;br /&gt;
Why not use @Current as the Default iteration? Because whenever a work item is added, it will automatically become part of the current sprint. This promotes a poor practice: not honoring the Sprint contract. Also, it's way too easy to forget to change the work item to be part of the backlog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This guide doesn't show customizing work item types, which can be very useful. My advice: do as little customization as needed, and almost none at first. Don't assume you need it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is &amp;quot;Manage Bugs With Requirements&amp;quot;?&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Manage with requirements&lt;/td&gt;
&lt;td&gt;Bugs are the same level as PBIs, appear as cards on the Story Board, can have tasks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manage with tasks&lt;/td&gt;
&lt;td&gt;Bugs are added to BPIs just like Tasks, and cannot have Tasks themselves.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;It may seem counter-intuitive, but I recommend managing bugs with requirements, which is the Scrum process default anyway. With this configuration, it's easier to define bugs as post-release issues and report on their impact.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="day-in-the-life-capture-epics-features-and-stories"&gt;Day in the Life - Capture Epics, Features, and Stories&lt;/h2&gt;
&lt;p&gt;We need to capture the work we think we're going to do. The only requirement for Scrum is a Product Backlog which can contain any kind of work item. It's often convenient to group work into features and epics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Epic&lt;/strong&gt; A high-level objective such as &amp;quot;Implement broad accessibility.&amp;quot; Usually a longer duration like a year.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature&lt;/strong&gt; An objective that will take multiple Sprints. For example, &amp;quot;Make site blind-accessible.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product Backlog Item (Story)&lt;/strong&gt; The work items to achieve in Sprints. PBI's can be part of a Feature, or independent. These typically take a few hours to a few days.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I call PBIs &amp;quot;stories&amp;quot; out of habit. I think it's easier to capture work in terms of stories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Epics and Features are things you finish, not areas of effort. Epics appeal to executives as high-level objectives.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open Boards &amp;gt; Backlogs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open View Options and set&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forecasting On&lt;/li&gt;
&lt;li&gt;In Progress Items On&lt;/li&gt;
&lt;li&gt;Completed Child Items Off&lt;/li&gt;
&lt;li&gt;Side Pane = Planning&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc03.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add three, two-week sprints. I like ISO naming because it's clear and cross-cultural. Be sure to choose the correct Location (&amp;quot;Product Backlog&amp;quot;).&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc04.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Epics from the &amp;quot;Backlog items&amp;quot; dropdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a New Work Item of type Epic named &amp;quot;Implement broad accessibility&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the + sign at the left of the epic and Add Feature &amp;quot;Make site blind-accessible&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switch to Backlog items view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add some stories, both independent and for the feature. We'll link to the feature in a little bit. Notice how you can add either a PBI or a Bug. If &amp;quot;Manage Bugs with tasks&amp;quot; had been selected earlier, you could only add PBIs here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Opinion&lt;/strong&gt;&lt;br /&gt;
The default for adding new work items is &amp;quot;Add to Top&amp;quot;. Change that to Add to Bottom. As you'll see, the Product Owner prioritizes work &lt;em&gt;to the top&lt;/em&gt;. Don't step on her effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc05.png" alt="" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open View Options and change the right side panel to &amp;quot;Mapping&amp;quot;. You should see the feature.&lt;/li&gt;
&lt;li&gt;Select, drag, and drop the first four stories onto the feature to link them.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="day-in-the-life-plan-the-sprint"&gt;Day in the Life - &lt;strong&gt;Plan&lt;/strong&gt; the Sprint&lt;/h2&gt;
&lt;p&gt;Sprint Planning is one of the Scrum events. Normally, prior to this, the Product Owner has prioritized the backlog so that the highest value (to the customer) stories are at the top.&lt;/p&gt;
&lt;p&gt;Sprint Planning is done by the team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work item Effort is estimated.&lt;/li&gt;
&lt;li&gt;The work itself is discussed in more detail and captured in the work item.&lt;/li&gt;
&lt;li&gt;A Sprint Goal is agreed to, and work is assigned to the Sprint.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open View Options and change the right side panel to &amp;quot;Planning&amp;quot; so show the sprints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reorder the work items, give each an Effort, and change its State to &amp;quot;Approved&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc06.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We've enabled Forecasting. Set the Forecasting velocity to 20 as our best guess for what we can get done this first sprint. This shows how many stories can go in the Sprint.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc07.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select, drag, and drop the top four stories onto the current Sprint.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc08.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With the top four still selected, right-click and choose Edit. Select the State field and set to Committed.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc10.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Since this walkthrough sticks to the defaults as much as possible, I'm using the intended Scrum flow which is &amp;quot;Items ready to estimate are Approved. Items in the Sprint are Committed.&amp;quot;&lt;/p&gt;
&lt;p&gt;I personally modify the process and use these states: New, In Progess, Done. This allows a work item to remain New in the Sprint Backlog. When it's dragged to another column, it's now In Progress.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Advice&lt;/strong&gt;&lt;br /&gt;
DO NOT plan future Sprints. That's Waterfall thinking.&lt;br /&gt;
DO estimate effort for all stories. This helps the Product Owner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What about assignments?&lt;/strong&gt;&lt;br /&gt;
The common recommendation is to not assign stories. Instead, let developers pull from the top as they are ready to begin work. The idea is anyone on the team can work on any story.&lt;/p&gt;
&lt;p&gt;My experience is that the team knows who's best suited to work on stories and will often assign stories during Sprint Planning.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, I don't recommend assigning stories &lt;em&gt;before&lt;/em&gt; they make it to a sprint. Don't try to predict the future, and don't pigeonhole developers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="time-out-what-makes-a-good-user-story-and-what-is-effort"&gt;Time Out! What Makes a Good User Story? And What is Effort?&lt;/h2&gt;
&lt;h3 id="work-item-descriptions-stories"&gt;Work Item Descriptions (Stories)&lt;/h3&gt;
&lt;p&gt;There are plenty of opinions about what makes good work item descriptions. In my view, work item descriptions come in three basic types&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Stories, which are user-centric items&lt;/li&gt;
&lt;li&gt;Bugs, which are for &lt;em&gt;&lt;strong&gt;post-release&lt;/strong&gt;&lt;/em&gt; defect reporting&lt;/li&gt;
&lt;li&gt;&amp;quot;Whatever&amp;quot; stories which are often internal/development items&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In all cases, the most important thing is to capture early, and enough information to ensure you can discuss the work item later. Stories are the &lt;em&gt;beginning&lt;/em&gt; of the conversation, not the end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;User Stories&lt;/strong&gt;&lt;br /&gt;
I like the now-classic template &amp;quot;As a ROLE, I want WHAT, because WHY&amp;quot;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;As a Security Admin, I need to be able to assign read-only to some screens because only accounting should be able to change the values, but everyone can see them.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &amp;quot;why&amp;quot; is important because it tells us the &lt;em&gt;value&lt;/em&gt; of the story. Work with the end-users to create these stories. The further you are from the actual end user, the more you're playing the game of Telephone&lt;a id="fnref:5" href="#fn:5" class="footnote-ref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;--and ensuring you're not getting accurate info.&lt;/p&gt;
&lt;p&gt;The other quality of a good story is the acceptance criteria. That is, how will the &lt;em&gt;user&lt;/em&gt; know the story is complete.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
You should expect the user story, and especially the acceptance criteria, to change as the story is developed. The conversation continues until the story is completed. &lt;strong&gt;These are not specifications!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bugs&lt;/strong&gt;&lt;br /&gt;
The two most important parts of a good bug report are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who reported it.&lt;/li&gt;
&lt;li&gt;Clear, accurate steps to reproduce the issue.&lt;/li&gt;
&lt;li&gt;Expected vs Actual result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The person who reported the issue should be the person who confirms during development (or after deployment) the bug is fixed.&lt;/p&gt;
&lt;p&gt;Steps to reproduce require coaching. Very few people do this well at first because we tend to assume the reader knows the software as well as we do. That's never true. Instead, assume you're training a new hire.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don't use slang or insider terms&lt;/li&gt;
&lt;li&gt;Write down the same terms/menu items, etc on the screen&lt;/li&gt;
&lt;li&gt;Provide the exact values used&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Whatever Stories&lt;/strong&gt;&lt;br /&gt;
These are often things like &amp;quot;Prepare stakeholder presentation&amp;quot; or &amp;quot;Review database indexes for performance.&amp;quot; I try to keep these to a minimum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bulk of your work items should be stories because that means you're satisfying the customer's needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="effort"&gt;Effort&lt;/h3&gt;
&lt;p&gt;How hard will the story be to achieve? &amp;quot;Relative to what?&amp;quot; you ask me. The answer is, &amp;quot;relative to the other stories.&amp;quot; A team gains a sense of how hard their work is in the context of their skills. The purpose of estimating effort--which typically occurs &lt;strong&gt;before&lt;/strong&gt; prioritizing work items--is to help the developers decide how much work they can complete in the sprint, and help the Product Owner with determining story value.&lt;/p&gt;
&lt;p&gt;Effort is traditionally measured in something other than hours. Azure DevOps uses Fibonacci story points. I have a couple of opinions and recommendations about this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Don't go beyond 13&lt;/strong&gt;. There's really no value in going up to 100 like some overly-formal systems suggest. You're just after a numerical sense of &amp;quot;easy, not bad, pretty hard, too hard for one sprint.&amp;quot; Keep it simple!&lt;/li&gt;
&lt;li&gt;Think in terms of &amp;quot;can I get this done in the sprint?&amp;quot; Most of your stories should finish in a day or less.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;developers&lt;/strong&gt; agrees on effort for each story during Sprint Planning. This provokes necessary conversation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Points&lt;/th&gt;
&lt;th&gt;What it might mean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;1&lt;/td&gt;
&lt;td&gt;Pretty easy, less than a day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;2&lt;/td&gt;
&lt;td&gt;Easy, probably a day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;3&lt;/td&gt;
&lt;td&gt;Might run into trouble, a few days&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;5&lt;/td&gt;
&lt;td&gt;Tough, maybe depends on other people or complicated problem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;8&lt;/td&gt;
&lt;td&gt;Hard, might need further breaking down&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;13&lt;/td&gt;
&lt;td&gt;Too much! Should become multiple stories&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="configuring-the-story-board"&gt;Configuring the Story Board&lt;/h2&gt;
&lt;p&gt;An &lt;em&gt;unfiltered&lt;/em&gt; Story Board shows the flow of stories through four overall states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;New (not estimated or approved)&lt;/li&gt;
&lt;li&gt;Approved (estimated and ready for a sprint)&lt;/li&gt;
&lt;li&gt;Committed (in the current sprint)&lt;/li&gt;
&lt;li&gt;Done&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Option&lt;/strong&gt;&lt;br /&gt;
You &lt;em&gt;could&lt;/em&gt; just use the Story Board to manage all work items. In this way, it's exactly like a physical board with sticky notes. However, you may have too many backlog items to make this enjoyable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Story Board &lt;em&gt;filtered for a Sprint&lt;/em&gt; has just two states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Committed&lt;/li&gt;
&lt;li&gt;Done&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The default columns for a team (using the Scrum template) are: New, Approved, Committed, Done. You can use these if you want, but you'll probably want to modify it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first thing about the board columns is: the board reflects &lt;em&gt;your flow&lt;/em&gt;. So make sure it's telling you the truth.&lt;/p&gt;
&lt;p&gt;The second thing about board columns: Avoid creating a Waterfall board with &amp;quot;Planning, Design, Development, Testing, Release&amp;quot; etc. Your stories are better off when you don't force their states. It'll depend on the business whether there's a firm hand-off such as to a QA team member.&lt;/p&gt;
&lt;p&gt;The third thing about boards is: They're a &lt;em&gt;pull&lt;/em&gt; system. You work on the story. If there's a hand-off, you put the story into a &amp;quot;ready&amp;quot; column so the next person can pull &lt;em&gt;when she's ready&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's configure our board to include a QA team member handoff.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Boards&lt;/li&gt;
&lt;li&gt;Choose the Backlog Items view&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc09.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Open the Board Settings and Columns tab. When you add or rename columns, be sure to set their State.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc11.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Configure the columns as shown.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc12.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now we're ready for people to start work! Go ahead and drag a couple of stories from Ready for Dev to Developing, and assign them. (I previously added some Users.)&lt;/p&gt;
&lt;h2 id="time-out-there-sure-are-a-lot-of-states"&gt;Time Out! There Sure Are a Lot of &amp;quot;States&amp;quot;&lt;/h2&gt;
&lt;p&gt;Yeah, it's confusing with all the layers of abstraction. Here's a chart to help you understand what the states are and what level they're configured at.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Even if you customize a process, at story is only ever in one of three conceptual states: &lt;strong&gt;New, In Progress, Done&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc16.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="day-in-the-life-daily-standup"&gt;Day in the Life - Daily Standup&lt;/h2&gt;
&lt;p&gt;The purpose of the daily standup meeting is to communicate progress. It's part of the rapid feedback loop. I like using Azure DevOps the following way in the meeting.&lt;/p&gt;
&lt;h3 id="your-custom-stuff"&gt;Your Custom Stuff&lt;/h3&gt;
&lt;p&gt;The Scrum Master shows whatever charts the team is using to help progress toward the Sprint Goal. The most useful, in my view, are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Burndown Chart&lt;/li&gt;
&lt;li&gt;Cumulative Flow Diagram&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-story-board"&gt;The Story Board&lt;/h3&gt;
&lt;p&gt;Next is the Story Board showing everyone's stories. This gives the best overview and is the first place to spot bottlenecks. As the Sprint progresses, stories move from left to right. (I've added some Tasks and a Test to make things a little more real.)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc13.png" alt="" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;br /&gt;
Don't assume you &lt;em&gt;must&lt;/em&gt; use Tasks. If your project is simple enough, or the team is mature enough, viewing the stories' progress through the board is often enough.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;br /&gt;
Do the simplest thing that works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can filter the Story Board to show each person's work in progress. Note that this filters on who owns the story. This may be all you need for short-lived stories that don't have multiple people working on them.&lt;/p&gt;
&lt;h3 id="the-task-board"&gt;The Task Board&lt;/h3&gt;
&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; have multiple people assigned to stories' tasks, then the Task Board is valuable. Open &amp;quot;Sprints&amp;quot; from the left side menu.&lt;/p&gt;
&lt;p&gt;This view shows the Committed (in progress) stories on the left hand side, and any tasks in progress. Just as with the Story Board, you can filter by person. Nicely, if the person is assigned a task belonging to another developer's story, she's still shown in context.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc14.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/images/sc15.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="day-in-the-life-the-review-and-retrospective"&gt;Day in the Life - The Review and Retrospective&lt;/h2&gt;
&lt;p&gt;There's no particular Azure DevOps screen I know of for recording reviews and retrospectives, &lt;em&gt;except&lt;/em&gt; that whatever you want to improve should become stories on your Product Backlog.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;&lt;br /&gt;
Instead of &amp;quot;rolling&amp;quot; unfinished stories to the next Sprint, try setting them all back to the Product Backlog iteration, but &lt;em&gt;without&lt;/em&gt; changing their states. In other words, a story that's Committed remains that way. This makes the forecasting easier and lets the team &amp;quot;reset&amp;quot; their thinking. Why assume a story that wasn't finished &lt;em&gt;must&lt;/em&gt; be on the next Sprint. Maybe, under reexamination, it shouldn't. If it shouldn't, it can be set as New. That's OK. Don't get hung up on keeping track of how much work was already done. Scrum is supposed to help you ship.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But do them. Really.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Crucial&lt;/strong&gt;&lt;br /&gt;
The Sprint Retrospective is the most important part of the process. Without it, it's hard to improve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="resources-and-footnotes"&gt;Resources and Footnotes&lt;/h2&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;Scrum Guide | Scrum Guides&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="http://agilemanifesto.org/"&gt;Manifesto for Agile Software Development&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://medium.com/the-liberators/myth-in-scrum-the-product-backlog-is-prioritized-bae533f7514a"&gt;Myth: In Scrum, the Product Backlog is prioritized | by Christiaan Verwijs | The Liberators | Medium&lt;/a&gt;&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process?view=azure-devops&amp;amp;tabs=basic-process"&gt;Choose a process like Basic, Agile, Scrum, or CMMI - Azure Boards | Microsoft Docs&lt;/a&gt;&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Children sit in a circle. The first child whispers a longish sentence to the next child, who whispers to the third child, and so on. The last child compares what she heard to the original. Inevitibly there's significant drift. When I was a kid, it was called the game of Gossip.&lt;a href="#fnref:5" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sat, 17 Apr 2021 14:41:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops</guid>
    </item>
    <item>
      <title>How (and why) to maintain a README.md file for internal projects: Onboarding and Continuous Integration</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/how_and_why_to_maintain_a_readme_md_file_-_onboarding_and_continuous_integration/images/id-314246---1548375197.svg-300.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;!-- Start Document Outline --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-the-heck-am-i-talking-about"&gt;What (the heck am I talking about)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-do-i-want-one"&gt;Why (do I want one)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-communicate-the-environment"&gt;How (do I communicate the Environment)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-i-communicate-getting-started"&gt;How (do I communicate Getting Started)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-is-this-valuable-to-cicd"&gt;Why (is this valuable to CI/CD)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-do-i-see-an-awesome-template"&gt;When (do I see an awesome template)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thats-a-wrap"&gt;That's (a wrap!)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- End Document Outline --&gt;
&lt;blockquote&gt;
&lt;p&gt;This won't be a &amp;quot;Complete and Authoritative 10 Steps to Perfect Readme Files.&amp;quot; It's intended to be a good starting point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-the-heck-am-i-talking-about"&gt;What (the heck am I talking about)?&lt;/h2&gt;
&lt;p&gt;I'm talking about the &lt;code&gt;README.md&lt;/code&gt; file that's typically at the root of Git repositories, especially when using GitHub, GitLab, BitBucket, and Azure DevOps.&lt;/p&gt;
&lt;p&gt;Specifically, though, I'm talking about &lt;em&gt;&lt;strong&gt;the Readme file that you use in your on-premise repositories&lt;/strong&gt;&lt;/em&gt;. That is, your organization's internal projects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Internal projects' Readme files are too often ignored. If they have a concrete and central purpose, they won't be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="why-do-i-want-one"&gt;Why (do I want one)?&lt;/h2&gt;
&lt;p&gt;The Readme file should be the starting point for your code's users. For open source, it starts with what the code is for and how to use it. It ends with information on how to build the code.&lt;/p&gt;
&lt;p&gt;Internal projects have a different audience and different priorities. They are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Help a new developer get the code working on her workstation.&lt;/li&gt;
&lt;li&gt;Be the source of truth for continuous integration (CI).&lt;/li&gt;
&lt;li&gt;Be the source of truth for the environment's version numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Luckily these go hand-in-hand(-in-hand). The point of the build portion of CI is to prove the code can be built on a clean workstation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what does a &amp;quot;clean workstation&amp;quot; mean? Today, it could mean a fresh, default installation of Windows, Linux, or MacOS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are two parts to getting your code building and running on a clean workstation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure the &lt;em&gt;Environment&lt;/em&gt; the code will build in. These are external dependencies.&lt;/li&gt;
&lt;li&gt;Get and &lt;em&gt;Build&lt;/em&gt; the code along with its internal dependencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-do-i-communicate-the-environment"&gt;How (do I communicate the Environment)?&lt;/h2&gt;
&lt;p&gt;The Environment will be the operating system and global installations required by your application. In Azure DevOps Pipeline parlance, they're the build agent's &lt;em&gt;capabilities&lt;/em&gt;. Here's an example for a solution that includes an Angular application and a .NET Core WebApi.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;## Environment
&amp;gt; Changing the environment? Change the CI/CD pipeline!

Install                          | Version    
---------------------------------|------------
Node                             | 14.15.3
NPM                              | deps on Node
Angular CLI                      | 11.2.3
Azure Authentication             | latest
Visual Studio (recommended)      | VS 2019+
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;One way to think of this is: &amp;quot;If my repo has a build script, what do I &lt;em&gt;not&lt;/em&gt; want it to manage?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your app's build script shouldn't try to install Node or Angular. It shouldn't even check if they exist. The first-use developer, or the person creating the CI pipeline, should refer to the Readme for environment details. The contract is that the environment will exist and the build script doesn't need to verify it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's easy, with Node apps, to know if it's an environment package. It gets installed globally using &lt;code&gt;npm install -g&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recommend the table above being the Readme's &lt;em&gt;only&lt;/em&gt; place version numbers exist for those dependencies. It's the source of truth. If you opt to include them in the Getting Started instructions, you need to remember to find/replace whenever the version numbers change.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regardless, the Readme is the source of truth for environment version information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="how-do-i-communicate-getting-started"&gt;How (do I communicate Getting Started)?&lt;/h2&gt;
&lt;p&gt;An excellent practice is to create a build script that will be used by the CI pipeline. This same script should be run before pushing the final commits for a pull request. This way, the CI process is being tested in advance.&lt;/p&gt;
&lt;p&gt;At its very simplest, a .NET Core solution's build script could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;dotnet build MySolution.sln -c Release -t:Rebuild
dotnet publish MySolution.sln -c Release --output &amp;quot;package&amp;quot;
cd my-angular-app
npm run my-angular-app:build:production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This rebuilds the solution and publishes the .NET assemblies to a &amp;quot;package&amp;quot; folder. The Angular app is built and published to its standard &lt;code&gt;dist&lt;/code&gt; folder. In your own organization, the script may also run tests, recreate a database, etc. The point is, there's just one step to take.&lt;/p&gt;
&lt;p&gt;From an onboarding viewpoint, this is great. The steps are basically &amp;quot;clone the repo, run the build script.&amp;quot;&lt;/p&gt;
&lt;p&gt;Our Getting Started section could look like this. Note that I'm recommending &lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;nvm-windows&lt;/code&gt; to the developer. This script also configures the Azure authentication to an Azure Artifacts package source.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;## Getting Started
&amp;gt; Be sure to use the correct versions from above

**Environment**  
1.  Install PowerShell Core.
1.  Install NVM or NVM for Windows.
1.  Open a PowerShell *administrator* shell:
    ```powershell
    nvm install [version]
    nvm use [version]
    ```
1.  Open a PowerShell *user* shell
    ```powershell
    # Angular
    npm install -g @angular/cli@[version]
    # Azure Auth
    npm install -g vsts-npm-auth
    ```

**Application**  
    ```powershell
    # Clone source
    cd &amp;quot;C:\users\[user]\source\repos&amp;quot;
    git clone https://corporate/repo/path/MyApp.git
    cd MyApp
    # Set credentials for company packages server
    vsts-npm-auth -config MyApp/my-angular-app/.npmrc
    
    # Build for local development
    ./build.ps1
    ```
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, I'm only indicating version numbers so that there's reduced chance of the version numbers in the Environment table not matching the version numbers in Getting Started. Of course, if you trust everyone to find/replace, there's nothing wrong with including them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="why-is-this-valuable-to-cicd"&gt;Why (is this valuable to CI/CD)?&lt;/h2&gt;
&lt;p&gt;The Getting Started steps are, basically, what the CI/CD pipeline should use, too. Here's what a simple Azure YAML file might look like for our solution. The steps are virtually identical.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;trigger: main

pool: 
  vmImage: 'ubuntu-latest'
  
stages:
- stage: build_stage
  displayName: 'Build' 
  jobs:
  - job: 
    steps:
    # Environment capabilities
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '14.15.3'
    - pwsh: 'npm install -g @angular/cli@11.0.7'
      displayName: 'Install Angular CLI'
    - task: npmAuthenticate@0
      displayName: Authenticate to Azure Artifacts NPM
      inputs:
        workingFile: $(System.DefaultWorkingDirectory)/my-angular-app/.npmrc
    # Build
    - pwsh: ./build.ps1
      displayName: 'Run build script'
    # Publish
    - publish: $(System.DefaultWorkingDirectory)/package
      artifact: package
      displayName: Publish

- stage: deploy_to_build_stage
  # etc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="when-do-i-see-an-awesome-templateexample"&gt;When (do I see an awesome template/example)?&lt;/h2&gt;
&lt;p&gt;Right now.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;# My Awesome App

## Introduction
What the app is for.

## Environment
&amp;gt; Changing the environment? Change the CI/CD pipeline!

Install                          | Version    
---------------------------------|------------
.NET Framework                   | 4.8
PowerShell Core                  | 7.x
Visual Studio (recommended)      | VS 2019+

Sources:
*   [.NET Framework](https://dotnet.microsoft.com/download/dotnet-framework)
*   [PowerShell Core](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows)

## Getting Started
&amp;gt; Be sure to use the correct versions from above.

**Environment**  
1.  Install PowerShell Core [version].
1.  Install .NET Framework [version].

**Application** 
    ```powershell
    # Clone source
    cd &amp;quot;C:\users\[user]\source\repos&amp;quot;
    git clone [path-to-repo]
    cd [appname]
    # Build app
    ./build.ps1
    ```

## Daily Development
Things needed to smoothly develop, such as how to run service dependencies.

## When to run the build script
    ```powershell
    ./build.ps1
    ```
The build script simulates what the CI server will do, and is intended to catch build errors before they get to the server. The script should be run before the &amp;quot;final&amp;quot; PR commit. That is:

1.  Before pushing the final feature branch, AND/OR
1.  Before pushing to the mainline branch

## Troubleshooting
Things that might go wrong. These SHOULD end up on product backlogs and get fixed.

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="thats-a-wrap"&gt;That's (a wrap!)&lt;/h2&gt;
&lt;p&gt;The key values of a Readme for internal projects are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source of truth for environment dependency version numbers&lt;/li&gt;
&lt;li&gt;Rapid developer onboarding&lt;/li&gt;
&lt;li&gt;Matching steps used for building locally and in CI/CD&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How can you keep this up-to-date? While I'm not hoping your turnover is high, whenever a new developer is brought on she should try to get the application working using &lt;em&gt;just&lt;/em&gt; the documentation, and update if needed.&lt;/p&gt;
&lt;p&gt;The proof that everyone's doing their jobs? &lt;em&gt;The document won't need updating!&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 26 Mar 2021 09:28:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/how_and_why_to_maintain_a_readme_md_file_-_onboarding_and_continuous_integration</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/how_and_why_to_maintain_a_readme_md_file_-_onboarding_and_continuous_integration</guid>
    </item>
    <item>
      <title>One Sheet Summary: Leadership is Language</title>
      <description>&lt;p&gt;I make these to post on my wall and help me learn the subject. Be sure to read the book!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/well-being"&gt;All One Sheet Summaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say/dp/B07L2KL5XV"&gt;Buy the book on Amazon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Seriously, read Mr Marquet's entire excellent book. It's so packed that this summary doesn't do it justice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summry-_leadership_is_language/images/leadership-is-language.pdf"&gt;Download the PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/one_sheet_summry-_leadership_is_language/images/leadership-is-language.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 5 Jan 2021 14:00:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/one_sheet_summry-_leadership_is_language</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/one_sheet_summry-_leadership_is_language</guid>
    </item>
    <item>
      <title>NuGet 5.7+ Ignores NuSpec CSProj Replacement Tokens - and other weird behaviors</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;br /&gt;
A stellar sleuth discovered that the error messages are related to whether the &lt;code&gt;nuget.exe&lt;/code&gt; executable's &amp;quot;Unblock&amp;quot; attribute is checked. When it is (i.e. the file is unblocked), the error message doesn't occur. While it's still a bug, at least there's a solid workaround.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/nuget_5_7+_ignores_nuspec_replacement_tokens_-_and_other_weird_behavio/images/sc02.png" alt="" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I submitted this issue in on 2020-08-28. It's had some comments and confirmations, but the moderators are having trouble reproducing it. I'm hoping this will help.&lt;/p&gt;
&lt;p&gt;Source Code:  &lt;a href="https://www.softwaremeadows.com/posts/nuget_5_7+_ignores_nuspec_replacement_tokens_-_and_other_weird_behavio/images/ClassLibrary1.zip"&gt;ClassLibrary1.zip&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="title"&gt;Title&lt;/h2&gt;
&lt;p&gt;Here's the link to the issue.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/NuGet/Home/issues/9954"&gt;NuGet again throwing exceptions &amp;quot;authors is required&amp;quot; &amp;quot;description is required&amp;quot;, ignoring csproj/nuspec replacement tokens · Issue #9954&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="environment"&gt;Environment&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Windows 10 Pro
Visual Studio 2019
.NET Framework 4.8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="more-info"&gt;More Info&lt;/h2&gt;
&lt;p&gt;There are multiple failures being reported below. The fundamental one is that NuGet 5.7 and above ignore token replacements in .nuspec files from .NET Framework project .csproj files.&lt;/p&gt;
&lt;h2 id="steps-to-reproduce"&gt;Steps to Reproduce&lt;/h2&gt;
&lt;h3 id="pre-setup"&gt;Pre-setup&lt;/h3&gt;
&lt;p&gt;Check the Windows PATH environment variables (&lt;code&gt;System Properties &amp;gt; Advanced &amp;gt; Environment Variables&lt;/code&gt;) at the user and system levels and be sure that &lt;em&gt;no&lt;/em&gt; version of &lt;code&gt;nuget.exe&lt;/code&gt; is on the path. One way to verify is to open a new command window and type &lt;code&gt;nuget&lt;/code&gt;. If there's output, &lt;code&gt;nuget&lt;/code&gt; is on the path.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A reboot may be required for the computer to recognize the path change. Normally, it only takes closing completely out of the System Properties editor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember to open a new command window after PATH changes so the environment variable is reloaded.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="steps"&gt;Steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;In Visual Studio, create a new .NET Framework Console Application.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/nuget_5_7+_ignores_nuspec_replacement_tokens_-_and_other_weird_behavio/images/sc01.png" alt="" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Properties\AssemblyInfo.cs add the values that are substituted for $description and $author:
&lt;pre&gt;&lt;code class="language-cs"&gt;[assembly: AssemblyDescription(&amp;quot;Desc&amp;quot;)]
[assembly: AssemblyConfiguration(&amp;quot;&amp;quot;)]
[assembly: AssemblyCompany(&amp;quot;Name&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Download NuGet 5.7 &lt;a href="https://www.nuget.org/downloads"&gt;https://www.nuget.org/downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Copy to the project folder&lt;/li&gt;
&lt;li&gt;Rename to &lt;code&gt;nuget.exe&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;It's important that the file be named &lt;code&gt;nuget.exe&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code&gt;ClassLibrary1.csproj&lt;/code&gt; project folder, run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nuget spec
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce the resulting &lt;code&gt;ClassLibrary1.nuspec&lt;/code&gt; file to the minimum required properties&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package &amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;id&amp;gt;$id$&amp;lt;/id&amp;gt;
    &amp;lt;version&amp;gt;$version$&amp;lt;/version&amp;gt;
    &amp;lt;authors&amp;gt;$author$&amp;lt;/authors&amp;gt;
    &amp;lt;description&amp;gt;$description$&amp;lt;/description&amp;gt;
  &amp;lt;/metadata&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build the project or solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In project folder, run &lt;code&gt;nuget pack&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected&lt;/strong&gt;: Successful build of new package&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual&lt;/strong&gt;: Error that Author and Description are missing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Attempting to build package from 'ClassLibrary1.csproj'.
MSBuild auto-detection: using msbuild version '16.8.2.56705' from 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin'.
Packing files from 'C:\Users\charl\source\repos\ClassLibrary1\ClassLibrary1\bin\Debug'.
Using 'ClassLibrary1.nuspec' for metadata.
Authors is required.
Description is required.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="nuget-5.6-behavior"&gt;NuGet 5.6 Behavior&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the above environment, replace the &lt;code&gt;nuget.exe&lt;/code&gt; version 5.7 with version 5.6.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's important that the file be named &lt;code&gt;nuget.exe&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;nuget pack&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The pack succeeds.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Attempting to build package from 'ClassLibrary1.csproj'.
MSBuild auto-detection: using msbuild version '16.8.2.56705' from 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin'.
Packing files from 'C:\Users\charl\source\repos\ClassLibrary1\ClassLibrary1\bin\Debug'.
Using 'ClassLibrary1.nuspec' for metadata.
Successfully created package 'C:\Users\charl\source\repos\ClassLibrary1\ClassLibrary1\ClassLibrary1.1.0.0.nupkg'.
WARNING: NU5128: Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder do not have exact matches in the other location. Consult the list of actions below:
- Add a dependency group for .NETFramework4.8 to the nuspec
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="nuget-5.8-and-5.9-preview-behaviors"&gt;NuGet 5.8 and 5.9 preview Behaviors&lt;/h2&gt;
&lt;p&gt;Both versions exhibit the same bug as 5.7.&lt;/p&gt;
&lt;h2 id="behavior-when-renaming-nuget.exe"&gt;Behavior When Renaming &lt;code&gt;nuget.exe&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Copy version 5.6 into the project folder&lt;/li&gt;
&lt;li&gt;Rename it &lt;code&gt;nugetx.exe&lt;/code&gt; (It doesn't matter what it's renamed to, as long as it isn't &lt;code&gt;nuget.exe&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nugetx.exe pack&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike when named &lt;code&gt;nuget.exe&lt;/code&gt;, version 5.6 &lt;code&gt;pack&lt;/code&gt; fails with the unexpected error!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Attempting to build package from 'ClassLibrary1.csproj'.
MSBuild auto-detection: using msbuild version '16.8.2.56705' from 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin'.
Packing files from 'C:\Users\charl\source\repos\ClassLibrary1\ClassLibrary1\bin\Debug'.
Using 'ClassLibrary1.nuspec' for metadata.
Authors is required.
Description is required.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="behavior-when-two-nuget-files-in-path"&gt;Behavior When Two NuGet files in Path&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Copy version 5.6 into the project folder and rename to &lt;code&gt;nuget.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy version 5.6 &lt;em&gt;again&lt;/em&gt; into the project folder and rename to &lt;code&gt;nugetx.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nuget pack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;nugetx pack&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In &lt;em&gt;both&lt;/em&gt; cases, the pack succeeds.&lt;/p&gt;
&lt;h2 id="real-world-concerns"&gt;Real World Concerns&lt;/h2&gt;
&lt;p&gt;Many organizations will, in a continuous deployment environment, use a known path to the latest NuGet package and expect it to be named &lt;code&gt;nuget.exe&lt;/code&gt;. As seen above, those organizations will suddenly find themselves with failing package steps.&lt;/p&gt;
&lt;p&gt;In order to continue, they must either stay on version 5.6 and accept the potential security issues there, or rework their pipeline.&lt;/p&gt;
</description>
      <pubDate>Sat, 26 Dec 2020 13:38:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/nuget_5_7+_ignores_nuspec_replacement_tokens_-_and_other_weird_behavio</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/nuget_5_7+_ignores_nuspec_replacement_tokens_-_and_other_weird_behavio</guid>
    </item>
    <item>
      <title>Tech Debt - You can't put maintenance last if you want to drive a race car</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/tech_debt_-_you_cant_put_maintenance_last_if_you_want_to_drive_a_race/images/640px-ALMS_Prototypes.jpg" alt="" /&gt;&lt;br /&gt;
&lt;sup&gt;SPYDERMAN360, CC BY 2.0 &lt;a href="https://creativecommons.org/licenses/by/2.0"&gt;https://creativecommons.org/licenses/by/2.0&lt;/a&gt;, via Wikimedia Commons&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted at &lt;a href="https://clearmeasure.com/tech-debt-you-cant-put-maintenance-last-if-you-want-to-drive-a-race-car/"&gt;Clear Measure&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="the-nurture-bit"&gt;The Nurture Bit&lt;/h2&gt;
&lt;p&gt;When I was growing up, I spent part of my summers with my grandparents in Oklahoma. I was inculcated into the value of maintenance early on. My grandfather did most of his own car maintenance and repair. I'm not talking about just an oil and filter change. Back then, a determined car owner could virtually rebuild an entire automobile.&lt;/p&gt;
&lt;p&gt;My grandfather had a car lift in his garage.&lt;/p&gt;
&lt;p&gt;Imagine if Danica Patrick or Jeff Gordon was told just before a race &amp;quot;sorry, we didn't fix your brakes because the boss said to paint a new sponsor's logo on the car. Maybe next time.&amp;quot; I personally don't have to imagine what happens if you don't replace your tires. I did a 360 on the highway because of balding tires in snow.&lt;/p&gt;
&lt;p&gt;To me, paying down technical debt, refactoring, cleaning up documentation, is just part of what a development shop must do. Likewise, operations must keep computers updated. However, I've seen many organizations where maintenance is treated by management as optional, or worse, as a profit obstacle. And I've seen just as many developers and network engineers avoid maintenance. Why? What are the consequences? Do they matter?&lt;/p&gt;
&lt;h2 id="the-nature-bit"&gt;The Nature Bit&lt;/h2&gt;
&lt;p&gt;There are several reasons humans metaphorically--and actually--don't change their oil or replace their Access 97 applications. Among them,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's still working, and &amp;quot;if it ain't broke&amp;quot; . . . well, you know the rest.&lt;/li&gt;
&lt;li&gt;We're &lt;a href="https://www.psychologytoday.com/us/blog/shut-and-listen/201806/humans-cant-plan-long-term-and-heres-why"&gt;not good at long-term planning&lt;/a&gt; and &amp;quot;tend to opt for immediate rewards.&amp;quot;&lt;/li&gt;
&lt;li&gt;We're adaptable. Very. &lt;a href="https://en.wikipedia.org/wiki/Hedonic_treadmill"&gt;Hedonic adaptation&lt;/a&gt;, for example, has its good points, but not when it keeps us from fixing those security holes that we &amp;quot;really should get to someday.&amp;quot;&lt;/li&gt;
&lt;li&gt;We think it's too expensive in dollars, time, effort, or any combination of those. As Mac Smith puts it in &lt;a href="https://reliabilityweb.com/articles/entry/maintenance-as-a-profit-center"&gt;this article&lt;/a&gt;, &amp;quot;One of the things that has NOT changed very much is the age-old management perception that maintenance is just a necessary evil and unfortunate cost center.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my experience, maintenance such as paying down technical debt is treated as second-class, something you &lt;em&gt;might&lt;/em&gt; have time to do &lt;em&gt;after&lt;/em&gt; you're done writing your software and fixing bugs. Management too often sees it as similar to employees reading about business improvement between support calls; &amp;quot;you can do that on your &lt;em&gt;own&lt;/em&gt; time.&amp;quot; And while we software developers know refactoring is important, how often do we not do it just because (we feel) there isn't &lt;em&gt;time&lt;/em&gt;?&lt;/p&gt;
&lt;h2 id="technical-debt-is-really-debt"&gt;Technical Debt is Really Debt&lt;/h2&gt;
&lt;p&gt;Measuring and reporting technical debt can be challenging. You'll find articles saying it's harder than measuring financial debt. But they all agree that technical debt translates to real dollars. We're talking potentially big numbers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on this definition [the cost of fixing the structural quality problems in an application that, if left unfixed, puts the business at serious risk] and the analysis of 1400 applications containing 550 million lines of code submitted by 160 organizations, CRL estimate that the Technical Debt of an average-sized application of 300,000 lines of code (LOC) is $1,083,000. This represents an average Technical Debt per LOC of $3.61. --&lt;a href="https://www.castsoftware.com/research-labs/technical-debt-estimation"&gt;Technical Debt Estimation - CAST&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Technical debt is unavoidable. Like buying an office building, as soon as you create software you have dollars of technical debt. Business owners pay for regular building maintenance, why not regular software maintenance? The question for organizations is, &amp;quot;does not cleaning up code really affect my profit?&amp;quot; I think unless shown otherwise, you should assume the answer is yes. Here's a list of impacts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical Debt &lt;strong&gt;increases time-to-market and development costs&lt;/strong&gt;. How?
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Increased security risks&lt;/strong&gt; The best way to increase the chances of your data being stolen every day? Don't prioritize auditing and daily maintaining your software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to understand code&lt;/strong&gt; The &amp;quot;dirtier&amp;quot; the code base, the longer it takes developers to understand an already complex system. I've experienced code that regularly took me &lt;em&gt;three times longer&lt;/em&gt; than it should have to figure out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increased likelihood of introducing bugs&lt;/strong&gt; The harder code is to understand, the more likely you'll break something when adding a new feature. &lt;em&gt;Automated Testing&lt;/em&gt; helps with this, but older code often isn't written to make testing easy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decreased maintainability&lt;/strong&gt; Ever tried to find a part for a 1980s appliance you dearly love? Multiply that by a thousand and that's what it's costing your business each day your developers struggle with old or poorly architected code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Harder to replace&lt;/strong&gt; Software components eventually have to be replaced. But it's not like replacing your car's tires. It's more like replacing all the galvanized pipe in a thirty-story five-star hotel filled with Hollywood stars before the Emmys.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prone to outages&lt;/strong&gt; The authors of &lt;a href="https://www.amazon.com/Meltdown-Systems-Fail-What-About/dp/0735222630"&gt;Meltdown&lt;/a&gt; found that highly complicated, tightly-coupled systems will inevitably, unpredictably fail. Software is--you guessed it--by its nature prone to complexity and coupling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Employee depression leading to apathy and increased turnover&lt;/strong&gt; An overlooked cost of technical debt is the health toll it takes, nicely expressed in the article &lt;a href="https://codeahoy.com/2020/01/25/technical-debt/"&gt;Technical Debt is Soul-crushing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The inability to quickly respond to changing requirements and priorities&lt;/strong&gt; Consider the above points. If it takes longer to understand, maintain, fix, and introduce new features to existing code, how can the developers pivot and respond quickly to new market conditions? It's hard to turn a submarine. Now imagine trying to turn a fleet of subs. Managing technical debt transforms those submarines into James Bond sports cars.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="im-convinced.i-think.what-do-i-do"&gt;I'm Convinced. I Think. What Do I Do?&lt;/h2&gt;
&lt;p&gt;Like buying an old house that you learn has plumbing, electric, and foundation problems . . . but you gotta live there so you can't just tear it down . . . technical debt can be overwhelming. The answer to overwhelm is chunking down the work load and choosing tasks wisely.&lt;/p&gt;
&lt;h3 id="forget-the-blame"&gt;1. Forget the Blame&lt;/h3&gt;
&lt;p&gt;It's not anyone's fault. Or it's everyone's fault. Regardless, the way forward is to act like scientists and colleagues. Get curious. Fix the problem, not the blame.&lt;/p&gt;
&lt;h3 id="accept-change-especially-at-the-top"&gt;2.  Accept Change, Especially at the Top&lt;/h3&gt;
&lt;p&gt;Technical debt has been created as much from the top of the organization as from the coders. Every time a project was made &amp;quot;top priority,&amp;quot; and teams were asked &amp;quot;how do we work around that to release faster?&amp;quot; without also saying &amp;quot;but then it needs to be done right, immediately,&amp;quot; executives reduced the abililty to stay fleet-footed. Execs and devs must both change. It'll be for the better.&lt;/p&gt;
&lt;h3 id="measure-for-reality"&gt;3. Measure For Reality&lt;/h3&gt;
&lt;p&gt;How will you define technical debt? How will you discover it? How will you measure it? The answers to these questions lead to facts, and facts often aren't comfortable things to face. You can do this yourself, but I recommend partnering with an outside company such as &lt;a href="https://clearmeasure.com/"&gt;Clear Measure&lt;/a&gt;&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, who doesn't share the organization's culture or biases. Be sure they use evidence-based metrics such as the &lt;a href="https://stelligent.com/2018/12/21/measuring-devops-success-with-four-key-metrics/"&gt;DORA group's four key metrics&lt;/a&gt; of high-performing teams.&lt;/p&gt;
&lt;h3 id="improve-a-little-a-lot"&gt;4. Improve a Little, a Lot&lt;/h3&gt;
&lt;p&gt;With facts in hand, you have ways of measuring progress. Choose an easy win that the &lt;em&gt;developers&lt;/em&gt; agree will help them. Not the executives. Not project managers. Developers. This gives them  ownership of their purpose. I again recommend they accept coaching just like a top racer or athlete does. Utlimately, though, they'll find their solution through their autonomy and mastery. Next, repeat. A one-percent improvement each day is realistic and sustainable.&lt;/p&gt;
&lt;h3 id="celebrate"&gt;5. Celebrate&lt;/h3&gt;
&lt;p&gt;Every success needs a reward, especially the little ones. Repeated behaviors with rewards become habits, and that's what we want when it comes to software maintenance and paying down technical debt.&lt;/p&gt;
&lt;h2 id="references-and-further-reading"&gt;References and Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tenmilesquare.com/the-impact-of-technical-debt-a-guide-for-business-managers/"&gt;The Impact of Technical Debt: A Guide for Business Managers – Tenmilesquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://18f.gsa.gov/2015/08/07/technical-debt-1/"&gt;18F: Digital service delivery | Don’t underestimate the danger of technical debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://18f.gsa.gov/2015/09/04/what-is-technical-debt/"&gt;18F: Digital service delivery | What is technical debt?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.castsoftware.com/research-labs/technical-debt-estimation"&gt;Technical Debt Estimation - CAST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://commadot.com/the-ux-of-technical-debt/"&gt;http://commadot.com/the-ux-of-technical-debt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.industrialmarketer.com/marketers-technical-debt/"&gt;Why Marketers Need to Start Thinking About Technical Debt | Industrial Marketer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.computerworld.com/article/2516325/the-new-push-to-measure-software-s-true-cost.html"&gt;The new push to measure software's true cost | Computerworld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/finance/part-time-cfos/technical-debt"&gt;How Does Technical Debt Affect a Business Financially? | Toptal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deloitte.wsj.com/cio/2015/01/21/how-to-calculate-technical-debt/"&gt;How to Calculate Technical Debt - CIO Journal - WSJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thinkapps.com/blog/development/technical-debt-calculation/"&gt;How to Calculate Technical Debt and Express It Clearly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thinkapps.com/blog/development/technical-debt-computation-top-tools/"&gt;Technical Debt Computation: Comparison of Top Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sonarqube.org/"&gt;Code Quality and Security | SonarQube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/falonfatemi/2016/05/30/technical-debt-the-silent-company-killer/#29b15aec4562"&gt;Technical Debt: The Silent Company Killer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeahoy.com/2020/01/25/technical-debt/"&gt;Technical Debt is Soul-crushing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hedonic_treadmill"&gt;Hedonic treadmill - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reliabilityweb.com/articles/entry/maintenance-as-a-profit-center"&gt;Maintenance as a Profit Center - Reliabilityweb: A Culture of Reliability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://corporatefinanceinstitute.com/resources/knowledge/trading-investing/maintenance-margin/"&gt;Maintenance Margin - Overview, How It Works, Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.efficientplantmag.com/2015/05/the-psychology-of-successful-maintenance-and-reliability-programs/"&gt;The Psychology Of Successful Maintenance and Reliability Programs - Efficient Plant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.psychologytoday.com/us/blog/shut-and-listen/201806/humans-cant-plan-long-term-and-heres-why"&gt;Humans Can't Plan Long-Term, and Here's Why | Psychology Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://18f.gsa.gov/2015/08/07/technical-debt-1/"&gt;18F: Digital service delivery | Don’t underestimate the danger of technical debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.castsoftware.com/research-labs/technical-debt-estimation"&gt;Technical Debt Estimation - CAST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Meltdown-Systems-Fail-What-About/dp/0735222630"&gt;Meltdown: Why Our Systems Fail and What We Can Do About It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Le_Mans_Prototype"&gt;Le Mans Prototypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Endurance_racing_(motorsport)"&gt;Endurance racing (motorsport) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Disclosure: I'm an employee of Clear Measure.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Mon, 7 Dec 2020 14:38:00 -0700</pubDate>
      <link>https://www.softwaremeadows.com/posts/tech_debt_-_you_cant_put_maintenance_last_if_you_want_to_drive_a_race</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/tech_debt_-_you_cant_put_maintenance_last_if_you_want_to_drive_a_race</guid>
    </item>
    <item>
      <title>The Four Foundations of Software Improvement - Letter-Size Art Deco Poster</title>
      <description>&lt;p&gt;For me, these cover most--if not all--the bases. Plus, &lt;em&gt;Art Deco&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/the_four_foundations_of_software_improvement_-_letter-size_poster/images/four-foundations.pdf"&gt;Download the PDF&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/the_four_foundations_of_software_improvement_-_letter-size_poster/images/four-foundations.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size:smaller;"&gt;Open SVG Art Deco border found &lt;a href="https://freesvg.org/art-deco-border"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 30 Oct 2020 11:38:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_four_foundations_of_software_improvement_-_letter-size_poster</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_four_foundations_of_software_improvement_-_letter-size_poster</guid>
    </item>
    <item>
      <title>"Path" is ambiguous. Here are clear, consistent variable names.</title>
      <description>&lt;h2 id="quiz-du-jour"&gt;Quiz du jour&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void ImportRecords(string path) {}

public void ImportRecords(string file) {}

public void ImportRecords(string folder) {}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's the argument for each of the parameters above? Does &amp;quot;path&amp;quot; include a filename? Do &amp;quot;file&amp;quot; and &amp;quot;folder&amp;quot; include a path?&lt;/p&gt;
&lt;p&gt;File system input/output is just about as old as computing itself, and yet I'll bet you see--and use!--ambiguous I/O variables all the time.&lt;/p&gt;
&lt;h2 id="clear-consistent"&gt;Clear, Consistent&lt;/h2&gt;
&lt;p&gt;Here are four variable names I've settled on to keep the meanings clear. They take just a little more effort at first, and with practice become a habit.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Means&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fileName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;just the file name&lt;/td&gt;
&lt;td&gt;customers.csv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;filePath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;full path to file&lt;/td&gt;
&lt;td&gt;c:\transfer\import\customers.csv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;folderName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;just the folder name&lt;/td&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;folderPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;full path to the folder&lt;/td&gt;
&lt;td&gt;c:\transfer\import&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2235173/file-name-path-name-base-name-naming-standard-for-pieces-of-a-path"&gt;language agnostic - File name? Path name? Base name? Naming standard for pieces of a path - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=2346"&gt;Editing by analogy - mike's web log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Path_(computing)"&gt;Path (computing) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lifewire.com/unc-universal-naming-convention-818230"&gt;Working With the Universal Naming Convention (UNC Path)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 26 Oct 2020 10:30:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/path_is_ambiguous__here_are_clear__consistent_variable_names_</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/path_is_ambiguous__here_are_clear__consistent_variable_names_</guid>
    </item>
  </channel>
</rss>