<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Developing With Project Dependencies - When to Package, When Not To</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;One last thought first&lt;/strong&gt;&lt;br /&gt;
This article uses the .NET framework and development for its examples. However, the principles described should apply to most languages and frameworks. For example, the issues and approach can be taken with Angular applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;!-- Start Document Outline --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#packages-are-good"&gt;Packages Are Good!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-developers-essential-desire"&gt;The Developer's Essential Desire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-practical-difference-between-external-and-internal-dependencies"&gt;The Practical Difference Between External and Internal Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fundamental-conflicts"&gt;The Fundamental Conflicts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#challenging-assumptions"&gt;Challenging Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-heuristic"&gt;A Simple Heuristic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-blocks"&gt;Building Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-common-folder-structure"&gt;A Common Folder Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repositories"&gt;Repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#meta-solution-files"&gt;Meta-Solution Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#simultaneous-development-with-packages-if-you-must"&gt;Simultaneous Development With Packages, If You Must&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-versioning-puzzle---in-general"&gt;The Versioning Puzzle - In General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-versioning-puzzle---nuget-packages-in-particular"&gt;The Versioning Puzzle - NuGet Packages In Particular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-up"&gt;Wrap Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- End Document Outline --&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;I wrote most of this, so I get a bunch of the credit. But it wouldn't be as good if my colleagues at &lt;a href="https://clearmeasure.com/"&gt;Clear Measure&lt;/a&gt; hadn't reviewed my words and provided thoughtful questions and debate. They especially clarified to me that the message of the document should be positive toward packaging, that packaging is a critical and established technique for creating performant, maintainable, and scalable business applications.&lt;/p&gt;
&lt;p&gt;So, thank you Trish Polay and Mike Sigsworth. You rock!&lt;/p&gt;
&lt;p&gt;I don't consider this the last word on this subject. My views will evolve, and I want this article to evolve with them. Stay tuned!&lt;/p&gt;
&lt;h2 id="packages-are-good"&gt;Packages Are Good!&lt;/h2&gt;
&lt;p&gt;This document examines when it makes sense to publish shared dependencies as packages vs maintaining project references. A strong case is made that shared code doesn't &lt;em&gt;have&lt;/em&gt; to become packages. However, this shouldn't be taken as affirming shared project references as &lt;em&gt;desirable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The question is less whether you'll be packaging reusable bits of your code base, and more &lt;em&gt;when&lt;/em&gt;. If you're developing a large enterprise application, breaking it into smaller, independently developed, tested, and deployed services has important benefits. At minimum, this means implementing something like an Onion Architecture informed by Domain-Driven Design. For high-scalability, microservices can become a strong choice.&lt;/p&gt;
&lt;p&gt;There's little doubt that developing independent--yet related--projects is more difficult than a monolith where all the code is available all at once. But difficulty isn't the only factor to consider. A loosely-coupled architecture that's easier to test, faster to deploy, and more resilient to change, pays for itself many times over, even if daily development takes more time or effort.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Beware coding by expedience. Technical debt is sure to quickly accrue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The guidance below is when it makes sense to use packages given how your code is &lt;em&gt;today&lt;/em&gt;. Maybe you're working in a monolith and packaging isn't a good near-term decision. But &lt;em&gt;don't&lt;/em&gt; make that your long-term decision. Really.&lt;/p&gt;
&lt;p&gt;Here are some examples of how you can think about it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We're starting a new code base with shared code. What do we do?&lt;/em&gt;&lt;br /&gt;
Try putting some shared code in its own repo. Figure out how that works.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Maybe our new code base has code that &lt;em&gt;might&lt;/em&gt; be shared, but isn't yet.&lt;/em&gt;&lt;br /&gt;
That's OK Likewise try putting the shared code in its own repo.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We have shared projects. But when we pull them out, developing the independently becomes a headache. What do we do?&lt;/em&gt;&lt;br /&gt;
Reexamine the code. Instead of assuming your projects &lt;em&gt;as they are&lt;/em&gt; should become packages, try extracting code from those projects into good packages.&lt;/p&gt;
&lt;p&gt;As you read below, you may be tempted to stick with your monolith and eschew packages. That's not what I want. I want you to build an environment where you can develop high quality, less complex, loosely-coupled applications quickly. You may not be there today, but that's where you're headed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In all of the above, you won't get it right the first time. Your code will evolve along with your understanding. You'll need help and find out how other shops do it. Expect that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-developers-essential-desire"&gt;The Developer's Essential Desire&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Work on all parts of the application at the same time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-practical-difference-between-external-and-internal-dependencies"&gt;The Practical Difference Between External and Internal Dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;External dependency packages are intended for generic use cases&lt;/li&gt;
&lt;li&gt;Internal dependency projects are for specific applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are dependencies, but who uses them are different. An external package like Json.Net doesn't know who's using it. An internal dependency like CustomerContractService is developed &lt;em&gt;for specific applications&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="the-fundamental-conflicts"&gt;The Fundamental Conflicts&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling says projects can be developed, tested, and deployed independently.&lt;/li&gt;
&lt;li&gt;But related projects benefit from developing, testing, and deploying together.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;External packages don't have specific parent dependencies, so they can be developed independently and reside in their own repository and solution workspace. Internal applications have shared dependencies that need to be developed simultaneously.&lt;/p&gt;
&lt;p&gt;These two development models are at odds.&lt;/p&gt;
&lt;p&gt;For external packages,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parent references the package dependency, which is downloaded from a store&lt;/li&gt;
&lt;li&gt;The package dependency's code isn't changed&lt;/li&gt;
&lt;li&gt;The package version is changed externally, and the parent chooses when to upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For internal dependencies,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parent references the project dependency, which is in a relative path&lt;/li&gt;
&lt;li&gt;Changes to the parent and dependency are committed to source control together&lt;/li&gt;
&lt;li&gt;The package version is changed at the same time for the package and parent&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The two critical concerns are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Internal dependencies have a &lt;strong&gt;fixed relative path&lt;/strong&gt; stored in source control&lt;/li&gt;
&lt;li&gt;A parent expects the dependency to exist when submitted to continuous integration&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id="challenging-assumptions"&gt;Challenging Assumptions&lt;/h2&gt;
&lt;p&gt;There are several reasons a development shop may decide to separate dependencies into packages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clarify the code base by explicitly decoupling the dependency&lt;/li&gt;
&lt;li&gt;Allow greater or easier consumption of the dependency&lt;/li&gt;
&lt;li&gt;Easily share reusable code between projects that live in separate repositories and are worked on by independent teams&lt;/li&gt;
&lt;li&gt;Allow independent projects to choose when to upgrade to new version of shared code&lt;/li&gt;
&lt;li&gt;A belief creating packages is how it &amp;quot;should&amp;quot; be done for separation of concerns, loose coupling, domain-driven design, microserves, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several of these reasons can be challenged, especially the last. Here are some questions to ask yourself and team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imagine the dependency is a third arty open source project. How would that affect our application development?&lt;/li&gt;
&lt;li&gt;If we don't package our dependencies, is our coding easier or harder? Which parts?&lt;/li&gt;
&lt;li&gt;Does an application &lt;em&gt;have&lt;/em&gt; to change the dependency code during feature development? If so, why? If not, how long can the application wait for the package to have the new changes?&lt;/li&gt;
&lt;li&gt;Is committing a relative path a hinderance? Is it real or reactive? Can our group establish a common structure for shared project dependencies?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Seriously, if you don't need packages, don't create them. You can still have loosely-coupled shared code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="a-simple-heuristic"&gt;A Simple Heuristic&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Not all shared dependencies should be packages.&lt;/strong&gt;&lt;/em&gt; That's a critical message to take away from this article. It's easy to &lt;em&gt;think&lt;/em&gt; our development lives would be easier by packaging all our shared dependencies, but that isn't true.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the dependency is usually developed in lockstep with the parent, don't make it a package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For examples, these probably &lt;em&gt;aren't&lt;/em&gt; good choices for packages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A CustomerService assembly&lt;/li&gt;
&lt;li&gt;An Entity Framework repository assembly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Candidates for internal packages have these qualities&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't change major functionality frequently&lt;/li&gt;
&lt;li&gt;Are highly backward-compatible&lt;/li&gt;
&lt;li&gt;Who uses them doesn't have to be known&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some examples. Typically these are customized for the business and are application-agnostic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security libraries. Great choice.&lt;/li&gt;
&lt;li&gt;Type manipulation libraries&lt;/li&gt;
&lt;li&gt;Networking libraries&lt;/li&gt;
&lt;li&gt;Libraries that work across domains&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do I mean by that last one? Let's say you're practicing Domain-Driven Design. You've segregated your domains and created separate repositories per domain. However, you find there are some domain behaviors that apply to all domains &lt;em&gt;and&lt;/em&gt; need to be consistent. Those may be a candidate for a package.&lt;/p&gt;
&lt;h2 id="building-blocks"&gt;Building Blocks&lt;/h2&gt;
&lt;p&gt;These are the building blocks we're dealing with.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source control&lt;/li&gt;
&lt;li&gt;Project vs package references&lt;/li&gt;
&lt;li&gt;Relative paths for project references&lt;/li&gt;
&lt;li&gt;Automated build dependencies&lt;/li&gt;
&lt;li&gt;Dependency versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="a-common-folder-structure"&gt;A Common Folder Structure&lt;/h2&gt;
&lt;p&gt;Since we're assuming software development inside an organization, we can take advantage of that by sharing some conventions. For all the solutions below I recommend the same folder layout. It's not the only way, but is consistent and allows a mono-style to be broken up more easily later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use this general structure&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;|_repos
  |_Repo
    |_docs
    |_src
      |_Project1
        |_Project1.csproj
      |_Project2
        |_Project2.csproj
      |_Solution1.sln
    |_build.ps1
    |_pipeline.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A repo with shared project references doesn't need (but could have) a solution file. It's name is prepended with an underscore so that shared projects are at the top of the development folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;|_repos
  |__SharedRepo
    |_docs
    |src
      |_Project1
      |_Project1
      |_Project2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key to this or other layouts is the predictability of relative paths.&lt;/p&gt;
&lt;h2 id="repositories"&gt;Repositories&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;As long as we stick to the layout, our project references will resolve correctly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's a example of four Git repositories. Notice how, as long as the convention is followed, the repos don't conflict with each other.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;repos
|__SharedRepo1
  |_.git
  |_docs
  |_src
|__SharedRepo2
  |_.git
  |_docs
  |_src
|_AppRepo1
  |_.git
  |_docs
  |_src
    |_Project1
      -&amp;gt; ProjectReference ../../SharedRepo1/src/Project1/Project1.csproj
      -&amp;gt; PackageReference PackageProject1.2.1.5
  |_build.ps1
  |_pipeline.ps1
|_AppRepo2
  |_.git
  |_docs
  |_src
    |_Project1
      -&amp;gt; ProjectReference ../../SharedRepo1/src/Project1/Project1.csproj
      -&amp;gt; ProjectReference ../../SharedRepo2/src/Project3/Project3.csproj
      -&amp;gt; ProjectReference ../../PackageRepo1/src/PackageProject1/PackageProject1.csproj
  |_build.ps1
  |_pipeline.ps1
|_PackageRepo1
  |_.git
  |_docs
  |_src
    |_PackageProject1
    |_PackageProject2
    |_Packages.sln
  |_build.ps1
  |_pipeline.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AppRepo2 Project 1 represents what I'd prefer &lt;em&gt;not&lt;/em&gt; to do: reference a NuGet package project. This is discussed later.&lt;/p&gt;
&lt;h2 id="meta-solution-files"&gt;Meta-Solution Files&lt;/h2&gt;
&lt;p&gt;For convenience, developers may want to have their own solution files that combine other solutions. However, most of these should not be stored in source.&lt;/p&gt;
&lt;p&gt;If you put them in the root of the development folder (e.g. &lt;code&gt;repos&lt;/code&gt;), there's no source control issue. But it may make more sense for them to be in a repository's folder, yet still not version controlled. This is accomplished by adding a line in &lt;code&gt;.gitignore&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;# Ignore root-level solution files
*.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;|_repos
  |_Repo
    |_.git
    |_src
      |_Solution1
      |_Solution2
    |_.gitignore
    |_One-Solution.sln
    |_All-Solutions.sln
    |_CommonApps.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there were a few solution files that were convenient to maintain, then a naming convention could be used instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;# Ignore root-level solution files with this naming
*[Ss]olution.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;One-Solution.sln&lt;/code&gt; and &lt;code&gt;All-Solutions.sln&lt;/code&gt; would be ignored but &lt;code&gt;CommonApps.sln&lt;/code&gt; would be tracked by Git.&lt;/p&gt;
&lt;h2 id="simultaneous-development-with-packages-if-you-must"&gt;Simultaneous Development With Packages, If You Must&lt;/h2&gt;
&lt;p&gt;If you have to develop a package along with its parent, you need to handle a few things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Temporarily or permanently) set a project reference to the package, OR&lt;/li&gt;
&lt;li&gt;Publish the package locally for a code-publish-install development loop (&lt;em&gt;don't do this, it's dumb!&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Local build, and continuous integration, must either
&lt;ul&gt;
&lt;li&gt;Remove the project reference, then deploy the package before building the parent, OR&lt;/li&gt;
&lt;li&gt;Maintain the project reference so the parent builds with the new dependency, and simultaneously build/deploy the package&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET Core project files can have both a PackageReference and ProjectReference entry for the same assembly, but it's not good practice and will lead to headaches.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should &lt;em&gt;not&lt;/em&gt; be bouncing back and forth between project references and package references. Solve the problem that's leading to this anti-pattern&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's assume you have an application that depends on a packaged project, but you're always updating that dependency in lockstep. The real problem is build and deployment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parent project has a project reference to the dependency&lt;/li&gt;
&lt;li&gt;The build script builds the parent app using the project reference, but generates a package for the dependency&lt;/li&gt;
&lt;li&gt;The deployment server deploys the new package independently of the parent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's some PowerShell pseudocode. Your actual implementation will be different!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# MyApp build.ps1

# Run the dependency solution's build script, assuming it's independent
# This should prompt for a new version number, see explanation below
cd ..\..\_SharedRepo\src\CompanySecurityHelpers
\build.ps1

# Build and publish the solution locally, which will build the dependency dll
# with the new version number
cd ..\..\MyRepo\src
dotnet build -o Release MyApp.sln
dotnet publish -o Release --no-build MyApp.sln --output package

# if the dependency's script doesn't create the package, package it here
dotnet pack -o Release --no-build ..\..\_SharedRepo\src\CompanySecurityHelpers --output package
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-versioning-puzzle-in-general"&gt;The Versioning Puzzle - In General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Versioning is hard to fully automate. I think it's a mistake to try.&lt;/li&gt;
&lt;li&gt;Fully automating &lt;em&gt;Patch&lt;/em&gt; versioning is probably OK, though.&lt;/li&gt;
&lt;li&gt;Reduce the friction to allowing developers to commit a new version number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea is simple. Most of the time, you only need to increment the version number when you're ready to generate a pull request. At that time, you should be rebasing your changes on top of the latest mainline release, so you &lt;em&gt;should&lt;/em&gt; have access to the latest package version.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The local build script updates the package version&lt;/li&gt;
&lt;li&gt;The automated build/deployment pipeline fails if the package version is lower than what's in the store&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's pseudo code for asking the developer if the version should be increased. &lt;em&gt;It's the idea, not production code.&lt;/em&gt; This all works best when developers are committing and synchronizing code frequently.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;    $currentVersion = GetCurrentVersion
    Write-Message &amp;quot;Current version is $currentVersion&amp;quot;
    $reply = Read-Host -Prompt 'Do you want to increment the version to publish the package? (y/N)'
    $bumpVersion = $reply -eq 'y'    
    if ($bumpVersion) {
        $level = Read-Host -Prompt 'Which level? (major, minor, patch, [pre])'
        # IncrementVersion takes care of updating the .csproj properties
        $newVersion = IncrementVersion($currentVersion)
        Write-Message &amp;quot;New version will be $newVersion&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A PowerShell script could also read the package store, find the latest package, read its version number, and compare to the package being built. This could run locally to catch a problem before the PR, and would definitely run in the CI/CD server.&lt;/p&gt;
&lt;h2 id="the-versioning-puzzle-nuget-packages-in-particular"&gt;The Versioning Puzzle - NuGet Packages In Particular&lt;/h2&gt;
&lt;p&gt;NuGet packages have a history of dependency resolution challenges. It looks like .NET Core has fixed most issues. To be sure, dependency resolution is hard because a top-level .NET project can only have &lt;em&gt;one&lt;/em&gt; version of a dll when it builds. So, what should happen in the following environment?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyApp installs and uses Json.Net 9.1.0. It depends on features in that version.&lt;/li&gt;
&lt;li&gt;MyApp installs CoolAutoConfigurator, which itself depends on Json.Net 8.3.7.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;MyApp
|_Json.Net 9.1.0
|_CoolAutoConfigurator
  |_Json.Net 8.3.7

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which version of Json.Net should MyApp include in the &lt;code&gt;bin&lt;/code&gt; folder? The latest? What if there were changes that break CoolAutoConfigurator?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generally, in Core, the latest version will be used. It's up to the developer to deal with a breaking change by coding around it or contacting the package developer to request they upgrade.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In .NET Framework, including a package with a specific &lt;em&gt;assembly&lt;/em&gt; version would often cause conflicts that were resolved using special files that would, in effect, say &amp;quot;If the assembly version is this, it's OK to use this other assembly version.&amp;quot;&lt;/p&gt;
&lt;p&gt;Package maintainers found the better way to manage Framework packages was to use specific package versions, but change assembly versions only on major releases. So, Json.Net package 9.2.3 and 9.1.0 would both generate a dll with assembly version 9.0.0. The job of the package developer was to ensure no breaking changes in major versions.&lt;/p&gt;
&lt;p&gt;This matters. .NET Framework and Core resolve which NuGet package to install based on package version, but assemlies (exes and dlls) resolve which &lt;em&gt;other&lt;/em&gt; assemblies to use by assembly version, and assemblies with different versions are not equal. If &lt;code&gt;myapp.exe&lt;/code&gt; and &lt;code&gt;mylibrary1.dll&lt;/code&gt; both use &lt;code&gt;mylibrary2.dll&lt;/code&gt;, but expect different assembly versions, the program will fail.&lt;/p&gt;
&lt;p&gt;Core improves on Framework by being more lenient in accepting assembly versions.&lt;/p&gt;
&lt;p&gt;A further complication is which version numbers appear in the NuGet package store versus which are embedded in the compiled assembly (DLL). Here's a handy map for all you people who want to right click &lt;code&gt;myfile.dll&lt;/code&gt; &amp;gt; Properties &amp;gt; Details.&lt;/p&gt;
&lt;p&gt;I'm focusing on .NET Core here.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.NET Core .csproj property&lt;/th&gt;
&lt;th&gt;.csproj value&lt;/th&gt;
&lt;th&gt;NuGet&lt;/th&gt;
&lt;th&gt;File Property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Package version&lt;/td&gt;
&lt;td&gt;1.0.2-alpha1&lt;/td&gt;
&lt;td&gt;1.0.2-alpha1&lt;/td&gt;
&lt;td&gt;Product version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assembly version&lt;/td&gt;
&lt;td&gt;1.0.0.0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assembly file version&lt;/td&gt;
&lt;td&gt;1.0.0.123&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;File version&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Weird, isn't it? The assembly version isn't visible in file properties, but it's critical for our applications and for the Global Assembly Cache (GAC).&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;In general, organizations need to avoid making the assumption that all their shared project references &lt;em&gt;should&lt;/em&gt; become packages. Instead, they should extract into packages libraries that can be developed independently, and maintain project references to the other shared code.&lt;/p&gt;
&lt;p&gt;Importantly, they should then &lt;em&gt;reduce the shared project references&lt;/em&gt; by ruthlessly reevaulating and refactoring the code.&lt;/p&gt;
&lt;p&gt;Having a convention for code folder layouts makes it much easier to separate code into independent repositories.&lt;/p&gt;
&lt;p&gt;Versioning is more difficult when it's highly automated. Try keeping this in the developer's hands, and create safeguards to accidentally deploying the wrong thing&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, packages do not equal loose coupling, though they can aid in a decoupling effort. Loose coupling has more to do with architecture, modeling, and development practices. An Onion Architecture, Domain-Drive Design, and Test-Driven Devlopment will go a long way to lowering your code's coupling and complexity.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is one area where I may be more wrong than I want to admit. A better way of thinking might be, &amp;quot;how easy can we make versioning without causing conflict?&amp;quot;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sat, 21 Aug 2021 17:29:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/developing_with_project_dependencies_-_when_to_package__when_not_to</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/developing_with_project_dependencies_-_when_to_package__when_not_to</guid>
    </item>
    <item>
      <title>Ability, Capability, Capacity are basically the same</title>
      <description>&lt;p&gt;This is a comment on Jonathan Cutrell's Developer Tea podcast episode &lt;a href="https://developertea.com/episodes/b74a0d8a-d7c8-4752-a696-787d03425760"&gt;Skill-Building Is Not One Dimensional&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Important: I love Jonathan's podcast and consider it one of my most important resources!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So with that said, to Jonathan:&lt;/p&gt;
&lt;p&gt;While I appreciate--and agree with!--the intent of this episode, I really have to take exception to the terminology. It reached the point of redefining--or maybe &amp;quot;un-defining&amp;quot;--words. Ability, capability, and capacity all are synonymous enough to not work well for this subject and distinctions you were trying to make.&lt;/p&gt;
&lt;p&gt;Interestingly to me, capability and capacity (&amp;quot;to take in&amp;quot;) are more closely related than ability (&amp;quot;to hold&amp;quot;) and capability. Here's the skinny from the apex of resources, the Oxford English Dictionary.&lt;/p&gt;
&lt;h2 id="able-1382"&gt;Able, 1382&lt;/h2&gt;
&lt;p&gt;&amp;quot;able, adj., adv., and n.&amp;quot;. OED Online. June 2021. Oxford University Press. &lt;a href="https://www-oed-com.research.cincinnatilibrary.org/view/Entry/377?rskey=TAJpgt&amp;amp;result=1&amp;amp;isAdvanced=false"&gt;https://www-oed-com.research.cincinnatilibrary.org/view/Entry/377?rskey=TAJpgt&amp;amp;result=1&amp;amp;isAdvanced=false&lt;/a&gt; (accessed July 18, 2021).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Etymology&lt;/strong&gt;&lt;br /&gt;
&amp;lt; Anglo-Norman abil, abill, Anglo-Norman and Middle French able, habile, hable, Middle French abile, abille, habille (second half of the 12th cent. in Anglo-Norman as haiable ; end of the 12th cent. in Old French in a text from Lorraine as aule , showing vocalization of medial -b- ; French habile ) (of a person) able-bodied, muscular, powerful (second half of the 12th cent. in Anglo-Norman), (of an inanimate object or fact) suitable, fit, appropriate (second half of the 13th cent.), (of a person) competent, expert (end of the 13th cent.), legally capable, entitled, or qualified (end of the 13th cent. or earlier in Anglo-Norman, frequently with reference to ability to inherit; this use is apparently not paralleled in continental French until later (1390 with reference to ability to sue, 1461 with reference to ability to inherit)), (of a ship) seaworthy (c1440 or earlier in Anglo-Norman), (of a person) intelligent, clever (1555) &amp;lt; classical Latin habilis easy to handle, easily dealt with, suitable, fit for a purpose, in post-classical Latin also vigorous (5th cent.), worthy (1448 in a British source) &amp;lt; habēre to hold (see habit n.) + -ilis -il suffix. In senses A. 3a and A. 4 (which are apparently not paralleled in French) after classical Latin habilis. Compare Old Occitan abil (14th cent.), Catalan hàbil (1490 as †àbil ), Spanish hábil (late 14th cent.; also †abil ), Portuguese hábil (15th cent. as †abile , †aville ), Italian abile (end of the 13th cent. or earlier; also †habile ). Compare later habile adj. 4 and see discussion at that entry, and also unable adj. and later inhabile adj.&lt;/p&gt;
&lt;p&gt;Abil, Habil, &amp;quot;to hold&amp;quot;, suitable, fit&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt; &lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;&lt;p&gt;In predicative use, with for (in early use also with to). Capable of, having sufficient strength or power for; ready for, fit to cope with. Now chiefly Irish English.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In predicative use, with infinitive or without complement: having the means, capacity, or qualifications to do something; having sufficient power; in such a position that a particular action is possible; worthy, qualified, competent, capable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since very late Middle English or early modern English, to be able (to) has been used (with all tenses of to be) as an alternative to or replacement for can and could (see can v.1 II.) in contexts relating to ability and possibility, and is now chiefly so used. In standard English since that period can has lacked an infinitive, present participle, past participle, and gerund; to be able (to) is used to replace this verb in compounds with other auxiliaries (especially supplying a future tense and perfect tenses) and in non-finite constructions. Occurrence of a passive verb in the to-infinitive is relatively unusual, being generally limited to contexts in which to be able conveys potentiality, permission, or likelihood rather than active power. See also unable adj. 1a.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now Scottish, Irish English (northern), and Newfoundland.&lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;&lt;p&gt;Of a person, the body, etc.: having general physical strength; vigorous, powerful, muscular. Cf. able-bodied adj.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of a thing (esp. a boat): strong, substantial, well built.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of a person, an achievement, etc.: having or showing general intelligence, skill, or aptitude; talented, clever. Cf. ability n. 6, habile adj. 4.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="capable-1571"&gt;Capable, 1571&lt;/h2&gt;
&lt;p&gt;&amp;quot;capable, adj. and n.&amp;quot;. OED Online. June 2021. Oxford University Press. &lt;a href="https://www-oed-com.research.cincinnatilibrary.org/view/Entry/27354?redirectedFrom=capable"&gt;https://www-oed-com.research.cincinnatilibrary.org/view/Entry/27354?redirectedFrom=capable&lt;/a&gt; (accessed July 18, 2021).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Etymology&lt;/strong&gt;&lt;br /&gt;
&amp;lt; French capable (= Provençal capable), &amp;lt; late Latin capābil-em (in early theological use: see Du Cange), irregularly &amp;lt; Latin capĕre to take. The regular formation would have been capibilis; perhaps capābilis was influenced by capax: Beda Lib. de Orthogr. has ‘capax, qui facile capit; capabilis, qui facile capitur’ (Du Cange); so Augustine, but Cassiodorus c575 has it in the active sense = capax, as in the modern languages.&lt;/p&gt;
&lt;p&gt;To take&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt; &lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;Able to take in, receive, contain, or hold; having room or capacity for. Const. of, for, or infinitive. Obsolete.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt; &lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;absol. Able to hold much; roomy, capacious.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Able or fit to receive and be affected by; open to, susceptible:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Able to be affected by; of a nature, or in a condition, to allow or admit of; admitting; susceptible. Const. of, also absol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt; &lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;Having the needful capacity, power, or fitness for (some specified purpose or activity). Const. of; formerly also infinitive.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="capacity-1481"&gt;Capacity, 1481&lt;/h2&gt;
&lt;p&gt;&amp;quot;capacity, n.&amp;quot;. OED Online. June 2021. Oxford University Press. &lt;a href="https://www-oed-com.research.cincinnatilibrary.org/view/Entry/27368?redirectedFrom=capacity"&gt;https://www-oed-com.research.cincinnatilibrary.org/view/Entry/27368?redirectedFrom=capacity&lt;/a&gt; (accessed July 18, 2021).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Etymology&lt;/strong&gt;&lt;br /&gt;
15th cent. capacyte , &amp;lt; French capacité , &amp;lt; Latin capācitāt-em , noun of state &amp;lt; capāx , capāci- able to take in:&lt;/p&gt;
&lt;p&gt;Able to take in&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt; &lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;&lt;p&gt;Ability to receive or contain; holding power. Obsolete (in general sense).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;capacity for heat, capacity for moisture, etc.: the power of absorbing heat, etc. capacity of a conductor: see quot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The power of an apparatus to store static electricity; also = capacitance n.   Also attributive, denoting an apparatus which gives additional capacity, as capacity cage, capacity earth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The largest audience that a place of entertainment can hold; a situation in which a theatre, cinema, etc., is full; spec. in to capacity: with all available room occupied; hence in general use, full; to the limit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In industry: the ability to produce; equivalent to ‘full capacity’.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mental or intellectual receiving power; ability to grasp or take in impressions, ideas, knowledge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Active power or force of mind; mental ability, talent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gen. The power, ability, or faculty for anything in particular. Constr. of, for, or infinitive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The quality or condition of admitting or being open to action or treatment; capability, possibility.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      <pubDate>Sat, 7 Aug 2021 15:38:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/ability_capability_capacity_are_basically_the_same</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/ability_capability_capacity_are_basically_the_same</guid>
    </item>
    <item>
      <title>Solutions to Error "Unable to connect to Web Server IIS Express"</title>
      <description>&lt;h2 id="issue"&gt;Issue&lt;/h2&gt;
&lt;p&gt;IIS Express will occasionally not be able to start on a particular port with this error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unable to connect to Web Server IIS Express&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In some cases, it's because another app is using that port. But often the reason is that Hyper-V has reserved one or more of the ports. To see which ports are currently excluded/reserved, run this command.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: all commands are in PowerShell 7 and should be run as Administrator&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;netsh int ipv4 show excludedportrange protocol=tcp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result may look something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Start Port    End Port
----------    --------
     50000       50059     *
     54675       54774
     54840       54939
     54940       55039
     55040       55139
     55140       55239
     55329       55428
     55429       55528

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As far as I can tell, Hyper-V doesn't have a known port range it will attempt to use and work around. So, the solution is to exclude the individual ports your projects require.&lt;/p&gt;
&lt;p&gt;You can check which ports the apps use by looking at the &lt;code&gt;launchSettings.json&lt;/code&gt; files (assuming .NET Core). Be sure to include both the HTTP and SSL ports. Let's say, across all your projects, IIS Express will need to run on ports 44431,44435,54700,54701.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disable Hyper-V
&lt;pre&gt;&lt;code class="language-powershell"&gt;dism.exe /Online /Disable-Feature:Microsoft-Hyper-V
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Restart when prompted&lt;/li&gt;
&lt;li&gt;Run this script, substituting your ports
&lt;pre&gt;&lt;code class="language-powershell"&gt;$ports = 44431,44435,54700,54701

foreach ($port in $ports) { 
    netsh int ipv4 add excludedportrange protocol=tcp startport=$port numberofports=1 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Reenable Hyper-V
&lt;pre&gt;&lt;code class="language-powershell"&gt;dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Restart when prompted&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: The process cannot access the file because it is being used by another process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you get this error when running &lt;code&gt;netsh&lt;/code&gt; to exclude the port, the port is already excluded. It's a confusing error message.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows could not start the Hyper-V Virtual Machine Management service on Local Computer.
Error 0x8007000e: Not enough memory resources are available to complete this operation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you attempt to start the Hyper-V Virtual Machine Management service and get this error, it can be caused if the Hyper-V Host Compute Service is Disabled. Open Services and set that service as Manual.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dandini.wordpress.com/2019/07/15/administered-port-exclusions-blocking-high-ports/"&gt;Administered Port Exclusions blocking high ports – The 'almost not worth having' blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/for-win/issues/3171"&gt;Unable to bind ports: Docker-for-Windows &amp;amp; Hyper-V excluding but not using important port ranges · Issue #3171 · docker/for-win&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vembu.com/blog/hyper-v-wont-start/"&gt;What to Do When Hyper-V Won’t Start - vembu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/48478869/cannot-bind-to-some-ports-due-to-permission-denied/54727281#54727281"&gt;windows - Cannot bind to some ports due to permission denied - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/blogs/whereismysolution/how-to-use-reserved-port-in-nettcpbinding-and-basichttpbinding-in-a-wcf-application"&gt;How to use reserved port in netTcpBinding and basicHttpBinding in a WCF Application | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/strayge/481a77d31a94e133a76662877b1a90ca"&gt;windows 10, port reserved for HyperV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-US/troubleshoot/windows-server/networking/default-dynamic-port-range-tcpip-chang"&gt;The default dynamic port range for TCP/IP has changed in Windows Vista and in Windows Server 2008 - Windows Server | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://superuser.com/questions/1192492/how-to-remove-a-hyper-v-virtual-ethernet-switch"&gt;windows 10 - How to remove a Hyper-V virtual Ethernet switch - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://social.technet.microsoft.com/Forums/en-US/900298bd-4a86-4c9d-9950-11f0c050fa2f/hyperv-manager-unable-to-connect-to-server-quotlocal-computerquot"&gt;Hyper-V Manager unable to connect to server &amp;quot;Local computer&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/WSL/issues/5240"&gt;Error: 0x8007000e Not enough memory resources are available to complete this operation. · Issue #5240 · microsoft/WSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/reference/hyper-v-requirements"&gt;Windows 10 Hyper-V System Requirements | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/1045527/how-do-i-find-out-why-certain-ports-are-excluded-and-delete-the-exclusion"&gt;windows - How do I find out why certain ports are excluded and delete the exclusion? - Server Fault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/58216537/what-is-administered-port-exclusions-in-windows-10"&gt;hyper v - What is Administered port exclusions in windows 10? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 4 Aug 2021 10:00:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/solutions_to_error__unable_to_connect_to_web_server_iis_express</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/solutions_to_error__unable_to_connect_to_web_server_iis_express</guid>
    </item>
    <item>
      <title>Configuring Iterations for Teams in Azure DevOps</title>
      <description>&lt;p&gt;I don't know how much guidance Microsoft gives on creating Iterations. This is my approach.&lt;/p&gt;
&lt;h2 id="the-basics"&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Here's the Azure DevOps structure, regardless of usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|_Process [Work items defined]
  |_Project(s) [Iterations defined]
    |_Team(s) [Board defined, Iterations selected]
      |_Area(s) 
        |_Work Item(s) [assigned to Area and Iteration]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There's always a top-level &amp;quot;iteration&amp;quot; with the name of the project, which can't be changed. This is confusing because everything in the iteration tree is called an iteration, but in fact you should think of the tree as folders of iterations.&lt;/p&gt;
&lt;p&gt;You configure iterations at the project level (Project Settings &amp;gt; Boards &amp;gt; Project configuration). However, a Team &lt;em&gt;chooses&lt;/em&gt; which iterations it uses. In other words, adding iterations to the project does &lt;em&gt;not&lt;/em&gt; add them to all teams.&lt;/p&gt;
&lt;p&gt;While initially confusing, this gives a lot of flexiblity in the project. Everyone can be on the same sprint cycle, or individual teams can be on their own cycle.&lt;/p&gt;
&lt;h2 id="the-most-common-configuration-i-recommend"&gt;The Most Common Configuration I Recommend&lt;/h2&gt;
&lt;p&gt;Here's how I'd set up a project that has one or two teams, which &lt;em&gt;should&lt;/em&gt; be all that are on an Agile-based project anyway.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice I do &lt;em&gt;not&lt;/em&gt; use the root level for the product backlog. Unfortunately, Microsoft doesn't help enough in setting this up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Baskets-R-Us Website
|_Product Backlog
  |_Sprint 2021-04-16
  |_Sprint 2021-04-30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why &amp;quot;product backlog&amp;quot;? In Team configuration &amp;gt; Iterations, there are two settings: Default iteration, Backlog Iteration.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/configuring_iterations_for_teams_in_azure_devops/images/sc01.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Default Iteration means &amp;quot;when I create a new work item, which iteration is it assigned to?&amp;quot; The default is @CurrentIteration. &lt;em&gt;This is wrong!&lt;/em&gt; New work items should &lt;em&gt;not&lt;/em&gt; be automatically added to the current sprint: that's contrary to Scrum thinking. Instead, I set Default iteration to the team's product backlog iteration.&lt;/p&gt;
&lt;p&gt;Likewise, Backlog iteration means &amp;quot;When we look at our backlog, which iteration is at the root?&amp;quot; That should be, of course, the product backlog iteration. That's why I keep the naming clean.&lt;/p&gt;
&lt;p&gt;Both teams on this project would use the same product backlog and iterations. The teams would have &lt;em&gt;independent&lt;/em&gt; boards and work items because by default a team has its own area.&lt;/p&gt;
&lt;p&gt;The result is that, in sprint planning, everyone would work from the same product backlog. Assuming Scrum, the project (product) should have a single Product Owner and Scrum Master shared by the two teams. When work items are assigned to iterations, they're also assigned to the team's area, allowing each team to filter for its work items in its boards.&lt;/p&gt;
&lt;h2 id="naming-iterations"&gt;Naming Iterations&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Where organizations often go astray is naming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's one way iterations might be organized for multiple teams. Again, notice my naming.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Baskets-R-Us Website &amp;lt;== root level folder
|_ eCommerce Product Backlog
  |_2021-04-07
  |_2021-04-30
|_Social Media Product Backlog
  |_2021-04 05-16
  |_2021-04 19-30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the teams within the project are working very independently. They don't share a backlog, instead each team maintains its own.&lt;/p&gt;
&lt;h2 id="yet-another-approach"&gt;Yet Another Approach&lt;/h2&gt;
&lt;p&gt;Here's another--arguably better--way to organize multiple teams on a single Scrum-based project where the teams want to use their own sprint cycles. On a single project with just a couple of team. That's probably not a good idea. Keep the teams working as closely together as possible &lt;em&gt;on the same project&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This rule of thumb doesn't apply on teams across projects, who shouldn't be constrained in how they independently work. They not only should have separate DevOps projects, but should be allowed to have their own process template.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Baskets-R-Us Website &amp;lt;== root level folder
|_Product Backlog
  |_ eCommerce Sprints
    |_2021-04-07
    |_2021-04-30
|_Social Media Sprints
    |_2021-04 05-16
    |_2021-04 19-30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given this organization, both teams would set their default and backlog iterations to &amp;quot;Product Backlog.&amp;quot; The clear naming will help them find their iterations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The fact that it's harder to work with the sprints might be a clue that the teams should share an iteration cycle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-wrong-way"&gt;The Wrong Way&lt;/h2&gt;
&lt;p&gt;Some organizations (believe) they want all employees and teams to use the same process, and even share the same backlog and board. This &lt;em&gt;can&lt;/em&gt; be done in Azure DevOps, but frankly I think it's anti-Agile, anti-productive, and there's plenty of evidence to back me up.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Really, don't do this. It encourages a top-down, tightly-coupled, bureaucratic culture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you're determined, here's how you might do it by taking advantage of the little-used (for good reason) Areas feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using multiple Areas should be reserved for really complex projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember, work items are assigned to an Area and Iteration. What we're doing here is inverting (and subverting) the Azure DevOps structure by turning Areas into Projects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|_MRU Process [THE Monsters-R-Us Process]
  |_Monsters-R-Us Project [The ONLY project in the entire company]
    |_MRU Team [EVERYONE including vendors. Iterations defined here. Backlog/Board defined here]
      |_Area - MRU Website
        |_Work Item(s) [assigned to Area and Iteration]
      |_Area - MRU Mobile Applications
        |_Work Item(s)
      |_Area - MRU Developer Experience
        |_Work Item(s)
      |_Area - Internal DevOps Improvements
        |_Work Item(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this allows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any employee can be assigned work in any area&lt;/li&gt;
&lt;li&gt;All work items are in a single, monolithic backlog that can be filtered by area&lt;/li&gt;
&lt;li&gt;Single, monolithic board that can be filtered by area or person&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm sure someone will say Tags can be used for categorization and filtering. That's true, but adds complication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Azure DevOps is a quite capable suite of features that will work for many types of organizations. &lt;em&gt;Because&lt;/em&gt; of that, it can be challenging to understand how to configure well.&lt;/p&gt;
&lt;p&gt;Hopefully, this helps you along toward your own success.&lt;/p&gt;
</description>
      <pubDate>Sun, 11 Jul 2021 14:59:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/configuring_iterations_for_teams_in_azure_devops</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/configuring_iterations_for_teams_in_azure_devops</guid>
    </item>
    <item>
      <title>Basic Daily Git Commands, including "Rebase is Good"</title>
      <description>&lt;p&gt;These are the commands I use on a daily basis. Hopefully this helps explain and put to rest the fear of &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have aliases for these that mostly came from &lt;a href="https://haacked.com/archive/2019/02/14/including-git-aliases/"&gt;Phil Haack&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The below commands assume your mainline branch is named 'main'. Adjust accordingly if it's called 'master,' 'trunk', etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# Start day getting latest
git checkout main
# Create a new branch
git checkout -b features/my-feature
# work for a half hour
git add -A
git commit -m &amp;quot;Did some work&amp;quot;
# push branch to remote in case I die
git push --set-upstream origin features/my-feature
# work another couple of hours, occasionally syncing to remote
# (one liner)
git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;Did some other work&amp;quot;
git push
# ready to submit PR. I want my code to be *after* the latest, so . . .
git checkout main
git pull [gets latest changes]
git checkout feature/my-feature
git rebase main
# deal with any merge conflicts, then squash and force push
git rebase main --interactive [I squash all commits into one]
git push --force
# I'm done. Create the pull request.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="qa"&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Isn't rebase bad and you should never ever do it because everyone says so?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No. Rebase is good and you're listening to the wrong people. It's what significantly reduces merge conflicts in your pull requests. What's bad is not understanding what rebase does and what problems it could cause.&lt;/p&gt;
&lt;p&gt;When rebasing onto main, you're saying, &amp;quot;If I merge my changes into main now, they'll be in the middle of what's already committed. I want them at the end. So take my changes and apply them to the end of main &lt;em&gt;as if I just made them&lt;/em&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;From Git's point of view, these are new commits, so they get new file hashes. That's why you have to force-push them, &lt;em&gt;overwriting&lt;/em&gt; the remote branch.&lt;/p&gt;
&lt;p&gt;This is OK as long as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You &lt;em&gt;do not ever&lt;/em&gt; rebase main onto a branch and then push main.&lt;/li&gt;
&lt;li&gt;If someone else is working on your branch with you, you tell them to &lt;code&gt;git pull --force&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first one you should never, ever even think of doing. The second one is rare because developers tend to work indepedently on short-lived branches.&lt;/p&gt;
&lt;p&gt;When it comes to merge vs rebase, the directions of change are always:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Merge from branch into main. Rebase branch onto main.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you &amp;quot;merge from&amp;quot;, you start in main. When you &amp;quot;rebase onto&amp;quot; you start in the branch.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What about merge conflicts?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That's a whole other topic. What matters is using a good diff/merge tool. The one I use, &lt;a href="https://download.kde.org/stable/kdiff3/"&gt;KDiff3&lt;/a&gt;, is really old but I like it best.&lt;/p&gt;
</description>
      <pubDate>Thu, 1 Jul 2021 13:28:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/basic_daily_git_commands__including_rebase_is_good</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/basic_daily_git_commands__including_rebase_is_good</guid>
    </item>
    <item>
      <title>Professional Development Fundamentals</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/professional_development_fundamentals/images/pro-dev-fun-logo.png" alt="" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The one thing missing from this guide right now is tracking work in an Agile way. I plan to add that later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="contents"&gt;Contents&lt;/h2&gt;
&lt;!-- Start Document Outline --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#local-development-cycle"&gt;Local Development Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pull-requests-and-code-reviews"&gt;Pull Requests and Code Reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#continuous-integration"&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aspects-of-quality-code"&gt;Aspects of quality code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capabilities-of-high-performing-software-teams"&gt;Capabilities of high-performing software teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-four-key-metrics"&gt;The Four Key Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- End Document Outline --&gt;
&lt;h2 id="local-development-cycle"&gt;Local Development Cycle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Release small often&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Pull and rebase latest code from mainline.&lt;/li&gt;
&lt;li&gt;Work from a short-lived feature branch.&lt;/li&gt;
&lt;li&gt;Unit test, frequently commit locally, push branch when it passes tests.&lt;/li&gt;
&lt;li&gt;Integrate latest mainline locally, run private build/tests, push.&lt;/li&gt;
&lt;li&gt;Final push, create a pull request.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/professional_development_fundamentals/images/local-development-cycle.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="pull-requests-and-code-reviews"&gt;Pull Requests and Code Reviews&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;No unreviewed code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Another developer reviews the PR (code review)&lt;/li&gt;
&lt;li&gt;PR merges into mainline&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="continuous-integration"&gt;Continuous Integration&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Build once, deploy-to-many&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CI Server is triggered by source control changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; Triggered by mainline and feature branch changes. Build in clean environment, run unit tests, create deployment package.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TDD&lt;/strong&gt;  Always runs and fully automated. Environment is created and deployed to from scratch. Automated integration tests run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UAT&lt;/strong&gt;  Runs if mainline changes and TDD succeeds. Existing environments deployed to. Some automated testing. Users perform acceptance tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prod&lt;/strong&gt; Runs if UAT succeeds and deployment is approved. Existing environment deployed to. Some automated smoke testing. Can require approval.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/professional_development_fundamentals/images/ci-basic.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="aspects-of-quality-code"&gt;Aspects of quality code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Code is never finished&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Loosely coupled&lt;/strong&gt; Dependencies are reduced. See SOLID, DRY, YAGNI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complexity reduced&lt;/strong&gt; Packages, classes, methods have one purpose.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tested early&lt;/strong&gt; Unit testing reduces defects and improves architecture. See TDD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reviewed&lt;/strong&gt; Code reviews improve quality and share knowledge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clearly named&lt;/strong&gt; Naming (of classes, methods, variables) is hard and important.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-documenting&lt;/strong&gt; &lt;em&gt;What&lt;/em&gt; the code does should be obvious. Comment &lt;em&gt;why&lt;/em&gt; the code does what it does, when not obvious.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Properly versioned&lt;/strong&gt; Harder than it seems. See Semantic Versioning and your language's package peculiarities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintanable and replaceable&lt;/strong&gt; No code lasts forever. Design for change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="capabilities-of-high-performing-software-teams"&gt;Capabilities of high-performing software teams&lt;/h2&gt;
&lt;p&gt;A couple of principles can guide making lots of better decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Reduce friction to doing the right thing&lt;/li&gt;
&lt;li&gt;Do all the steps&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are the 24 capabilities of high-performing software organizations from the DORA group's meticulous, evidence-based research.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability (and desired result)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CONTINUOUS DELIVERY CAPABILITIES&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01 Version control&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;02 Deployment automation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;03 Continuous integration (CI)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;04 Trunk-based development&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;05 Test automation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06 Test data management&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;07 Shift left on security (put first, make easy)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;08 Continuous delivery (CD)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ARCHITECTURE CAPABILITIES&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;09 Loosely coupled architecture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10 Empowered teams&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PRODUCT AND PROCESS CAPABILITIES&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11 Customer feedback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12 Value stream mapping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13 Working in small batches&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14 Team experimentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LEAN MANAGEMENT AND MONITORING CAPABILITIES&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15 Change approval processes (lightweight, not external)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16 Monitoring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17 Proactive notification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18 WIP limits (limit work-in-progress)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19 Visualizing work (public Kanban boards)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CULTURAL CAPABILITIES&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20 Westrum organizational culture (Generative)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21 Supporting learning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22 Collaboration among teams&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23 Job satisfaction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24 Transformational leadership&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="the-four-key-metrics"&gt;The Four Key Metrics&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How do you know you're succeeding?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, from the DORA group.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment Frequency&lt;/strong&gt; How often an organization successfully releases to production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lead Time for Changes&lt;/strong&gt; The amount of time it takes a commit to get into production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change Failure Rate&lt;/strong&gt; The percentage of deployments causing a failure in production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to Restore Service&lt;/strong&gt; How long it takes an organization to recover from a failure in production&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY (Don't repeat yourself)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI (You aren't going to need it)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD (Test-Driven Development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;Semantic Versioning 2.0.0 | Semantic Versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/devops/"&gt;DevOps Research and Assessment (DORA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance"&gt;Are you an Elite DevOps performer? Find out with the Four Keys Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM"&gt;Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.karlton.org/2017/12/naming-things-hard/"&gt;Naming things is hard | dk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Code_review"&gt;Code review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Meltdown-Systems-Fail-What-About-ebook/dp/B073NNNMBB"&gt;Meltdown: What Plane Crashes, Oil Spills, and Dumb Business Decisions Can Teach Us About How to Succeed at Work and at Homee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 24 May 2021 20:42:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/professional_development_fundamentals</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/professional_development_fundamentals</guid>
    </item>
    <item>
      <title>Unit Testing is Part of a Developer's Job Description</title>
      <description>&lt;p&gt;The debate over unit testing's value is over. Twenty-plus years of evidence in software development, and decades more than that in other fields, proves that inspecting for quality early is superior to doing it late.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whether to unit test shouldn't even be a discussion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's a short and sweet slide deck on the subject.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description/images/Unit%20Testing%20Slide%20Deck.pptx"&gt;Unit Testing Slide Deck PowerPoint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description/images/Slide1.PNG" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description/images/Slide2.PNG" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description/images/Slide3.PNG" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 22 May 2021 10:51:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/unit_testing_is_part_of_a_developers_job_description</guid>
    </item>
    <item>
      <title>Graphic - Git Merge vs Rebase</title>
      <description>&lt;p&gt;I've struggled to find a graphic of merge vs rebase that made sense to me, so I created one.&lt;/p&gt;
&lt;p&gt;The way I think of rebase is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm making it seem to the other branch like I just did this work. I'm putting my work last.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/graphic_-_git_merge_vs_rebase/images/git-merge-vs-rebase.svg"&gt;SVG File&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.softwaremeadows.com/posts/graphic_-_git_merge_vs_rebase/images/git-merge-vs-rebase.png"&gt;PNG File&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/graphic_-_git_merge_vs_rebase/images/git-merge-vs-rebase.png" alt="" /&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 18 May 2021 16:22:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/graphic_-_git_merge_vs_rebase</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/graphic_-_git_merge_vs_rebase</guid>
    </item>
    <item>
      <title>Scrum in Azure DevOps - A simpler (custom) process</title>
      <description>&lt;p&gt;Series Parts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/"&gt;A Simple Intro To Scrum In Azure Devops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/"&gt;Scrum In Azure Devops - A Simpler (Custom) Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_the_story_board_is_your_process_heart/"&gt;Scrum In Azure Devops - The Story Board is your process heart&lt;/a&gt; COMING SOON!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;The default Azure DevOps Scrum process is good, but I think it adds some unnecessary complication. Below I'll walk through inheriting from and modifying that process. I'm building on the work in my  post &lt;a href="https://www.softwaremeadows.com/posts/a_simple_intro_to_scrum_in_azure_devops/"&gt;A Simple Intro to Scrum in Azure DevOps&lt;/a&gt;, so you should start there if you need to.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lots of what's below is my opinion, so take it for what it's worth. But don't discount it, that's mean.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the-framework"&gt;The Framework&lt;/h2&gt;
&lt;p&gt;In my experience, when Developers, Scrum Masters, and Product Owners get their hands on electronic project management software, they add and add to what's already there. This is usually a mistake. Instead, pare down to the simplest thing that works, and only add features when needed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an aside, the other thing organizations do is try to enforce a single process on all teams. This is not Agile, because it removes team autonomy, self-organization, and effectiveness. The usual reason given is to make reporting across teams easier. That gives too much weight to upper management control. Instead, ask Developers to help figure out how to deliver cross-team reports. While you're at it, see if you can pare down those reports, too. Ask, &amp;quot;How is this report delivering user value?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One way to find the simplest thing that works is imagine--or put--it on paper. Here's all we're really trying to capture.&lt;/p&gt;
&lt;p&gt;The work item structure is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Feature
|_Story
  |_Task
|_Bug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stories and bugs move through a board.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/kanban-board.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;A story or bug card--sticky note version!--might look like this and has all the relevent info plus pointers to more detail.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc21.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Try to keep your electronic version that simple.&lt;/p&gt;
&lt;h2 id="a-new-process"&gt;A New Process&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open Azure DevOps and open the Organization Settings &amp;gt; Boards &amp;gt; Process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Scrum &amp;gt; Create inherited process, and name it SimpleScrum&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc01.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc02.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the SimpleScrum process. Under Work item types, we already have an essential set of types. Let's start by creating a work item type named Story instead of Product Backlog Item (PBI).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No, you can't rename an inherited process work item type. I hate this, and so do you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the PBI work item type &amp;gt; States, and hide the Committed state.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc05.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the original tab, choose New work item type and name it Story&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc03.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Layout, add and update the fields to look like this. In one case, you're renaming Description to Value (orange), in others you're using an existing field (green), and in still others it's a new field (red).&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc04.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under States, add two new states: Active in the In Progress category and Removed in the Removed category, and remove Committed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can only remove an inherited state that's been hidden.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc18.png" alt="" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Rules, create the following rule.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: Assign Active&lt;/li&gt;
&lt;li&gt;When: A work item stage changes to . . . Active&lt;/li&gt;
&lt;li&gt;Then: Use the current user to set the value of . . . Assigned To&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc19.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return to the Work Item Types and disable Product Backlog Item&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Only disable PBI if you are &lt;em&gt;not&lt;/em&gt; going to apply the new process to an existing project. If you are, leave PBI enabled so that you can change existing work items from PBI to Story.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Bug and make these changes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide System Info, Acceptance Criteria, Priority, and Activity.&lt;/li&gt;
&lt;li&gt;Optional: I hide the Build fields&lt;/li&gt;
&lt;li&gt;Add More Info, Developer Notes, Testing Notes, Reported By, and Blocked
&lt;blockquote&gt;
&lt;p&gt;Any fields added to Story will be in the &amp;quot;Use existing field&amp;quot; dropdown.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc06.png" alt="" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Treat Bugs as a defects reported by production users. Why? Because it makes it much easier to track Bug fix cycle time. See below for tracking defects during development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under States, add Active to In Progress, hide Approved and Committed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Rules, create the same Assign Active rule as in Story&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pre-release-vs-post-release-defectsbugs"&gt;Pre-Release vs Post-Release Defects/Bugs&lt;/h2&gt;
&lt;p&gt;If your shop includes quality assurance, user-acceptance testing, or other non-unit testing, you should track your defects separately from Bugs. If those roles are in your team, then I like communicating those defects at the same level as Tasks. If they're outside the team, then I recommend tracking them at the same level as Bugs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new work item type named PreRelease Defect with the same fields, states, and rule as Bug. Hide Description. Choose an icon you like.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc07.png" alt="" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, the work items are ready!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc08.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="backlog-levels"&gt;Backlog Levels&lt;/h2&gt;
&lt;p&gt;These changes make your new work item type availabe in the New item dropdowns on boards and backlogs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open SimpleSrum &amp;gt; Backlog levels&lt;/li&gt;
&lt;li&gt;Edit Backlog items and add Story and PreRelease Defect. Set Default work item type to Story&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc15.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="use-the-process"&gt;Use the Process&lt;/h2&gt;
&lt;p&gt;You can create a new Project using the SimpleScrum process, but you can also apply the process to an existing project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;br /&gt;
Applying a process does come with risks if there are non-matching fields. Be sure you read the documentation!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm going to apply the process to Baskets-R-Us (from Part 1 of the series) so you see what's involved and why starting with a new project might be better.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open All Process and click the Scurm Team Projects link&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc09.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For BRUW, select Change Process and choose SimpleScrum&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc10.png" alt="" /&gt;&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc11.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix-up-the-work-items"&gt;Fix up the work items&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the BRUW project &amp;gt; Queries &amp;gt; New Query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return all work items&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc14.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Column Options and add State and Reason. Sort by Work Item Type and State&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select all Product Backlog Items, right-click &amp;gt; Change Type, select Story.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Commmitted items, right-click &amp;gt; Edit, change State to Active&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Approved items, right-click &amp;gt; Edit, change State to New&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save items&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may have other changes to make to your work items.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix-up-the-story-board"&gt;Fix up the Story Board&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Story Board customizations are at the Team level&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the BRUW project &amp;gt; Boards. I was greeted with this message:
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc12.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fine, I'll Correct this now. It's the board's column settings that need changing, which is what I want to do anyway!&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc13.png" alt="" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;You can't delete any columns that have stories in them until you move the stories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Keep all existing columns. Rename Ready for QA to Ready for Test, QA to Test. Map each column's state to Active for now. Save.&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc16.png" alt="" /&gt;&lt;/li&gt;
&lt;li&gt;Clear all filters. Move stories out of Approved, Ready for Dev and Ready for Release&lt;/li&gt;
&lt;li&gt;Remove columns Approved,  Ready for Dev and Ready for Release.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the board's Settings &amp;gt; Styles, add a styling rule&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: Blocked&lt;/li&gt;
&lt;li&gt;Card color: Red&lt;/li&gt;
&lt;li&gt;Rule criteria: Blocked = Yes&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc20.png" alt="" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If a Story's Blocked field is set to Yes, the card will show red.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process/images/sc17.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="fix-up-the-task-board"&gt;Fix up the Task Board&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Task Board customizations are at the Team level&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Open the Task Board (Sprints) Settings&lt;/li&gt;
&lt;li&gt;In Fields &amp;gt; Story, add a field to always show Parent. This lets you see a story's Feature if it has one.&lt;/li&gt;
&lt;li&gt;Add a Styles rule for Blocked as done above&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-about-work-item-templates"&gt;What about work item templates?&lt;/h2&gt;
&lt;p&gt;Azure DevOps supports templates, and I wish they were useful. Maybe they will be for you, but what I want is to assign a default template to a work item for my team. For example, have a Bug template with starter info in Repro Steps that's automatically applied on any new Bug.&lt;/p&gt;
&lt;p&gt;Until that happens, I'll leave you with Microsoft's documentation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/boards/backlogs/work-item-template?view=azure-devops&amp;amp;tabs=browser"&gt;Use work item templates to update stories &amp;amp; more - Azure Boards | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;This post sets up a good, basic process. A key aspect is that work items at the same level are structured almost the same. This helps reduce cognitive friction switching from a Bug to a PreRelease Defect to a Story, and emphasizes that the primary difference between them is their name.&lt;/p&gt;
&lt;p&gt;As one Scrum consultant I heard interviewed put it, &amp;quot;I think of every work item as a story.&amp;quot;&lt;/p&gt;
&lt;p&gt;In the next post, we'll put this process to work.&lt;/p&gt;
</description>
      <pubDate>Mon, 17 May 2021 16:00:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/scrum_in_azure_devops_-_a_simpler_custom_process</guid>
    </item>
    <item>
      <title>Git commit/checkout is a snapshot, not a delta</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ERROR!&lt;/strong&gt;&lt;br /&gt;
What I say below about how Git commits work, and the recommended pre-PR flow, is correct. However, what I say about pull requests is &lt;em&gt;not&lt;/em&gt; correct. In the example below, Sabrina's PR would end up with Jasmine's change because a PR merges into master.&lt;/p&gt;
&lt;p&gt;My own confusion came from a client situation where a branch was deployed to production, instead of being merged into master first. I didn't spot that detail right away in the pipeline's history.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For many of us with past source control experience (Subversion, Team Foundation Version Control, Visual Source Safe), there's a subtlety to a Git commit that can trip us up when it comes to build/deployment pipelines. We mistakenly think the pipeline will &amp;quot;get latest.&amp;quot;&lt;/p&gt;
&lt;p&gt;A Git commit is a snapshot of the entire source tree of the developer's workspace. It's &lt;em&gt;not&lt;/em&gt; a record of only that commit's changes. This is why it's critical, before submitting a branch pull request or a commit to mainline (depending on your workflow) that you pull the remote repository's latest code into your local repository.&lt;/p&gt;
&lt;p&gt;Imagine two developers, Jasmine and Sabrina. They're going to work on a repo with two files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|_princess.txt
|_witch.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At 1pm, they both clone the remote, so both their local repositories exactly match. I'm showing the SHA hashes below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa111  &amp;lt;== this is the commit number
|_princess.txt  bbbb111
|_witch.txt     cccc111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's be really clear. Git doesn't know about the files. It knows about the hashes it uses to name its copies of the files. So Git's commit tree is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aaaa111
|_bbbb111
|_cccc111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They each create a separate branch. At 1:30pm, Jasmine changes her file, commits, and creates a pull request. Her commit tree is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa222
|_princess.txt  bbbb222
|_witch.txt     cccc111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the PR is approved and commit aaaa222 is deployed, &lt;em&gt;those files&lt;/em&gt; are deployed.&lt;/p&gt;
&lt;p&gt;At 2:00pm, Sabrina changes her file, commits, and creates a PR. Her commit tree is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa333
|_princess.txt  bbbb111
|_witch.txt     cccc222
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the important part: &lt;strong&gt;Sabrina didn't pull from the remote, so her commit tree doesn't include Jasmine's changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the PR is approved and commit aaaa333 is deployed, Git does &lt;em&gt;not&lt;/em&gt; get the latest princess.txt nor should it. Git checks out the named commit tree, and that commit has the earlier princess.txt.&lt;/p&gt;
&lt;p&gt;What Sabrina needed to do before the PR is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout main
git pull --rebase
git checkout myfeature
git rebase main
git push
# OR git push --force &amp;lt;== if the branch was previously pushed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If she does this, her commit tree for the PR will be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HEAD aaaa444
|_princess.txt  bbbb222
|_witch.txt     cccc222
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the PR will deploy the latest files because that's what's in commit aaaa444.&lt;/p&gt;
</description>
      <pubDate>Fri, 14 May 2021 16:03:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/git_commit_checkout_is_a_snapshot__not_a_delta</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/git_commit_checkout_is_a_snapshot__not_a_delta</guid>
    </item>
  </channel>
</rss>