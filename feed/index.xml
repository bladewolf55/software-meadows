<?xml version="1.0" encoding ="UTF-8"?>
<rss xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" version="2.0">
  <channel>
    <title>Software Meadows</title>
    <description>A pleasant walk through computing</description>
    <link>https://www.softwaremeadows.com/feed</link>
    <link href="https://www.softwaremeadows.com/feed" rel="self" type="application/rss+xml" xmlns="http://www.w3.org/2005/Atom" />
    <item>
      <title>Using Visual Studio for Git Merge Conflicts? Well, Don't</title>
      <description>&lt;p&gt;Microsoft, I love ya, I really do, but your Visual Studio merge tool is bad, bad, bad.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OK, maybe not deserving of three bads. Or maybe? Read on and judge for yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="causing-conflict"&gt;Causing Conflict&lt;/h2&gt;
&lt;p&gt;Here's a PowerShell script that sets up a simple merge conflict on a &lt;code&gt;git pull&lt;/code&gt;. Basically, it&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;[user]/source/repos&lt;/code&gt;, creates a bare repo and clones it twice.&lt;/li&gt;
&lt;li&gt;Adds, commits, and pushes a file in one branch&lt;/li&gt;
&lt;li&gt;Pulls, changes, and commits in a second branch&lt;/li&gt;
&lt;li&gt;Changes, commits, then pulls (using merge) in the first branch&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;You do need Git in the PATH system environment variable for this to work, but it should be already if you've installed Git for Windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# clean
$user = $env:HomePath
$repos = &amp;quot;$user\source\repos&amp;quot;
if (-Not(Test-Path($repos))) {
	New-Item -Path $repos -Type Directory
}
cd $repos

Remove-Item g0 -Recurse -Force
Remove-Item g1 -Recurse -Force
Remove-Item g2 -Recurse -Force

# create repos
mkdir ./g0
cd ./g0
git init --bare -b main
cd ..
git clone g0 g1
git clone g0 g2
cd ./g1

# start changes
# step 1
echo a &amp;gt; x.txt
git add .
git commit -m &amp;quot;add with a&amp;quot;
git push

# step 2
cd ../g2
git pull
git switch -c f2
echo b &amp;gt; x.txt
Add-Content -Path x.txt &amp;quot;`ne&amp;quot;
git commit -a -m &amp;quot;change to b, appended e&amp;quot;
git switch main
git merge f2
git push
git branch -d f2

# step 3
cd ../g1
git switch -c f1
echo c &amp;gt; x.txt
git commit -a -m &amp;quot;change to c&amp;quot;
git switch main
git merge f1
# this causes a merge conflict
git pull --no-rebase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The merge conflict is on the first line. Branch 1 has this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Branch 2 has this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;b

e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I need to choose whether to keep branch 1's &amp;quot;c&amp;quot;, or branch 2's &amp;quot;b&amp;quot;.&lt;/p&gt;
&lt;h2 id="visual-studio-fail"&gt;Visual Studio Fail&lt;/h2&gt;
&lt;p&gt;Let's see how Visual Studio 2022 displays this.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont/2022-11-01-19-16-35.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Yuck! See the problems?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's completely unobvious that the conflict is between &amp;quot;b&amp;quot; and &amp;quot;c&amp;quot; in the first line. In fact, it looks like the problem is on the last line. You have to &lt;em&gt;really&lt;/em&gt; pay attention to notice the line numbers.&lt;/li&gt;
&lt;li&gt;The UI &lt;em&gt;does not&lt;/em&gt; allow me to choose &amp;quot;c&amp;quot; and keep &amp;quot;e&amp;quot;. But that's very likely what I want! I can only keep &amp;quot;c&amp;quot; if I select the &amp;quot;b e&amp;quot; option and manually type in &amp;quot;c&amp;quot;.&lt;/li&gt;
&lt;li&gt;The default output is to keep the parent version (the &amp;quot;base&amp;quot;). That's . . . not helpful, when it's labeled &amp;quot;result.&amp;quot;&lt;/li&gt;
&lt;li&gt;I can view an accurate diff with Compare Target to Source. But why would I? Wouldn't I expect my merge tool to show an accurate diff?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a simple case, and Visual Studio gets it wrong. I can't trust this tool, and that's too bad.&lt;/p&gt;
&lt;h2 id="winmerge-not-for-the-win"&gt;WinMerge NOT for the Win&lt;/h2&gt;
&lt;p&gt;Does &lt;a href="https://winmerge.org/?lang=en"&gt;WinMerge&lt;/a&gt; do any better?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont/2022-11-01-19-31-16.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Well, yes, it's &lt;em&gt;better&lt;/em&gt;, I suppose. I can tell the problem's on the first line. But, again, the &amp;quot;Merged&amp;quot; is really the base version. And WinMerge doesn't provide any easy way to resolve that conflict. You have to dig into the Merge menu to find ways to automatically replace lines, or manually change the file. While I like WinMerge for file and folder compare, I can't see using it for merge conflicts.&lt;/p&gt;
&lt;h2 id="kdiff3-brilliant"&gt;KDiff3 - Brilliant!&lt;/h2&gt;
&lt;p&gt;So, do I have anything that works right? Yes, I do. KDiff3. If you're on Windows 10+ by far the easiest way to install is using &lt;a href="https://learn.microsoft.com/en-us/windows/package-manager/winget/"&gt;&lt;code&gt;winget&lt;/code&gt;&lt;/a&gt;. Or, if you don't us &lt;code&gt;winget&lt;/code&gt;, here's a download link so you don't have to go hunting like I did.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://download.kde.org/stable/kdiff3/"&gt;https://download.kde.org/stable/kdiff3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How does KDiff3 manage our conflict?&lt;/p&gt;
&lt;p&gt;First up, KDiff3 tells you if it was unable to resolve the conflicts. That's right, it can resolve simple conflicts on its own, and in my experience does it well.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont/2022-11-01-19-40-04.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Next, here's our merge screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont/2022-11-01-19-41-58.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;That, friends, is joy. My base, local, and remote versions are clearly labeled in the top three panes. My diffs are aligned. And, best of all, the line with the conflict is super clear in the bottom pane, which is also my result file.&lt;/p&gt;
&lt;p&gt;With my cursor on &lt;code&gt;&amp;lt;Merge Conflict&amp;gt;&lt;/code&gt;, I can click on A, B, or C in the toolbar to decide which value to use. Or, I can use keyboard shortcuts Ctrl+1, Ctrl+2, Ctrl+3. I see the result immediately.&lt;/p&gt;
&lt;p&gt;This is the way to resolve merge conflicts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Confession: I haven't tried other well-known tools such as &lt;a href="https://www.scootersoftware.com/index.php"&gt;Beyond Compare&lt;/a&gt; or &lt;a href="https://www.sublimemerge.com/"&gt;Sublime Merge&lt;/a&gt;. I have nothing against them, I just find the free, open source KDiff3 currently meets my needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="bonus-round-cake-eat"&gt;Bonus Round: Cake, Eat&lt;/h2&gt;
&lt;p&gt;I use Git mostly from the command line. But there's value in using Visual Studio's generally fine Git integration&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the good news: if you configure KDiff3 as your default merge tool in the global git config, Visual Studio will use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;git config --global -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change paths as needed. Git has built-in support for KDiff3's parameters, so you only need to supply the path.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;[diff]
	tool = kdiff3
[merge]
	tool = kdiff3
	conflictstyle = diff3

[difftool]
	prompt = false
[mergetool]
	prompt = false
	keepBackup = false
	keepTemporaries = false

[difftool &amp;quot;kdiff3&amp;quot;]
	path = C:/Users/[user]/AppData/Local/KDiff3/bin/kdiff3.exe
	trustExitCode = true
[mergetool &amp;quot;kdiff3&amp;quot;]
	path = C:/Users/[user]/AppData/Local/KDiff3/bin/kdiff3.exe
	trustExitCode = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Double-click the conflicting file and KDiff3 opens.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont/2022-11-01-20-18-24.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Personally, I prefer running &lt;code&gt;git mergetool&lt;/code&gt; because it cycles through all the conflicts. But I'm also used to it, and running &lt;code&gt;git merge --continue&lt;/code&gt;, and all that jazz. But you may love the UI. To Microsoft's credit, the don't force their merge tool on us.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Though the default settings &lt;em&gt;do not&lt;/em&gt; encourage good use of &lt;code&gt;rebase&lt;/code&gt;, which is a crime.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 1 Nov 2022 19:05:37 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/using_visual_studio_for_git_merge_conflicts__well_dont</guid>
    </item>
    <item>
      <title>The Mythical Man-Month: A Short Review of the Essential Essays</title>
      <description>&lt;p&gt;A book club I belong to agreed to read Frederick P. Brooks's seminal essay collection &lt;a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959"&gt;The Mythical Man-Month&lt;/a&gt;. We somewhat abandoned the book, finding a lot of it hard to relate to because we don't write operating systems for specific hardware in a time-sharing environment. Plus there's no audio version, which is how some of the members like to read. I promised the group I'd read some specific essays because I wanted to, and report back.&lt;/p&gt;
&lt;p&gt;I've made good on that promise. I think the following are worth reading for a few reasons, which I touch on below. Something not clear initially is when the essays were written. I think that's important for the context, so include what the dates seem to be.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Tar Pit (1975)&lt;/em&gt;&lt;br /&gt;
While not essential, this short essay nicely discusses what makes software hard and enjoyable. I think most of what Brooks says holds true today.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Mythical Man-Month (1975)&lt;/em&gt;&lt;br /&gt;
For the title essay, the thesis has held up; adding developers (to a late project) doesn't reduce time-to-completion. Communication is a core challenge of software shops. When new developers are added, there's significant ramp-up time for them, plus other employees' training time devoted to them--taking time away from their own days.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No Silver Bullet (1986)&lt;/em&gt;&lt;br /&gt;
This is Brooks's other most famous essay, written just as microcomputers are coming on the scene. In it he proposes software development won't see magnitudes of performance improvement from any single tool or process. He also breaks down why that is, and comparing software development to hardware development makes an observation I hadn't considered: it's hardware development that's the outlier. The incredible advances in power coupled with reduced cost hadn't--and haven't--happened in any other industry.&lt;/p&gt;
&lt;p&gt;Reading this essay is watching history unfold. Brooks is excited about new approaches--such as objective-oriented programming!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;'No Silver Bullet' Refired (1995)&lt;/em&gt;&lt;br /&gt;
Here, Brooks examines his own essay nine years later. What a difference those years make! And yet, he argues that there is still no single silver bullet despite many advances. He discusses the various critiques of his essay, acknowledges where they're valid, points out where they're not. I enjoyed that he quotes Capers Jones on the subject of productivity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;NSB,&amp;quot; like most writings at the time, was focused on &lt;em&gt;productivity&lt;/em&gt;, the software output per unit of input. Jones says, &amp;quot;No. Focus on &lt;em&gt;quality&lt;/em&gt;, and productivity will follow.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I completely agree.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Mythical Man-Month after 20 Years (1995)&lt;/em&gt;&lt;br /&gt;
This might be my favorite essay. Brooks discusses his entire book, where he was right, and where he was wrong. With gracious humility, he says, &amp;quot;I dismissed Parnas's concept [of information hiding] as a 'recipe for disaster' in Chapter 7. Parnas was right, and I was wrong.&amp;quot;&lt;/p&gt;
&lt;p&gt;He reveals discussions with the great James McCarthy of Microsoft who pioneered incremental and iterative processes we take for granted (even when business still don't do them!). But mostly, this essay is a snapshot of the industry approaching a turning point of both powerful personal computers and, in a few years, the codification of Agile values and principles. He names bunches of software, a lot I recognized, and most of which is no longer in use.&lt;/p&gt;
&lt;p&gt;1995 was only a year after I entered the computing industry. I wish I'd found this book then, though I wouldn't have understood it. So much of what we talk and read about seems new, but Brooks and his colleagues were struggling with--and solving--these problems already.&lt;/p&gt;
&lt;p&gt;We owe these masters a debt, and maybe that's why I'm glad I didn't give up on reading more of the book. I feel I've, in a small way, said &amp;quot;thank you&amp;quot; to those who came before me and made my career possible.&lt;/p&gt;
&lt;p&gt;One final item. While the essay &lt;em&gt;Why Did the Tower of Babel Fail&lt;/em&gt; didn't make my list, I wrote a fuller article about it on my blog. It disputes Brooks's Tower metaphor, and won't be to everyone's taste, but here it is for you to decide for yourself.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project/"&gt;Meditation On The Mythical Man-Month: Who Failed On The Tower Of Babel Project?&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 9 Sep 2022 19:20:49 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_mythical_man-month__a_short_review_of_the_essential_essays</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_mythical_man-month__a_short_review_of_the_essential_essays</guid>
    </item>
    <item>
      <title>Basic Debugging and Problem Solving Questions</title>
      <description>&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/basic_debugging_and_problem_solving_questions/elisa-ventur-bmJAXAz6ads-unsplash.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Photo by &lt;a href="https://unsplash.com/@elisa_ventur?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"&gt;Elisa Ventur&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/problem?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;While a short post, I hope this will help others as it did me. These questions came out of an experience trying to troubleshoot a deployment issue I was called into some time ago. The problem got solved, but the approach to identifying the problem wasn't . . . ideal. Among the challenges were pressure from above and the group dynamics of a thirty-person Zoom meeting.&lt;/p&gt;
&lt;p&gt;Afterward, I performed a personal post-mortem to identify heuristics that would help with this general class of problems, the &amp;quot;It's not working and we don't know why but it needs to be fixed right now we're watching you&amp;quot; situation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Actually, these are good questions for any debugging/troubleshooting, not just the under-pressure variety.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Questions&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;What's the symptom?&lt;/strong&gt; Get clear on this from the start and respectfully question what you're first told. &amp;quot;The prices are all wrong!&amp;quot; &amp;quot;Would you show me exactly what a where you're seeing that?&amp;quot; &amp;quot;Sure. See? All (and only) the shirt prices are multiplied by ten on this screen.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What changed?&lt;/strong&gt; In my situation, the exact same code was deployed to a different environment. The code worked in the other three environments. So, the problem wasn't the code. We needed to review the environment, not dive into the debugger. (It was a wrong deployment environment variable.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What's the dumbest thing it could be?&lt;/strong&gt; Did something get misspelled? Did you push the wrong version?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working backward, what controls that behavior?&lt;/strong&gt; It's so easy to assume you know what &amp;quot;must be&amp;quot; causing the symptom. Stop. Don't think &amp;quot;must be,&amp;quot; but instead &amp;quot;might be&amp;quot; and especially &amp;quot;&lt;em&gt;shouldn't&lt;/em&gt; be but let's check.&amp;quot; What class method displays that text? What service calls that class?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Other Principles&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ask, &amp;quot;What's the real problem?&amp;quot;&lt;/strong&gt; For example, the symptom might be &amp;quot;we're getting a 404 on this page.&amp;quot; But the real problem might be, &amp;quot;Our main customer is blocked from completing a critical report.&amp;quot; Maybe the customer problem can be addressed without immediately fixing the symptom.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't rush.&lt;/strong&gt;  Pressure is the enemy, and often an illusion. Solving the problem fast isn't as important as solving it right. Wanting to be the hero and feeling the pressure of being the expert inevitably causes delays and failure. &lt;a href="https://www.softwaremeadows.com/posts/one_sheet_summry-_leadership_is_language/"&gt;David Marquet&lt;/a&gt; calls this &amp;quot;control the clock, don't obey the clock.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change one thing at a time.&lt;/strong&gt; This is a hard-won skill. Change one thing, and confirm other variables are &amp;quot;known good.&amp;quot; Decades ago, I called my boss for help with a non-working printer. He asked, &amp;quot;Are you using a known-good cable?&amp;quot; &amp;quot;Uh, no.&amp;quot; &amp;quot;You have to make sure the cable works!&amp;quot; He was right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always know what you changed.&lt;/strong&gt; If you must change multiple variables, keep track.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix the problem, not the blame.&lt;/strong&gt; Now isn't the time for a retrospective, or questioning why the code is written the way it is. That just derails the conversation and is evidence of a &lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture"&gt;pathological organization&lt;/a&gt;. But do have a post-mortem when heads are clear.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of all these, &amp;quot;what's the symptom?&amp;quot;, &amp;quot;what changed?&amp;quot;, and &amp;quot;don't rush&amp;quot; will take you very far.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;It's important to think when things are going crazy, if you want to take the smartest action to get them sane again.&amp;quot; --Harry Dresden, &lt;em&gt;Battle Ground&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Fri, 12 Aug 2022 10:54:06 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/basic_debugging_and_problem_solving_questions</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/basic_debugging_and_problem_solving_questions</guid>
    </item>
    <item>
      <title>WIP Metaphor: Not Burgers. Books!</title>
      <description>&lt;h2 id="developers-dont-cook-hamburgers"&gt;Developers Don't Cook Hamburgers&lt;/h2&gt;
&lt;p&gt;Metaphors&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; are strong ways of explaining or clarifying difficult concepts. However, the wrong metaphor can weaken one's case.&lt;/p&gt;
&lt;p&gt;In his article &lt;a href="https://lucasfcosta.com/2022/07/19/finish-what-you-start.html"&gt;How finishing what you start makes teams more productive and predictable&lt;/a&gt;, Lucas F. Costa uses making hamburgers to illustrate work-in-progress. He's trying to show the importance and efficiency of finishing a task at a time and uses the following illustrations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serial&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-09-30-58.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concurrent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-09-31-08.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Here's the problem. &lt;em&gt;&lt;strong&gt;His metaphor is dead wrong.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let me be clear from the outset. Mr Costa is right about WIP and task switching in software development, and I assume his math equations are right, too. In fact, &lt;em&gt;I encourage you to read the entire piece because it's good stuff.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, I'm going to argue he shouldn't use the hamburger metaphor at all. It's too easy to poke holes in, and therefore not take seriously. If he tried to &amp;quot;educate the cook&amp;quot; in any of millions of restaurant kitchens on how to cook burgers, he'd rightfully be told he doesn't know what he's talking about.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I've worked as a cook. I do know what I'm talking about.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This point is really important. When trying to persuade people outside our field by using a metaphor, we &lt;em&gt;must&lt;/em&gt; know that other subject matter. We can't say, &amp;quot;I know it's not the same, but do you see my point?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer from senior management: &amp;quot;No, because you've made your point using an invalid example. Now I don't trust you. Get back to work on those features and stop complaining.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you use a bad metaphor, the other person will focus on the flaws in the metaphor, not the strengths of your argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we used this metaphor to try to persuade management or execs who don't understand software development why we should limit work-in-progress, we'd fail. Let's see why.&lt;/p&gt;
&lt;h2 id="computers-cook-hamburgers"&gt;Computers Cook Hamburgers&lt;/h2&gt;
&lt;p&gt;How does short order cooking of burgers actually work? (My drawings aren't as good as Mr Costa's!)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-08-25-37.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now, what happens if two people order burgers simultaneously?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-08-26-01.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Why doesn't it take 30 seconds each to assemble and plate the burgers? Because I can &lt;em&gt;combine like tasks&lt;/em&gt;. Open both buns, slather both with mustard, place lettuce on both, then tomato on both. Then put the patties on the buns.&lt;/p&gt;
&lt;p&gt;Finally, what happens if three customers order burgers one minute apart? Let's make the visual clearer.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-09-37-27.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Each burger has fixed grill times, with a flip in between. It only takes a couple of seconds to flip a burger.&lt;/p&gt;
&lt;p&gt;At the two minute mark, I need to flip the first burger, then start grilling the third. That adds a couple of seconds to the third order.&lt;/p&gt;
&lt;p&gt;Similarly, at the four minute mark, I flip the third, then assemble and plate the first.&lt;/p&gt;
&lt;p&gt;I then assemble and plate the remaining burgers with almost no pause. My customers each wait about five minutes. This isn't theory; I've done it. If I cook my burgers one after the other, the first customer gets his burger in under five minutes, and the third gets hers in &lt;em&gt;fifteen&lt;/em&gt; minutes. She won't be happy, and I'll go out of business.&lt;/p&gt;
&lt;p&gt;Why is flipping burgers so different than coding software?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cooking has significant &lt;em&gt;wait time&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I put a patty on the grill, I'm not stuck grilling the patty the entire two minutes. The patty is, essentially, grilling itself. I'm just waiting. This means I can start working on something else, and come back to flip the patty when it's ready.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cooking has lots of async-await. It's highly asynchronous.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, as a cook I can take advantage of my wait times and prepare even more. Assembling a burger involves pre-assembly (buns and condiments), and final assembly (putting the patty on the burger). I can pre-assemble early and plate the burger sooner.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/2022-08-10-08-54-23.png" alt="" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is very much what a computer CPU is doing. A process is spawned that only uses a portion of memory, and so the CPU spawns another process. It's task switching, but that's what computers are good at, not people.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does this mean WIP doesn't apply to cooking? No, it does apply. In fact, in a restaurant kitchen, there's a real danger of starting too many orders. This leads to &lt;em&gt;cognitive overload&lt;/em&gt;. &amp;quot;Which patties are ready to flip?&amp;quot; It also leads to too many overlapping tasks. &amp;quot;I need to flip these four patties, assemble those five, plate these other two, and get back to these three patties before they burn.&amp;quot;&lt;/p&gt;
&lt;p&gt;The kitchen, though, has its own WIP limiter: grill space.&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You can only start so many burgers. This is why you have to wait so long in a crowded diner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While cooking is highly asynchronous, it is also highly limited. It's a just-in-time system where you only start orders when you have capacity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But we're still left with a dilemma. We want to explain to upper management why trying to code multiple features at once is severely counter-productive. What metaphor can we use that they'll immediately grasp?&lt;/p&gt;
&lt;h2 id="features-are-books"&gt;Features Are Books&lt;/h2&gt;
&lt;p&gt;Software engineering is a creative endeavour. It's not kitchen work, and it's not assembly line work. We need to use a creativity-based metaphor.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/typewriter.png" alt="" /&gt; &lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/typewriter.png" alt="" /&gt; &lt;img src="https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books/typewriter.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;If you were tasked to write three books in two years, how would you do it? Would you&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write page one of each book, then page two, then page three, and so on?&lt;/li&gt;
&lt;li&gt;Write chapter one of each book, then chapter two, etc?&lt;/li&gt;
&lt;li&gt;Write book one, then book two, then book three?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option one is patently ridiculous. And yet it's how management &lt;em&gt;and developers&lt;/em&gt; often think when they're asked to add a new project or feature to an existing workload. &amp;quot;OK, sure, I can fit that in.&amp;quot; Or, &amp;quot;Sure, I can do that at the same time.&amp;quot;&lt;/p&gt;
&lt;p&gt;No. No you can't. This is where Mr Costa's article and math are so helpful, and is the point he's trying to make.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Coding has no wait times. You can't start coding a feature, and then switch to another feature while the first one magically continues coding itself. Coding is highly synchronous.&lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What are the consequences of trying to write three books asynchronously? Will they be finished sooner, the same, or later than if you write them one after the other?&lt;a id="fnref:5" href="#fn:5" class="footnote-ref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All three books will be late, and each will take longer to write. Why? Because of task switching. You don't need to be much of a writer to imagine trying to switch between three different books, plots, characters, locations, every page. You'd never &lt;em&gt;read&lt;/em&gt; three books that way, right? The reason's the same. The writer needs to become immersed in the story. Switching to another story requires &amp;quot;getting back into it.&amp;quot; In software development, this is often called &amp;quot;ramp up time&amp;quot; or &amp;quot;reloading the code into my head&amp;quot; and generally takes &lt;em&gt;ten to twenty minutes&lt;/em&gt; after an interruption.&lt;/p&gt;
&lt;p&gt;If you want all three books on time, write them one after the other.&lt;/p&gt;
&lt;p&gt;There's another important business consideration here, and one that should appeal to all executives. In our metaphor of the writer, I &lt;em&gt;want&lt;/em&gt; to finish the first book before starting the second. Why? Because I need the money. That book can get published and I can get royalties while writing my second book. I can also use the reviews of my first book to help improve my next one.&lt;/p&gt;
&lt;p&gt;This is critical to understand in software development. We need to work on one feature at a time &lt;em&gt;with minimal distraction&lt;/em&gt; so we can finish it more quickly and get feedback to both fix the existing feature and inform future features. We also want to get products to users quickly because that's where the company's revenue comes from.&lt;/p&gt;
&lt;h2 id="metaphors-are-metaphorically-the-grail-choice-in-indiana-jones"&gt;Metaphors Are, Metaphorically, the Grail Choice in Indiana Jones&lt;/h2&gt;
&lt;p&gt;As the knight reminds in &lt;a href="https://www.youtube.com/watch?v=VA7J0KkanzM"&gt;Indiana Jones and the Last Crusade&lt;/a&gt;, you must choose wisely. Like all metaphors, the writing metaphor is incomplete. For example, unlike writers finishing a book, programmers are constantly fixing previously released code. Imagine if writers were forced to revise and republish all their books throughout the year! Also, writers do sketch ideas for future books, and they'll edit one book while writing another. But would you have said to J.K. Rowling, &amp;quot;I know we have an August deadline for the next Harry Potter, but we need you to start another book, too, and have it finished in September without missing the August deadline. Plus these five magazine articles.&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course not.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The difference between metaphors and similes is a metaphor substitutes, a simile compares. &amp;quot;I watched the flaming chariot cross the sky&amp;quot; is a metaphor for the sun. &amp;quot;The sun crossing the sky is like a flaming chariot&amp;quot; is a simile. When you see &amp;quot;is like,&amp;quot; it's a simile. In this article, I'm using &amp;quot;metaphor&amp;quot; throughout because it's easier to understand.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Mr Costa does touch on batching, but his example is, again, inaccurate compared to kitchen cooking reality.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Mr Costa notes this as well.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Of course, there is technically some wait time, for example while code is building. But compared to restaurant cooking, there's essentially none.&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;We're setting aside for the moment the danger of writer's block. We're assuming we can write continuously.&lt;a href="#fnref:5" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 10 Aug 2022 10:36:00 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/wip_metaphor__not_burgers__books</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 7 - Deploying, the Other People's Links Edition</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition/"&gt;Part 7 - Deploying, the Other People's Links Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="checking-my-ego"&gt;Checking My Ego&lt;/h2&gt;
&lt;p&gt;I kind of promised this part in the series, where I was going to take my progressively modified default app and show deploying it. But you know what? Other people have already covered this. So, here are their links and I don't think I have anything to add or clarify. Read them. They'll point you the right way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/"&gt;Getting Started with DevOps and .NET MAUI - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.andreasnesheim.no/setting-up-ci-for-your-net-maui-windows-app-in-azure-devops/"&gt;Setting up CI for your .NET MAUI Windows app in Azure DevOps - Andreas Nesheim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=FNwv_W3TtSU&amp;amp;t=8s"&gt;Create a .NET MAUI Windows MSIX to Sideload Or Publish to the Microsoft Store - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I &lt;em&gt;may&lt;/em&gt; still write a future post showing .NET MAUI CI/CD in Azure DevOps Pipelines. That would be interesting because it would ideally cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The local build and package script&lt;/li&gt;
&lt;li&gt;Remote (integrated) build&lt;/li&gt;
&lt;li&gt;Package once, deploy to many environments&lt;/li&gt;
&lt;li&gt;How to manage testing versions before publishing to the platform stores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing is, I haven't done this with .NET MAUI, and I have some other topics I'm more interested in right now. But I'll eventually learn and write about it when I--hopefully--publish my first .NET MAUI application!&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;This series has used the out-of-the-box .NET MAUI project template as a starting point for learning many key concepts and techniques. Some apply only to .NET MAUI, while most apply to general enterprise development.&lt;/p&gt;
&lt;p&gt;I hope it's been helpful. You rock!&lt;/p&gt;
</description>
      <pubDate>Sun, 31 Jul 2022 07:46:53 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition</guid>
    </item>
    <item>
      <title>The Better Software Engineer Interview Process</title>
      <description>&lt;p&gt;I've been finding my next job. I've looked at literally hundreds of listings and been on several interviews. Over my career, I've interviewed &lt;em&gt;a lot&lt;/em&gt;. Today, software engineer interviews work mostly like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Screening interview (&amp;quot;do we want to proceed with you?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Development Manager interview (&amp;quot;do I want to work with you?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Technical interview or assessment (&amp;quot;can you do the job?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Other Management interviews (&amp;quot;do we have any objections?&amp;quot;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There can be as low as three (rarely two) steps. I've literally seen it up to six. A six-step interview!&lt;/p&gt;
&lt;p&gt;One intended goal for this process, I think, is to reduce the amount of time taken by management and developers for interviews so they can focus on coding. Another reason--again, my opinion--is there's a belief that management can screen out for fit early.&lt;/p&gt;
&lt;p&gt;Fit matters. I care a lot about whether I'll fit in with a prospective employer. But, after quite a few recent interviews and really pondering and reading about hiring, I think the typical process is backward, biased, onerous, and ineffective.&lt;/p&gt;
&lt;h2 id="a-better-way"&gt;A Better Way&lt;/h2&gt;
&lt;p&gt;Here are the steps I'd like to see.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initial, online technical assessment using real-world coding. No FizzBuzz, no &amp;quot;reverse this string the hard way.&amp;quot;&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Work with the team.&lt;/li&gt;
&lt;li&gt;Development Manager interview.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="online-assessment"&gt;1. Online Assessment&lt;/h2&gt;
&lt;p&gt;I've been skeptical of online skill assessments in the past, but a recent experience has warmed me to them. While still not as good as working with one's daily tools such as Visual Studio, the online interface was very good. So, why should companies start with (and pay for!) this assessment?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many candidates will drop out because they know they're not ready. This reduces the pool that the development team needs to assess. It's self-selection.&lt;/li&gt;
&lt;li&gt;The remaining results will be reasonably apples-to-apples.&lt;/li&gt;
&lt;li&gt;What matters first is &amp;quot;can you do the job.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The skills assessment can be tailored, so junior devs are assessed differently than seniors and architects. And the goal is to gain information, not punish people for not having arcane knowledge. &amp;quot;The basics&amp;quot; (you know, bubble sorting) really don't apply day-to-day. Let me show you I can write testable, clean, object-oriented code!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A fair, online assessment reduces lots of bias. A candidate shouldn't be disregarded out of the gate just because a hiring manager or the candidate hasn't had lunch yet. This is more common than people want to admit.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="team-work"&gt;2. Team Work&lt;/h2&gt;
&lt;p&gt;With the assessment results and resumes in hand, the development team can--with coaching from management and HR--decide who they want to meet. Let me say that again. &lt;em&gt;The developers choose.&lt;/em&gt; You can bet they'll be careful with their time.  In my view, they should ideally work on some code together, or do something that shows the candidate how life will really be. In a word, collaborate. This shouldn't be a &amp;quot;let's talk&amp;quot; meeting. Pull an item from the backlog, discuss how it might be approached, do some pair programming or even &lt;a href="https://en.wikipedia.org/wiki/Mob_programming"&gt;mob programming&lt;/a&gt;.&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The candidate will be working mostly with developers. They have the biggest stake, so they should have the biggest say in hiring. This is even more important if you claim to be an Agile shop. If you aren't letting developers self-manage their teams, you may still be a top-down bureaucracy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="management-blessing"&gt;3. Management Blessing&lt;/h2&gt;
&lt;p&gt;Someone's going to chafe at my suggestion that the final step is only with the development manager; that is, the person who will be the candidate's direct supervisor, or at most one level above that. But why have you promoted people to management/leadership positions if you're not going to &lt;em&gt;trust&lt;/em&gt; their judgement? By now in the process, the only candidates who talk to the manager have been pre-approved by the development team she'll be working with. There's really no reason to bring in other managers, except to stroke their egos and forestall &amp;quot;why wasn't I consulted?&amp;quot; comments later.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Besides, most managers complain they're too busy with endless meetings. This reduces meetings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other managers and execs should certainly introduce themselves after the hiring. But if a qualified developer who is liked by the people she'll be working with doesn't get a job because the CEO or president has a &amp;quot;gut feeling,&amp;quot; and needs to &amp;quot;meet everyone who's going to work here,&amp;quot; a disservice has been done to the entire organization. It signals that people's careers are at the mercy of caprice.&lt;/p&gt;
&lt;h2 id="change-your-ways-itll-save-you-money-and-improve-your-culture"&gt;Change Your Ways, It'll Save You Money and Improve Your Culture&lt;/h2&gt;
&lt;p&gt;Companies spend a lot of money on recruiters, time spent reviewing resumes, time spent in interviews. But have they really evaluated whether that money is being well-spent? Have they applied research and evidence, or are they interviewing software engineers the same way they always have?&lt;/p&gt;
&lt;p&gt;This article proposes the answer is, generally, no. We're hiring developers using a traditional model. And we're getting traditionally chancy results.&lt;/p&gt;
&lt;p&gt;I learned decades ago to look for these qualities as part of hiring, and they still apply.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Can&lt;/strong&gt;&lt;/em&gt; the person do the job?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Will&lt;/strong&gt;&lt;/em&gt; the person do the job?&lt;/li&gt;
&lt;li&gt;Does the person &lt;em&gt;&lt;strong&gt;fit&lt;/strong&gt;&lt;/em&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The principles I've outlined above boil down to.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce initial bias&lt;/li&gt;
&lt;li&gt;Let developers hire developers (with help)&lt;/li&gt;
&lt;li&gt;Trust your colleagues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm no expert, but I think we can hire better.&lt;a id="fnref:4" href="#fn:4" class="footnote-ref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2022/05/23/the-science-of-interviewing-developers/?utm_medium=email"&gt;The science of interviewing developers - Stack Overflow Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://builtin.com/job-interview/candidates-interview-companies"&gt;How Candidates Should Interview Companies | Built In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.woventeams.com/"&gt;Technical Interview Software for Developers | Woven Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tdwright.co.uk/2022/07/14/fizzbuzz-is-fizzbuzz-years-old-and-still-a-powerful-tool/"&gt;FizzBuzz is FizzBuzz years old (and still a powerful tool) | Tom Wrights Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say-ebook/dp/B07L2KL5XV/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=1658874171&amp;amp;sr=8-1"&gt;Leadership Is Language: The Hidden Power of What You Say--and What You Don't&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Noise-Human-Judgment-Daniel-Kahneman-ebook/dp/B08KQ2FKBX/ref=sr_1_4?keywords=kahnemann&amp;amp;qid=1658874780&amp;amp;sr=8-4"&gt;Noise: A Flaw in Human Judgment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;FizzBuzz can have value if done as pair-programming, but requires a different skill set on the part of the interviewer.&lt;/p&gt;
&lt;p&gt;As far as the &amp;quot;find substrings in a string&amp;quot; tradition, in my opinion, it's outdated and useless. The technical interviews where a couple of developers assign a seemingly trivial task and watch in silence while the candidate tries to work it out is just terrible. It's completely removed from the reality of the job (I hope!), and puts useless pressure on the candidate.&lt;/p&gt;
&lt;p&gt;It isn't an assessment. It's a hazing.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;As discussed by Daniel Kahneman in his book &lt;em&gt;Noise&lt;/em&gt;, and reported on in this &lt;a href="https://www.theguardian.com/books/2021/jun/03/noise-by-daniel-kahneman-olivier-sibony-and-cass-sunstein-review-the-price-of-poor-judgment"&gt;article&lt;/a&gt;.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This was one of my favorite interview experiences.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;To be intellectually fair, I really haven't found out what research there's been on effective developer hiring practices. I'm just voicing a slightly educated opinion that may be dead wrong.&lt;a href="#fnref:4" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 26 Jul 2022 17:09:30 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/the_better_software_engineer_interview_process</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/the_better_software_engineer_interview_process</guid>
    </item>
    <item>
      <title>Meditation on The Mythical Man-Month: Who Failed on the Tower of Babel Project?</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;&lt;br /&gt;
I'm not a biblical scholar. This post treads on sensitive ground regarding matters of theology. My intention isn't to critique faith, but instead is the same as Brooks's: interpret the account of the Tower of Babel through the lens of project and corporate management. I hope I've navigated the line between serious and tongue-in-cheek successfully.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In his seminal 1975 book &lt;a href="https://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959"&gt;&lt;em&gt;The Mythical Man-Month&lt;/em&gt;&lt;/a&gt;, author and engineer Frederick P. Brooks starts chapter 7, &amp;quot;Why Did the Tower of Babel Fail?&amp;quot; with the relevant Biblical text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now the whole earth used only one language, with few words. On the occasion of a migration from the east, men discovered a plain in the land of Shinar, and settled there. Then they said to one another, &amp;quot;Come, let us make bricks, burning them well.&amp;quot; So they used bricks for stone, and bitumen for mortar. Then they said, &amp;quot;Come, let us build ourselves a city with a tower whose top shall reach the heavens (thus making a name for ourselves), so that we may not be scattered all over the earth.&amp;quot; Then the Lord came down to look at the city and tower which human beings had built. The Lord said, &amp;quot;They are just one people, and they all have the same language. If this is what they can do as a beginning, then nothing that they resolve to do will be impossible for them. Come, let us go down, and there make such a babble of their language that they will not understand one another's speech.&amp;quot; Thus the Lord dispersed them from there all over the earth, so that they had to stop building the city.&lt;/p&gt;
&lt;p&gt;GENESIS 11:1-8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an aside, it's fascinating that after a solid search I don't find this translation anywhere else but in Brooks's book. It seems unlikely he played fast and loose with the Bible, so where did his translation come from?&lt;/p&gt;
&lt;p&gt;But to the point. Brooks makes the case that the Tower project failed, and that its failure was due to lack of communication and organization by the development team.&lt;/p&gt;
&lt;p&gt;Is this supported by the text?&lt;/p&gt;
&lt;p&gt;The first question to answer is whether the project was completed. Initially, reading &amp;quot;Then the Lord came down to look at the city and tower which human beings had built,&amp;quot; it seems they &lt;em&gt;did&lt;/em&gt; complete the city and tower. The puzzle is in the comment, &amp;quot;If this is what they can do as a beginning,&amp;quot; which implies the work is merely started. But if it's merely started, how is there even a tower?&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.biblestudytools.com/genesis/11.html"&gt;New International Version&lt;/a&gt; translates this subtly--but crucially--differently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But the LORD came down to see the city and the tower the people were &lt;em&gt;building&lt;/em&gt;. [Emphasis mine]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, many other translations use the past tense, &amp;quot;built.&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer seems to be in the following statements that the Lord confused the language, scattered the people, and they &amp;quot;had to stop building the city.&amp;quot; It appears clear the work was unfinished and the past tense &amp;quot;built&amp;quot; should be read as &amp;quot;built so far&amp;quot; rather than &amp;quot;completed.&amp;quot;&lt;/p&gt;
&lt;p&gt;Is an uncompleted project a failure? Not necessarily. Sometimes projects are abandoned because priorities change. We need to understand, why wasn't this project completed?&lt;/p&gt;
&lt;p&gt;So, let's examine the project as a corporate development effort as Brooks did, but without--in my opinion--his bias.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The developers had a clear goal and motivation.&lt;/li&gt;
&lt;li&gt;They began with great success, communicating very well and accomplishing quality work.&lt;/li&gt;
&lt;li&gt;The CEO checked up on them and felt threatened by their success.&lt;/li&gt;
&lt;li&gt;He didn't directly cancel the project. He broke up the teams. Not only that, he &lt;em&gt;created&lt;/em&gt; barriers to communication.&lt;/li&gt;
&lt;li&gt;At that point, the developers gave up on the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me call the first point out again: the Tower of Babel was not failing. The development team was &lt;em&gt;succeeding&lt;/em&gt;. The evidence points to the CEO as being the source of the failure, not the developers.&lt;/p&gt;
&lt;p&gt;Before making that case, one question is &lt;em&gt;why&lt;/em&gt; did the CEO react that way? Why did he feel threatened? The usual reason given for the Lord's actions is the people's hubris.&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; They--from the Lord's viewpoint--are trying to achieve godliness, and the Lord and his host (the C-level execs, if you will) don't take kindly to that. They don't want the people making &amp;quot;a name for themselves.&amp;quot; Maybe they see the roots of a competitive company growing within their own organization!&lt;/p&gt;
&lt;p&gt;From the people's point of view, their goal is the opposite. They want to stay together, &lt;em&gt;not&lt;/em&gt; be broken up, and see their project as the means to accomplish that goal. If making a name for themselves is against company policy, they don't seem to know it.&lt;/p&gt;
&lt;p&gt;Brooks's purpose in the chapter is showing that poor communication and organization cause major project problems. I agree, and so I believe does lots of research. Where I disagree with Brooks in his metaphor is who's responsible. This isn't a trivial point; it's a problem I've routinely seen in the dozens of companies I've worked for.&lt;/p&gt;
&lt;p&gt;So now we come to the crux: &lt;em&gt;What were the communication and organization problems?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think there are a few important answers. Framing it in software development terms,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The development department didn't communicate their intentions well enough to the CEO.&lt;/li&gt;
&lt;li&gt;The CEO was ignorant of what was going on in the company.&lt;/li&gt;
&lt;li&gt;The CEO didn't have a clear mission for the organization.&lt;/li&gt;
&lt;li&gt;The CEO valued punishment over learning.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If it seems like I'm laying most of the blame for the failed Tower at executive management's feet, I am. The CEO, in this organization, has developed a reputation for being omniscient. It was reasonable for the development department to believe he knew their plans. After all, they stated them out in the open, and such a big project could hardly be missed even in the planning stages.&lt;/p&gt;
&lt;p&gt;Still, they could have made sure. After all, the CEO also has a reputation as a bit of a hot head. Maybe the CIO assumed too much or didn't talk the the CEO directly. A few emails and phone calls might have helped. Something like, &amp;quot;We've settled into our new offices. We're working really well together and want that to continue. We're thinking of showing what we can do by building this beautiful social network application called 'City and Tower.' Is that in line with your goals?&amp;quot;&lt;/p&gt;
&lt;p&gt;The fact that they missed the mark on such a major project tells me the CEO didn't establish a clear vision. His development department was &lt;em&gt;literally&lt;/em&gt; wandering. They shouldn't have been blamed for making the best of their situation.&lt;/p&gt;
&lt;p&gt;What's worse is the CEO's reaction when he finds out about the project. He doesn't ask, &amp;quot;How could I have done better?&amp;quot; In fact, he doesn't confirm or consider their motivation. He &lt;em&gt;assumes&lt;/em&gt; bad intent on the team's part. There's no conversation. &lt;em&gt;No communication&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Even worse, he doesn't see the opportunity in the developers' excellent work. He responds in an Industrial Age, J.P. Morgan command-and-coerce style. &amp;quot;I'm the boss, you're threatening my power and position, I demand loyalty, so I'm firing you.&amp;quot;&lt;/p&gt;
&lt;p&gt;The developers showed the hallmarks of drive: &lt;em&gt;autonomy, mastery, and purpose&lt;/em&gt;.&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Their initiative should have been rewarded and redirected. What would have been good advice to the CEO?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask yourself: &amp;quot;How did I not know about this project?&amp;quot;&lt;/li&gt;
&lt;li&gt;Ask the team: &amp;quot;What's your motivation? How does this project help the organization?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;Did my actions or lack of direction affect their decision?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;I feel threatened. Is the threat real?&amp;quot;&lt;/li&gt;
&lt;li&gt;Reflect: &amp;quot;Did they do the wrong thing well? If so, can I harness that in service to the organization?&amp;quot;&lt;/li&gt;
&lt;li&gt;Act: &amp;quot;I apologize for my part in not communicating well. Let's improve that. You all started something amazing, but I think it's not in line with our objectives. Let's see if our objectives need to be adjusted, but if not let's bring your team to bear on our shared mission.&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I agree the Tower project failed because of poor communication and organization. But the primary failure was at the top management level. What the CEO communicated most successfully was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;I won't be clear in what I want.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I don't know what's going on.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I'll punish you if I think you're against me.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I'm never to blame.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are characteristic of what Ron Westrum defines as a pathological culture, which is worse than a bureaucratic one.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pathological&lt;/th&gt;
&lt;th&gt;Bureaucratic&lt;/th&gt;
&lt;th&gt;Generative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Power oriented&lt;/td&gt;
&lt;td&gt;Rule oriented&lt;/td&gt;
&lt;td&gt;Performance oriented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Low cooperation&lt;/td&gt;
&lt;td&gt;Modest cooperation&lt;/td&gt;
&lt;td&gt;High cooperation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Messengers &amp;quot;shot&amp;quot;&lt;/td&gt;
&lt;td&gt;Messengers neglected&lt;/td&gt;
&lt;td&gt;Messengers trained&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsibilities shirked&lt;/td&gt;
&lt;td&gt;Narrow responsibilities&lt;/td&gt;
&lt;td&gt;Risks are shared&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bridging discouraged&lt;/td&gt;
&lt;td&gt;Bridging tolerated&lt;/td&gt;
&lt;td&gt;Bridging encouraged&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Failure leads to scapegoating&lt;/td&gt;
&lt;td&gt;Failure leads to justice&lt;/td&gt;
&lt;td&gt;Failure leads to inquiry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Novelty crushed&lt;/td&gt;
&lt;td&gt;Novelty leads to problems&lt;/td&gt;
&lt;td&gt;Novelty implemented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While there were mistakes on both sides, the clans of Noah's sons really deserved better, especially after all they'd gone through.&lt;/p&gt;
&lt;p&gt;Imagine what wonderful products and services that team could have built in a generative organizational culture!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.biblestudytools.com/"&gt;The Bible - Read and Study Free Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates-ebook/dp/B004P1JDJO"&gt;Drive&lt;/a&gt; by Daniel Pink&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Measure-What-Matters-Google-Foundation-ebook/dp/B078FZ9SYB"&gt;Measure What Matters&lt;/a&gt; by John Doerr&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Leadership-Language-Hidden-Power-Say-ebook/dp/B07L2KL5XV"&gt;Leadership Is Language&lt;/a&gt; by David Marquet&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Crucial-Conversations-Tools-Talking-Stakes-ebook/dp/B093Y3N433"&gt;Crucial Conversations&lt;/a&gt; by Grenny, Patterson, et al&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture"&gt;Westrum Organizational Culture Taxonomy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I think it's pretty well established the reason for the myth of Babel exists at all is early people were trying to figure out &amp;quot;why do we have multiple languages?&amp;quot; Linguistics wasn't a thing, yet, and understanding the evolution of language is super hard anyway, so it was easier--and reasonable--to basically say &amp;quot;God did it.&amp;quot; I just wish they hadn't tacked on &amp;quot;and it's our fault.&amp;quot;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;From &lt;em&gt;Drive&lt;/em&gt; by Daniel Pink, see Resources.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 13:58:08 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/meditation_on_the_mythical_man_month__who_failed_on_the_tower_of_babel_project</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 6 - Revisiting Unit Testing</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition/"&gt;Part 7 - Deploying, the Other People's Links Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="someone-elses-solution-to-unit-testing.net-maui-projects"&gt;(Someone Else's) Solution to Unit Testing .NET MAUI Projects&lt;/h2&gt;
&lt;p&gt;In part 2, I discussed how .NET MAUI didn't support unit testing, and that you could separate out the namespaces into their own projects. And that's still true and useful. But for many projects that's overkill. In my opinion, it's especially egregious for unit testing the View Models, which I'd prefer stay with the UI project.&lt;/p&gt;
&lt;p&gt;In his video &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=C9vIDLQwc7M"&gt;Unit Testing .NET MAUI Apps with xUnit&lt;/a&gt;, Gerald Versluis demonstrates how to modify the project to allow direct unit testing. It's pretty simple, I must say, and for fun I'll take the solution from part 5 and &lt;em&gt;collapse&lt;/em&gt; it back into a single project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to just see the answer, scroll down to &lt;em&gt;The Secret Sauce&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ideally, as long as I keep the namespaces the same, everything should work the same and pass perfectly with very little effort.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="creating-the-namespace-folder-structure"&gt;Creating the namespace folder structure&lt;/h2&gt;
&lt;p&gt;Right now, we have separate projects for our domain-driven design.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-12-59-46.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Let's recreate those namespaces in the &lt;code&gt;Maui.Progression&lt;/code&gt; project. Create folders like so.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-09-57.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now copy the  files and folders from the projects into the new folders.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-12-14.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Add this NuGet package to the &lt;code&gt;Maui.Progression&lt;/code&gt; project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.Toolkit.Mvvm&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If we had other dependencies, they'd need to be added as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the 'Maui.Progression.UnitTests' project, add a project reference to &lt;code&gt;Maui.Progression&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-14-45-18.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now delete these projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maui.Progression.Domain&lt;/li&gt;
&lt;li&gt;Maui.Progression.DomainServices&lt;/li&gt;
&lt;li&gt;Maui.Progression.ViewModels&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Their references will automatically be removed from the unit test project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can try to simply rebuild the solution. But I had to close and reopen Visual Studio, then clean/rebuild. The build will fail, which is expected.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-28-05.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="the-secret-sauce"&gt;The Secret Sauce&lt;/h2&gt;
&lt;p&gt;As discussed in part 2, the reason I couldn't just unit test the .NET MAUI project is because it needs to include a framework of &lt;code&gt;net6.0&lt;/code&gt;. The other reason I didn't know about, that Versluis explains, is if I add the &lt;code&gt;net6.0&lt;/code&gt; framework it needs to build as a DLL, not an Exe. This removes the &amp;quot;Main method required&amp;quot; error.&lt;/p&gt;
&lt;p&gt;Here's how to do that.&lt;/p&gt;
&lt;p&gt;Edit your &lt;code&gt;Maui.Progression.csproj&lt;/code&gt; file, either by selecting it or right-click the project name and choosing &amp;quot;Edit Project File&amp;quot;.&lt;/p&gt;
&lt;p&gt;Modify the &lt;code&gt;TargetFrameworks&lt;/code&gt; line to include &lt;code&gt;net6.0&lt;/code&gt;. I put it first.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;TargetFrameworks&amp;gt;net6.0;net6.0-android;net6.0-ios;net6.0-maccatalyst&amp;lt;/TargetFrameworks&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's the kicker. Modify the OutputType to &lt;em&gt;conditionally&lt;/em&gt; generate an Exe for everything except the &lt;code&gt;net6.0&lt;/code&gt; framework. DLL is the default when Exe isn't selected.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;OutputType Condition=&amp;quot;'$(TargetFramework)' != 'net6.0'&amp;quot;&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clean and Rebuild the solution. You many need to close/reopen Visual Studio.&lt;/p&gt;
&lt;p&gt;The solution &lt;em&gt;still&lt;/em&gt; won't build, because the &lt;code&gt;MainPage.xaml&lt;/code&gt; is attempting to reference anx external assembly.&lt;/p&gt;
&lt;p&gt;Open that file and change the namespace attributes to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clean and Rebuild is now successful!&lt;/p&gt;
&lt;p&gt;Run the tests and they pass, like magic.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/2022-07-19-13-51-35.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="proscons"&gt;Pros/Cons&lt;/h2&gt;
&lt;p&gt;One advantage to keeping all the code in one project is it's a little quicker to navigate.&lt;/p&gt;
&lt;p&gt;One disadvantage is there's a tendency toward tighter coupling and worse testing design.&lt;/p&gt;
&lt;p&gt;But another, subtler disadvantage is build time. If there are no changes to the UI, and only changes to the dependency projects, the build is substantially faster. This matters when doing test-driven development because we want to keep our feedback loop fast.&lt;/p&gt;
&lt;p&gt;You need to decide what balance matters to you.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We saw how to enable unit testing against a .NET MAUI project directly by building it as a DLL against the &lt;code&gt;net6.0&lt;/code&gt; framework target. There are still challenges in unit testing where the code includes things like &lt;code&gt;SemanticReader&lt;/code&gt; calls; I'm hoping to tackle that soon.&lt;/p&gt;
&lt;p&gt;Next Up: Build (and maybe deployment), I hope.&lt;/p&gt;
</description>
      <pubDate>Tue, 19 Jul 2022 12:50:14 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 5 - Restyling From Scratch</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition/"&gt;Part 7 - Deploying, the Other People's Links Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-problem-do-styles-solve"&gt;What Problem Do Styles Solve?&lt;/h2&gt;
&lt;p&gt;Fundamentally, styles let you declare in one place how something will look no matter where it appears. A style differs (in my mind) from a format.&lt;/p&gt;
&lt;p&gt;Let's consider a button. Here's one with a default format.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-10-27-30.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;It's grey, square, and uses the host's default sans serif typeface positioned top left. Now let's format the button.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, you're right, some people will say &amp;quot;style&amp;quot; the button. That's OK, I'm drawing a distinction to clarify what styles are. If you prefer, you can think of them later as &amp;quot;named styles.&amp;quot; I'll be using the word more casually later on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-10-34-19.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Now the button background is blue with rounded corners, the text color is peach with a Bauhaus typeface and centered.&lt;/p&gt;
&lt;p&gt;In a larger application, I want to apply the same &lt;em&gt;format&lt;/em&gt; to each button automatically instead of manually on each one. That way, if I want to change the background to green I can do it in one place. I do that by creating a style.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is an application of the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don't Repeat Yourself (DRY)&lt;/a&gt; principle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-10-48-50.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Styles seem simple, but they get tricky pretty quickly when you want to do things like change a button's style depending on whether it's a Save or Delete (maybe the delete button should be bright red, but otherwise the same as other buttons).&lt;/p&gt;
&lt;p&gt;Taken together, styles are part of the application's UI/UX design.&lt;/p&gt;
&lt;h2 id="starting-our-styles-over"&gt;Starting Our Styles Over&lt;/h2&gt;
&lt;p&gt;Here's what our app looks like right now.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-11-02-06.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Let's get rid of all our styles. We'll create new ones later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the &lt;code&gt;Maui.Progression&lt;/code&gt; project &lt;code&gt;Resources/Styles&lt;/code&gt; folder, delete these two files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Colors.xslt&lt;/li&gt;
&lt;li&gt;Styles.xslt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;code&gt;Resources/Fonts&lt;/code&gt;, delete both OpenSans .ttf files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;App.xaml&lt;/code&gt; and delete the Application.Resources node, leaving you with this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Application xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
            xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
            xmlns:local=&amp;quot;clr-namespace:Maui.Progression&amp;quot;
            x:Class=&amp;quot;Maui.Progression.App&amp;quot;&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;MauiProgram.cs&lt;/code&gt; and delete these lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;.ConfigureFonts(fonts =&amp;gt;
{
    fonts.AddFont(&amp;quot;OpenSans-Regular.ttf&amp;quot;, &amp;quot;OpenSansRegular&amp;quot;);
    fonts.AddFont(&amp;quot;OpenSans-Semibold.ttf&amp;quot;, &amp;quot;OpenSansSemibold&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;leaving this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static MauiApp CreateMauiApp()
{
	var builder = MauiApp.CreateBuilder();
	builder
		.UseMauiApp&amp;lt;App&amp;gt;();

	builder.Services.AddSingleton&amp;lt;INumberMapper&amp;gt;(new NumberMapper());
	builder.Services.AddSingleton&amp;lt;Counter&amp;gt;();
	builder.Services.AddSingleton&amp;lt;MainPage&amp;gt;();

    return builder.Build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit &lt;code&gt;Maui.Progression.csproj&lt;/code&gt; and comment out the MauiFont Include line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;		&amp;lt;!-- Custom Fonts --&amp;gt;
		&amp;lt;!--&amp;lt;MauiFont Include=&amp;quot;Resources\Fonts\*&amp;quot; /&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and replace with this code. It removes all inline styling.
&lt;blockquote&gt;
&lt;p&gt;SemanticProperties can be included in styles, but I'm not doing it in this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
            xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
            x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
            xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
            x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
            &amp;gt;
    &amp;lt;ScrollView&amp;gt;
        &amp;lt;VerticalStackLayout &amp;gt;
            &amp;lt;Image
                Source=&amp;quot;dotnet_bot.png&amp;quot;
                SemanticProperties.Description=&amp;quot;Cute dot net bot waving hi to you!&amp;quot; /&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Hello, World!&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; /&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
                SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; /&amp;gt;
            &amp;lt;Button
                Text=&amp;quot;{Binding CountText}&amp;quot;
                SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
                Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; /&amp;gt;
        &amp;lt;/VerticalStackLayout&amp;gt;
    &amp;lt;/ScrollView&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Weirdness&lt;/strong&gt;&lt;br /&gt;
I found the app still runs even if the font files are deleted &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;.ConfigureFonts&lt;/code&gt; method is still in place. Maybe that's intentional, but I'd have expected a compile error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run the app. It looks pretty horrific, but still works.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-11-36-51.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="what-are-our-elements"&gt;What Are Our Elements?&lt;/h2&gt;
&lt;p&gt;We're going to style our app, but &lt;em&gt;what&lt;/em&gt; can we style? Just like on the web, a page is made up of elements in a layout.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-12-42-27.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;All of these elements can be styled. That is, they all have a Style property that can be set to a named style. Setting the element's properties overrides the style.&lt;/p&gt;
&lt;p&gt;We can think of our layout as a set of containers. Styles are &lt;em&gt;inherited&lt;/em&gt;, meaning inner elements (usually) get the same formatting as the outer elements unless overridden.&lt;/p&gt;
&lt;p&gt;We're going to progressively style our app's elements, and then add a button with some overrides.&lt;/p&gt;
&lt;h2 id="the-hard-way"&gt;The Hard Way&lt;/h2&gt;
&lt;p&gt;But first, let's format each element separately, starting with the content page. Add a BackgroundColor to &lt;code&gt;MainPage.xaml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
             BackgroundColor=&amp;quot;AliceBlue&amp;quot;
             &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, this changes the background to a pale blue.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-13-01-45.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Note a couple of things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The button background is white. That's because it's not transparent like the labels.&lt;/li&gt;
&lt;li&gt;The title background is still white. Why is that?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our app is using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/fundamentals/shell/"&gt;Shell App&lt;/a&gt; method for laying out the overall content, which includes the title element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of App Shell as the overall container for your app that all pages inherit from.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open &lt;code&gt;AppShell.xaml&lt;/code&gt; and format the Shell.BackgroundColor and Shell.TitleColor.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Shell
    x:Class=&amp;quot;Maui.Progression.AppShell&amp;quot;
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
    xmlns:local=&amp;quot;clr-namespace:Maui.Progression.Views&amp;quot;
    Shell.FlyoutBehavior=&amp;quot;Disabled&amp;quot; 
    Shell.BackgroundColor=&amp;quot;MediumPurple&amp;quot;
    Shell.TitleColor=&amp;quot;GhostWhite&amp;quot;
    &amp;gt;
    &amp;lt;ShellContent
        Title=&amp;quot;Home&amp;quot;
        ContentTemplate=&amp;quot;{DataTemplate local:MainPage}&amp;quot;
        Route=&amp;quot;MainPage&amp;quot; /&amp;gt;
&amp;lt;/Shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note this is also where the default page Title is set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, these same properties &lt;em&gt;can&lt;/em&gt; be set in a view's ContentPage element. So, each page could have a different title color. Whimsy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's the result. (No one ever said I'm good with colors.)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-13-11-31.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Back to &lt;code&gt;MainPage.xaml&lt;/code&gt; and well finish our manual formatting.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
             BackgroundColor=&amp;quot;AliceBlue&amp;quot;
             &amp;gt;
    &amp;lt;ScrollView&amp;gt;
        &amp;lt;VerticalStackLayout&amp;gt;
            &amp;lt;Image
                Source=&amp;quot;dotnet_bot.png&amp;quot;
                SemanticProperties.Description=&amp;quot;Cute dot net bot waving hi to you!&amp;quot; 
                WidthRequest=&amp;quot;50&amp;quot;
                HorizontalOptions=&amp;quot;Start&amp;quot;
                Margin=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Hello, World!&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
                FontSize=&amp;quot;Header&amp;quot; 
                TextColor=&amp;quot;Purple&amp;quot; 
                FontFamily=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
            &amp;lt;Label 
                Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
                SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
                SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
                FontSize=&amp;quot;15&amp;quot;
                HorizontalTextAlignment=&amp;quot;Center&amp;quot;
                Margin=&amp;quot;0,0,10,10&amp;quot; 
                FontFamily=&amp;quot;AbrilFatface&amp;quot; /&amp;gt;
            &amp;lt;Button
                Text=&amp;quot;{Binding CountText}&amp;quot;
                SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
                Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; 
                HorizontalOptions=&amp;quot;End&amp;quot; 
                Margin=&amp;quot;0,0,10,0&amp;quot;
                BackgroundColor=&amp;quot;#b0dce1&amp;quot; 
                FontFamily=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/VerticalStackLayout&amp;gt;
    &amp;lt;/ScrollView&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the app to get this admittedly ugly user experience, but one that demonstrates some features.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-14-23-40.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Our changes are working except for the font. That's because we need to explicitly load that font resource.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="https://fonts.google.com/specimen/Abril+Fatface?query=fatface"&gt;Abril Fatface&lt;/a&gt; font from Google. (Or use some other font file of your choice.)&lt;/li&gt;
&lt;li&gt;Unpack and copy the files into the &lt;code&gt;Resources\Fonts&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Maui.Progression.csproj&lt;/code&gt;, uncomment this line to include any font files in the Fonts folder in the app build.
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;MauiFont Include=&amp;quot;Resources\Fonts\*&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;MauiProgram.cs&lt;/code&gt; add this code to register the font file and give it a friendly name.
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder
    .UseMauiApp&amp;lt;App&amp;gt;()
    .ConfigureFonts(fonts =&amp;gt;
    {
        fonts.AddFont(&amp;quot;AbrilFatface-Regular.ttf&amp;quot;, &amp;quot;AbrilFatface&amp;quot;);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Restart the app to see the change.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-15-18-25.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="page-level-styles-ending-with-inheritance"&gt;Page-Level Styles (Ending With Inheritance)&lt;/h2&gt;
&lt;p&gt;We can format at the lowest level: individual elements. Let's create some styles at the page level.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;MainPage.xaml&lt;/code&gt;, add a ContentPage.Resources node with the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage.Resources&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;page&amp;quot; TargetType=&amp;quot;ContentPage&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot; /&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace the ContentPage &lt;code&gt;BackgroundColor=&amp;quot;AliceBlue&amp;quot;&lt;/code&gt; property with a Style property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
==&amp;gt;          Style=&amp;quot;{StaticResource page}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try running the app. Here we run into an irritating error.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/2022-07-11-15-11-15.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Maybe I'm missing something, but it appears we can't define a ContentPage style for the content page we're in. Harrumph!&lt;/p&gt;
&lt;p&gt;Undo both changes above. We &lt;em&gt;can&lt;/em&gt; create ContentPage styles, but we'll do it later when we move our styles to the application.&lt;/p&gt;
&lt;p&gt;For now, add this &lt;code&gt;ContentPage.Resources&lt;/code&gt; block instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;    &amp;lt;ContentPage.Resources&amp;gt;
        &amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style TargetType=&amp;quot;Button&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
    &amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In each label and the button, delete the &lt;code&gt;FontFamily=&amp;quot;AbrilFatface&amp;quot;&lt;/code&gt; attribute, then rerun the app, which should look the same as before. All we've done is create a couple of styles that say &amp;quot;If you display a label or a button, use the AbrilFatface font.&amp;quot; You can prove it works by changing the FontFamily name to something else such as &amp;quot;Consolas&amp;quot; (on Windows).&lt;/p&gt;
&lt;p&gt;These are &lt;em&gt;implicit&lt;/em&gt; styles. They're applied to elements that match the TargetType exactly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br /&gt;
But not to elements derived from the TargetType unless ApplyToDerivedTypes = True. See Microsoft's documentation (linked in Resources) for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's convert these to &lt;em&gt;explicit&lt;/em&gt; styles. We do that by setting the &lt;code&gt;x:Key&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage.Resources&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;baseLabel&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    
    &amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/ContentPage.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we've given our styles keys, we need to explicitly use them by using the Style attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Label 
    Text=&amp;quot;Hello, World!&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
    FontSize=&amp;quot;Header&amp;quot; 
    TextColor=&amp;quot;Purple&amp;quot; 
    Style=&amp;quot;{StaticResource baseLabel}&amp;quot;
    /&amp;gt;
&amp;lt;Label 
    Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
    SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
    FontSize=&amp;quot;15&amp;quot;
    HorizontalTextAlignment=&amp;quot;Center&amp;quot;
    Margin=&amp;quot;0,0,10,10&amp;quot; 
    Style=&amp;quot;{StaticResource baseLabel}&amp;quot;
        /&amp;gt;
&amp;lt;Button
    Text=&amp;quot;{Binding CountText}&amp;quot;
    SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
    Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; 
    HorizontalOptions=&amp;quot;End&amp;quot; 
    Margin=&amp;quot;0,0,10,0&amp;quot;
    BackgroundColor=&amp;quot;#b0dce1&amp;quot; 
    Style=&amp;quot;{StaticResource baseButton}&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let's build on this by defining two label styles that &lt;em&gt;inherit&lt;/em&gt; from &lt;code&gt;baseLabel&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
Per Microsoft, &amp;quot;An implicit style can be derived from an explicit style, but an explicit style can't be derived from an implicit style.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style x:Key=&amp;quot;baseLabel&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style x:Key=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; BasedOn=&amp;quot;{StaticResource baseLabel}&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style x:Key=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot; BasedOn=&amp;quot;{StaticResource baseLabel}&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The formatting can be removed from the labels.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Label 
    Text=&amp;quot;Hello, World!&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
    Style=&amp;quot;{StaticResource header}&amp;quot;
    /&amp;gt;
&amp;lt;Label 
    Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
    SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
    Style=&amp;quot;{StaticResource greeting}&amp;quot;
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's assume our &lt;code&gt;baseButton&lt;/code&gt; is going to use all the formatting, not just the font.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;End&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,0&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;#b0dce1&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which lets us simplify the button element.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Button
    Text=&amp;quot;{Binding CountText}&amp;quot;
    SemanticProperties.Hint=&amp;quot;Counts the number of times you click&amp;quot;
    Command=&amp;quot;{Binding IncreaseCounterCommand}&amp;quot; 
    Style=&amp;quot;{StaticResource baseButton}&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And do the same thing with the image. Why? I've found it's generally a good practice to keep all your styling together, even what seems like one-offs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;&lt;br /&gt;
What this helps with is &lt;em&gt;separation of concerns&lt;/em&gt;. We're separating out the styling (how elements look) from the semantics (what elements mean), letting us encapsulate our code and improve maintainability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style x:Key=&amp;quot;pageImage&amp;quot; TargetType=&amp;quot;Image&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Source&amp;quot; Value=&amp;quot;dotnet_bot.png&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;WidthRequest&amp;quot; Value=&amp;quot;50&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;Start&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Image
    Source=&amp;quot;dotnet_bot.png&amp;quot;
    SemanticProperties.Description=&amp;quot;Cute dot net bot waving hi to you!&amp;quot; 
    Style=&amp;quot;{StaticResource pageImage}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inheritance is nice and all, and tempting, but let's redo our styles to use what's often more powerful: composition through classes.&lt;/p&gt;
&lt;h2 id="styling-with-classes"&gt;Styling With Class(es)&lt;/h2&gt;
&lt;p&gt;One issue we ran into above is, in order to define named styles for our labels, we needed to inherit from a named base style.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br /&gt;
That's not the way it works in Cascading Style Sheets (CSS), where you can define styles for all label tags, then named styles that override those styles (using either an id or class identifier).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we use inheritance, we're stuck with whatever styles we defined in the base style. We can &lt;em&gt;override&lt;/em&gt; those styles, but not &lt;em&gt;remove&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;If we use classes, we can define characteristics or behaviors that we're styling for, define small, discreet sets of styles, and combine them. For example, maybe all labels have a blue background (&amp;quot;normal&amp;quot;), some get a bold font (&amp;quot;strong&amp;quot;), others get a large font size (&amp;quot;big&amp;quot;). Using classes, we could style a label as &amp;quot;normal strong&amp;quot;, &amp;quot;normal big&amp;quot;, or &amp;quot;normal strong big&amp;quot;.&lt;/p&gt;
&lt;p&gt;In our case, we're going to replace our inherited label styles with class-based styles, just to prove it works.&lt;/p&gt;
&lt;p&gt;Remove/replace the &lt;code&gt;x:Key&lt;/code&gt; attributes as shown.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style Class=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; &amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&amp;lt;Style Class=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
    &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the label elements to use the StyleClass attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Label 
    Text=&amp;quot;Hello, World!&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level1&amp;quot; 
    StyleClass=&amp;quot;header&amp;quot;
    /&amp;gt;
&amp;lt;Label 
    Text=&amp;quot;Welcome to .NET Multi-platform App UI&amp;quot;
    SemanticProperties.HeadingLevel=&amp;quot;Level2&amp;quot;
    SemanticProperties.Description=&amp;quot;Welcome to dot net Multi platform App U I&amp;quot; 
    StyleClass=&amp;quot;greeting&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart the app and it should look the same as before.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;br /&gt;
There's a downside to using classes. You can't interactively change style values while the app is running, because the changes aren't supported by Hot Reload. This is unfortunate, because using classes is really valuable and the friction might make developers shy away from them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="movin-on-up-using-global-styles"&gt;Movin' On Up! Using Global Styles&lt;/h2&gt;
&lt;p&gt;The next level up for styles is the Application. Here you define styles used throughout your pages. It's where you should expect most of your styles to live.&lt;/p&gt;
&lt;p&gt;Cut the entire &lt;code&gt;ContentPage.Resources&lt;/code&gt; node from &lt;code&gt;MainPage.xaml&lt;/code&gt; and paste it into &lt;code&gt;App.xaml&lt;/code&gt; inside the &lt;code&gt;Application&lt;/code&gt; node. Then rename it to &amp;quot;Application.Resources&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Application xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Maui.Progression&amp;quot;
             x:Class=&amp;quot;Maui.Progression.App&amp;quot;&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;Style x:Key=&amp;quot;pageImage&amp;quot; TargetType=&amp;quot;Image&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Source&amp;quot; Value=&amp;quot;dotnet_bot.png&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;WidthRequest&amp;quot; Value=&amp;quot;50&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;Start&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style Class=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; &amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style Class=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
        &amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
            &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;End&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,0&amp;quot;/&amp;gt;
            &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;#b0dce1&amp;quot;/&amp;gt;
        &amp;lt;/Style&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's . . . it. The app runs the same as before.&lt;/p&gt;
&lt;p&gt;Let's deal with something from earlier, though. Remember our content page background color? We can create a style for content pages here. Add the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;ContentPage&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot;/&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back in &lt;code&gt;MainPage.xaml&lt;/code&gt;, delete the ContentPage BackgroundColor attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
             xmlns:viewmodels=&amp;quot;clr-namespace:Maui.Progression.ViewModels;assembly=Maui.Progression.ViewModels&amp;quot;
             x:DataType=&amp;quot;viewmodels:Counter&amp;quot;
-&amp;gt; DELETE    BackgroundColor=&amp;quot;AliceBlue&amp;quot;
             &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rerun the app and you should still see a blue background.&lt;/p&gt;
&lt;p&gt;But you don't! Why not? Because our pages are derived from ContentPage, which isn't obvious. The solution?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Style TargetType=&amp;quot;ContentPage&amp;quot; ApplyToDerivedTypes=&amp;quot;True&amp;quot;&amp;gt;
    &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot; /&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the background shows as expected.&lt;/p&gt;
&lt;h2 id="take-your-styles-outside-young-man"&gt;Take Your Styles Outside, Young Man&lt;/h2&gt;
&lt;p&gt;If you've worked with web sites, you know that separate style files is a big deal. And, as noted above, it's a good practice. So let's come full circle and pull our styles out into their own file.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a file named &lt;code&gt;Styles.xaml&lt;/code&gt; to the &lt;code&gt;Resources/Styles&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Cut the &lt;code&gt;Application.Resources&lt;/code&gt; node from &lt;code&gt;App.xaml&lt;/code&gt; and paste it into &lt;code&gt;Styles.xaml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rename &lt;code&gt;Application.Resources&lt;/code&gt; to &lt;code&gt;ResourceDictionary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the top of the file like so.
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;?xaml-comp compile=&amp;quot;true&amp;quot; ?&amp;gt;
&amp;lt;ResourceDictionary 
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the complete file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;?xaml-comp compile=&amp;quot;true&amp;quot; ?&amp;gt;
&amp;lt;ResourceDictionary 
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;&amp;gt;
    &amp;lt;Style TargetType=&amp;quot;ContentPage&amp;quot; ApplyToDerivedTypes=&amp;quot;True&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;AliceBlue&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;pageImage&amp;quot; TargetType=&amp;quot;Image&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Source&amp;quot; Value=&amp;quot;dotnet_bot.png&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;WidthRequest&amp;quot; Value=&amp;quot;50&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;Start&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;10,10,0,30&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style TargetType=&amp;quot;Label&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style Class=&amp;quot;header&amp;quot; TargetType=&amp;quot;Label&amp;quot; &amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;Header&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;TextColor&amp;quot; Value=&amp;quot;Purple&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style Class=&amp;quot;greeting&amp;quot; TargetType=&amp;quot;Label&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontSize&amp;quot; Value=&amp;quot;15&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;HorizontalTextAlignment&amp;quot; Value=&amp;quot;Center&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,10&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
    &amp;lt;Style x:Key=&amp;quot;baseButton&amp;quot; TargetType=&amp;quot;Button&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;FontFamily&amp;quot; Value=&amp;quot;AbrilFatface&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;HorizontalOptions&amp;quot; Value=&amp;quot;End&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;Margin&amp;quot; Value=&amp;quot;0,0,10,0&amp;quot;/&amp;gt;
        &amp;lt;Setter Property=&amp;quot;BackgroundColor&amp;quot; Value=&amp;quot;#b0dce1&amp;quot;/&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/ResourceDictionary&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back in &lt;code&gt;App.xaml&lt;/code&gt;, we're going to merge our styles file. If we had more than one file (likely), we'd merge them all this way.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Application xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:Maui.Progression&amp;quot;
             x:Class=&amp;quot;Maui.Progression.App&amp;quot;&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;ResourceDictionary Source=&amp;quot;Resources/Styles/Styles.xaml&amp;quot;/&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rerun the app and, as before, it has our styles.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;We covered a lot, but XAML styles are a much deeper subject and I won't say I've explored its fathoms. Be sure to check out the links below.&lt;/p&gt;
&lt;p&gt;Next up: Build (and maybe deployment)!&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/user-interface/styles/xaml"&gt;Style apps using XAML - .NET MAUI | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/user-interface/fonts"&gt;Fonts in .NET MAUI - .NET MAUI | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries"&gt;Resource dictionaries - .NET MAUI | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 11 Jul 2022 19:11:18 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch</guid>
    </item>
    <item>
      <title>.NET MAUI Progressing From a Default Project Part 4 - Putting the View in Its Place</title>
      <description>&lt;h2 id="the-series"&gt;The Series&lt;/h2&gt;
&lt;p&gt;Level: Moderate&lt;/p&gt;
&lt;p&gt;This series assumes the developer is familiar with .NET MAUI, the Model-View-ViewModel pattern, and has worked through one or more tutorials such as the excellent &lt;a href="https://www.youtube.com/watch?app=desktop&amp;amp;v=DuNLR_NJv8U"&gt;James Montemagno's Workshop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/bladewolf55/net-maui-progression"&gt;https://github.com/bladewolf55/net-maui-progression&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_1_-_adding_the_view_model/"&gt;Part 1 - Adding the View Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_2_-__the_problem_with__basic_unit_testing"&gt;Part 2 - (The Problem With) Basic Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;Part 3 - Adding the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/"&gt;Part 4 - Putting the View in Its Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_5_-_restyling_from_scratch/"&gt;Part 5 - Restyling From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_6_-_revisiting_unit_testing/"&gt;Part 6 - Revisiting Unit Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_7_deploying_the_other_peoples_links_edition/"&gt;Part 7 - Deploying, the Other People's Links Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="moving-the-view"&gt;Moving the View&lt;/h2&gt;
&lt;p&gt;Compared to the &lt;a href="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_3_-_adding_the_model_more_testing_and_ddd/"&gt;last part&lt;/a&gt;, this one's really short.&lt;/p&gt;
&lt;p&gt;Our app has one view, MainPage, sitting in the root of the project. Like the rest of this series, that's fine for a small app with just a few views. But let's keep our app tidy and pretend it's going to have a dozen views.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which might be an awful lot for a mobile app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the &lt;code&gt;Maui.Progression&lt;/code&gt; project, add a folder named &amp;quot;Views&amp;quot; and move the MainPage files (&lt;code&gt;MainPage.xaml&lt;/code&gt; and &lt;code&gt;MainPage.xaml.cs&lt;/code&gt;) into it. When prompted to adjust namespaces, choose Yes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/2022-07-04-19-07-19.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Trickery, trickery, trickery&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;Neither&lt;/em&gt; of our files' namespaces got updated.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;MainPage.xaml.cs&lt;/code&gt; and update the namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.ViewModels;

namespace Maui.Progression.Views;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open &lt;code&gt;MainPage.xaml&lt;/code&gt; and update the page's x:Class namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
             x:Class=&amp;quot;Maui.Progression.Views.MainPage&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to edit &lt;code&gt;MauiProgram.cs&lt;/code&gt; to add &lt;code&gt;Maui.Progression.Views&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Maui.Progression.DomainServices;
using Maui.Progression.DomainServices.Interfaces;
using Maui.Progression.ViewModels;
using Maui.Progression.Views;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;And&lt;/em&gt; the &lt;code&gt;AppShell.xaml&lt;/code&gt; &amp;quot;local&amp;quot; namespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;Shell
    x:Class=&amp;quot;Maui.Progression.AppShell&amp;quot;
    xmlns=&amp;quot;http://schemas.microsoft.com/dotnet/2021/maui&amp;quot;
    xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2009/xaml&amp;quot;
    xmlns:local=&amp;quot;clr-namespace:Maui.Progression.Views&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the program and the tests. Et voila! it works.&lt;/p&gt;
&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;I know, I know. &amp;quot;Jeez, that was easy, what was the point?&amp;quot;&lt;/p&gt;
&lt;p&gt;The point is that we now have a well-organized application, which increases maintainability. We're following a View-Model-ViewModel pattern, and our Views, View Models, and Models are corralled into their metaphorical pens. We also saw just how pervasive and important the namespaces are, and that--unlike some other refactoring--Visual Studio doesn't (today) catch everything.&lt;/p&gt;
&lt;p&gt;Next Up: Styles!&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;From The Far Side by Gary Larson&lt;br /&gt;
&lt;img src="https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place/farside-trickery.jpg" alt="" /&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Mon, 4 Jul 2022 19:00:47 -0600</pubDate>
      <link>https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place</link>
      <guid isPermaLink="true">https://www.softwaremeadows.com/posts/net_maui_progressing_from_a_default_project_part_4_-_putting_the_view_in_its_place</guid>
    </item>
  </channel>
</rss>